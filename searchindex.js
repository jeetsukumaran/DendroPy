Search.setIndex({"docnames": ["changes", "code_of_conduct", "developer", "downloading", "glossary", "index", "library/basemodel", "library/birthdeath", "library/charmatrixmodel", "library/charstatemodel", "library/coalescent", "library/continuous", "library/datasetmodel", "library/discrete", "library/index", "library/parsimony", "library/phylogeneticdistance", "library/popgensim", "library/popgenstat", "library/probability", "library/protractedspeciation", "library/reconcile", "library/statistics", "library/taxonmodel", "library/treecollectionmodel", "library/treecompare", "library/treemeasure", "library/treemodel", "library/treescore", "library/treeshape", "library/treesim", "migration", "news", "planning", "primer/bipartitions", "primer/chars", "primer/converting", "primer/dataobjects", "primer/datasets", "primer/genbank", "primer/index", "primer/paup", "primer/phylogenetic_character_analyses", "primer/phylogenetic_distances", "primer/popgenstats", "primer/raxml", "primer/reading_and_writing", "primer/seqgen", "primer/taxa", "primer/taxa_partitions", "primer/treecollections", "primer/treemanips", "primer/trees", "primer/treesims", "primer/treestats", "primer/working_with_metadata_annotations", "programs/index", "programs/sumtrees", "schemas/fasta", "schemas/index", "schemas/newick", "schemas/nexml", "schemas/nexus", "schemas/phylip"], "filenames": ["changes.rst", "code_of_conduct.rst", "developer.rst", "downloading.rst", "glossary.rst", "index.rst", "library/basemodel.rst", "library/birthdeath.rst", "library/charmatrixmodel.rst", "library/charstatemodel.rst", "library/coalescent.rst", "library/continuous.rst", "library/datasetmodel.rst", "library/discrete.rst", "library/index.rst", "library/parsimony.rst", "library/phylogeneticdistance.rst", "library/popgensim.rst", "library/popgenstat.rst", "library/probability.rst", "library/protractedspeciation.rst", "library/reconcile.rst", "library/statistics.rst", "library/taxonmodel.rst", "library/treecollectionmodel.rst", "library/treecompare.rst", "library/treemeasure.rst", "library/treemodel.rst", "library/treescore.rst", "library/treeshape.rst", "library/treesim.rst", "migration.rst", "news.rst", "planning.rst", "primer/bipartitions.rst", "primer/chars.rst", "primer/converting.rst", "primer/dataobjects.rst", "primer/datasets.rst", "primer/genbank.rst", "primer/index.rst", "primer/paup.rst", "primer/phylogenetic_character_analyses.rst", "primer/phylogenetic_distances.rst", "primer/popgenstats.rst", "primer/raxml.rst", "primer/reading_and_writing.rst", "primer/seqgen.rst", "primer/taxa.rst", "primer/taxa_partitions.rst", "primer/treecollections.rst", "primer/treemanips.rst", "primer/trees.rst", "primer/treesims.rst", "primer/treestats.rst", "primer/working_with_metadata_annotations.rst", "programs/index.rst", "programs/sumtrees.rst", "schemas/fasta.rst", "schemas/index.rst", "schemas/newick.rst", "schemas/nexml.rst", "schemas/nexus.rst", "schemas/phylip.rst"], "titles": ["DendroPy Change History", "Code of Conduct", "Developer Guide", "Downloading and Installing DendroPy", "Glossary and Terminological Reference", "DendroPy Phylogenetic Computing Library", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.basemodel</span></code>: Core Infrastructure for Phylogenetic Data Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.birthdeath</span></code>: The Birth-Death and Related Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.charmatrixmodel</span></code>: Character Sequences and Matrices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.charstatemodel</span></code>: Character State Identities and Alphabets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.coalescent</span></code>: The Coalescent", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.continuous</span></code>: Continuous Character Evolution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.datasetmodel</span></code>: Datasets \u2013 Aggregate Collections of Taxon, Character, and Tree Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.discrete</span></code>: Discrete Character Evolution", "DendroPy Library Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.parsimony</span></code>: The Parsimony Model", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.phylogeneticdistance</span></code>: Phylogenetic Distance Calculations and Operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.simulate.popgensim</span></code>: Population Genetics Simulations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.popgenstat</span></code>: Population Genetics Statistics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.probability</span></code>: General Probability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.protractedspeciation</span></code>: The Protracted Speciation (Birth-Death) Model", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.reconcile</span></code>: Tree-Fitting (Gene/Species, Parasite/Host, etc.)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.statistics</span></code>: General Statistics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.taxonmodel</span></code>: Taxonomic Namespace Reference and Management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.treecollectionmodel</span></code>: Collections of Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.treecompare</span></code>: Distances and Comparison Between Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.treemeasure</span></code>: Unary Tree Statistics and Metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.datamodel.treemodel</span></code>: Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.calculate.treescore</span></code>: Scoring Trees with Reference to Data and a Model", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.model.treeshape</span></code>: Models of Tree Shape", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dendropy.simulate.treesim</span></code>: Unified Namespace Aggregating Functions and Classes for Tree Simulations", "DendroPy 4 Changes and Migration Primer", "DendroPy News", "Ongoing Development", "Bipartitions", "Character Matrices", "Converting Between Data Formats", "Introduction to Phylogenetic Data Objects", "Data Sets", "Working with GenBank Molecular Sequence Databases", "The DendroPy Primer", "PAUP", "Phylogenetic Character Analyses", "Phylogenetic Distance-Based Operations", "Population Genetic Summary Statistics", "RAxML", "Reading and Writing Phylogenetic Data", "Seq-Gen", "Taxon Namespaces and Taxon Management", "Partitions of Taxon Sets", "Collections of Trees", "Tree Manipulation and Restructuring", "Trees", "Tree Simulation and Generation", "Tree Statistics, Metrics, Summarizations, and Other Calculations", "Working with Metadata Annotations", "Programs and Applications", "SumTrees: Phylogenetic Tree Summarization and Annotation", "FASTA", "DendroPy Schemas: Phylogenetic and Evolutionary Biology Data Formats", "Newick", "NeXML", "NEXUS", "PHYLIP"], "terms": {"jeet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "sukumaran": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "mark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "t": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "holder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "http": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "pypi": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "python": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "org": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "github": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "com": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "jeetsukumaran": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "7": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "setuptool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "pip": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "git": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "_static": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "dendropy_logo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "png": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "librari": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "index": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "primer": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "program": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63], "sumtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "announc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "user": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "issu": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "taxon": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "taxonnamespac": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "taxonnamespacemap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "tree": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 32, 33, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 55, 56, 58, 59, 63], "node": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63], "edg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "bipartit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "treelist": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63], "treearrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63], "splitdistribut": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "splitdistributionsummar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "dataset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "stateident": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "statealphabet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "charactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "dnacharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "rnacharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "proteincharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "infinitesitescharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "restrictionsitescharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "standardcharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60], "continuouscharactermatrix": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "characterdatasequ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "continuouscharacterdatasequ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "dnacharacterdatasequ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "charactertyp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "annot": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63], "annotationset": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "phylogeneticdistancematrix": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "asciitreeplot": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "get": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59], "put": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "read": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 53, 54, 56, 57, 59], "write": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 59], "get_from_": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "read_from_": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "write_to_": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "figtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "raxml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "seq": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "gen": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "genbank": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "schema": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "phylogenet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63], "evolutionari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63], "biologi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63], "data": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63], "format": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63], "fasta": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63], "newick": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63], "nexu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63], "nexml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63], "phylip": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "packag": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "sourc": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63], "d": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "tar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "gz": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "code": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "archiv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "moreno": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "m": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "A": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "j": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "2024": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "matur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "comput": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "arxiv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "preprint": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "2405": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "14120": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "doi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "10": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "48550": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "copyright": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63], "2009": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "right": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "reserv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "support": [0, 2, 4, 5, 8, 11, 12, 14, 24, 27, 31, 32, 33, 35, 37, 38, 46, 50, 52, 55, 56, 59], "specifi": [0, 1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 23, 24, 26, 27, 30, 31, 32, 34, 35, 37, 42, 43, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 63], "random": [0, 7, 10, 11, 13, 16, 19, 21, 27, 30, 34, 43, 50, 52, 53, 54, 55], "seed": [0, 4, 27, 52], "wrapper": [0, 13, 45, 47, 51], "thank": [0, 2, 32], "noahamsel": 0, "much": [0, 10, 26, 30, 32, 35, 37, 47, 50, 54, 57], "faster": [0, 19, 31, 32, 50], "label": [0, 4, 6, 8, 9, 10, 12, 16, 21, 23, 24, 27, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63], "lookup": [0, 9, 23], "sam": 0, "nichol": 0, "samstudio8": 0, "birth": [0, 14, 17, 26, 30, 32, 40], "death": [0, 14, 26, 30, 32, 40], "gener": [0, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 21, 24, 27, 30, 32, 40, 46, 47, 48, 50, 54, 55, 57], "nicoladm": 0, "storag": [0, 6, 24], "supplement": [0, 5], "block": [0, 8, 10, 12, 18, 24, 27, 29, 30, 37, 39, 48, 55, 57], "type": [0, 5, 6, 9, 12, 13, 14, 15, 24, 27, 34, 36, 37, 38, 39, 40, 43, 46, 49, 51, 54, 55, 56, 58, 63], "phylogeneticindependentconstrast": [0, 42], "phylogeneticindependentcontrast": [0, 11, 14, 42], "calcul": [0, 4, 7, 10, 11, 15, 20, 23, 24, 27, 31, 32, 40, 42, 44, 48, 49, 50, 51, 52, 57], "likelihood": [0, 7, 32, 41, 45, 57], "inherit": [0, 7, 30, 32], "root": [0, 4, 7, 11, 13, 15, 16, 21, 24, 26, 27, 31, 32, 34, 37, 40, 42, 52, 53, 54, 56, 60, 62], "state": [0, 4, 8, 13, 14, 15, 16, 18, 24, 27, 31, 32, 34, 35, 54], "patrist": [0, 16, 26, 32, 40, 52], "path": [0, 4, 8, 11, 12, 15, 16, 24, 26, 27, 32, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 57, 58, 60, 61, 62, 63], "between": [0, 4, 7, 8, 9, 10, 14, 16, 22, 23, 24, 26, 27, 32, 34, 35, 39, 40, 43, 44, 48, 50, 51, 52, 53, 57], "tip": [0, 4, 7, 10, 13, 16, 20, 21, 26, 27, 30, 32, 34, 40, 43, 52, 53, 54, 56], "can": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 22, 23, 24, 27, 30, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57], "track": [0, 6, 8, 32, 38, 39, 43, 50, 51, 52, 55], "patristicdistancematrix": [0, 14, 26, 32], "charact": [0, 5, 14, 15, 18, 27, 32, 37, 38, 43, 48, 49, 52, 55], "column": [0, 8, 11, 13, 15, 16, 22, 27, 32, 35, 42, 43, 57], "metadata": [0, 6, 8, 23, 24, 31, 32, 37, 50, 51, 52, 54], "now": [0, 5, 16, 27, 32, 38, 39, 57], "actual": [0, 4, 5, 6, 9, 19, 23, 24, 27, 30, 32, 34, 38, 39, 46, 48, 50, 51, 53, 54, 55, 57], "possibl": [0, 7, 8, 27, 30, 32, 33, 34, 52, 53], "standard": [0, 6, 7, 9, 15, 16, 22, 26, 27, 30, 32, 35, 48, 52, 53, 55, 57, 58, 63], "matrix": [0, 8, 13, 15, 16, 22, 27, 32, 40, 41, 42, 43, 46, 48, 49], "default": [0, 6, 7, 8, 10, 11, 12, 13, 15, 16, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 34, 38, 39, 42, 43, 47, 48, 50, 51, 53, 54, 55, 57, 60, 62], "9": [0, 8, 32, 39, 43, 53, 55], "alphabet": [0, 8, 14, 32, 35], "instead": [0, 6, 8, 10, 12, 16, 23, 24, 27, 30, 31, 32, 34, 38, 43, 46, 48, 51, 52, 53, 54, 55, 57], "just": [0, 1, 4, 6, 8, 12, 15, 16, 24, 27, 30, 32, 34, 39, 51, 52, 53, 54, 55, 57], "01": [0, 7, 9, 10, 19, 32, 43, 52, 53, 58, 63], "reorgan": [0, 32], "directori": [0, 32, 57], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 57], "home": [0, 32], "test": [0, 5, 25, 26, 27, 32, 54], "more": [0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 22, 23, 24, 26, 27, 30, 32, 34, 35, 37, 38, 39, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57], "modern": [0, 32, 33], "src": [0, 8, 12, 16, 24, 27, 32, 43, 46], "respect": [0, 1, 4, 7, 8, 9, 10, 12, 15, 16, 23, 24, 27, 30, 31, 32, 34, 38, 39, 46, 51, 55], "import": [0, 4, 5, 7, 8, 15, 16, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 59], "bugfix": [0, 32], "split": [0, 4, 5, 6, 21, 23, 24, 27, 31, 48, 51, 53, 56], "consensu": [0, 24, 32, 33, 34, 55, 56], "previous": [0, 9, 16, 31], "wa": [0, 1, 17, 20, 21, 22, 27, 31, 43, 50, 51, 53, 54, 57], "ignor": [0, 7, 8, 11, 16, 27, 30, 35, 42, 43, 57], "result": [0, 4, 5, 6, 8, 10, 12, 15, 16, 20, 21, 23, 24, 26, 27, 30, 31, 34, 35, 38, 39, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57], "null": [0, 16, 22, 43], "length": [0, 4, 5, 7, 8, 10, 11, 13, 16, 17, 19, 21, 24, 25, 26, 27, 30, 32, 35, 39, 42, 43, 47, 51, 52, 53, 55, 56], "ad": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 21, 23, 24, 26, 27, 30, 31, 32, 35, 37, 40, 42, 48, 50, 52, 53, 57], "sumlabel": [0, 32], "py": [0, 2, 3, 5, 32, 38, 53, 54], "applic": [0, 5, 32, 33, 34, 49, 52, 53, 55], "model": [0, 4, 16, 17, 26, 27, 30, 31, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 50, 53, 55, 56], "birth_death_tre": [0, 7, 14, 30, 32, 53], "allow": [0, 1, 4, 6, 7, 8, 11, 12, 16, 27, 30, 32, 34, 35, 38, 39, 48, 51, 54, 55, 57], "preserv": [0, 6, 8, 9, 12, 23, 24, 27, 32, 48, 50, 52, 55, 57], "extinct": [0, 7, 20, 30, 32, 53, 54], "improv": [0, 2, 5, 32, 33, 56], "perform": [0, 2, 5, 11, 24, 27, 31, 32, 33, 34, 37, 44, 50, 51, 56], "subset": [0, 4, 7, 14, 16, 24, 27, 30, 32, 34, 35, 49, 53, 55], "export": [0, 8, 32, 45, 59], "branch": [0, 2, 3, 4, 5, 7, 10, 11, 13, 17, 21, 25, 26, 27, 30, 32, 42, 43, 47, 48, 57], "assign": [0, 7, 8, 10, 12, 17, 23, 24, 27, 30, 31, 32, 34, 39, 44, 48, 50, 52, 54, 56], "randomli": [0, 7, 10, 11, 16, 19, 27, 30, 32, 53], "resolv": [0, 11, 27, 32, 42, 52], "polytomi": [0, 11, 27, 32, 53], "explicitli": [0, 4, 5, 16, 23, 24, 25, 27, 31, 32, 34, 36, 37, 38, 48, 49, 51, 57], "set": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 34, 35, 36, 37, 39, 42, 43, 46, 48, 50, 52, 53, 54, 55, 56], "nj": [0, 16, 32, 41, 54], "upgma": [0, 16, 32, 54], "prune": [0, 4, 20, 32, 34, 40], "kyungtaeklim": [0, 32], "nest": [0, 32], "rais": [0, 6, 7, 8, 9, 10, 17, 20, 23, 26, 27, 30, 32, 53, 54, 55], "keyerror": [0, 6, 8, 9, 32], "basemodel": [0, 14, 31, 32], "__deepcopy__": [0, 6, 8, 12, 24, 27, 32], "steve": [0, 32], "bond": [0, 32], "catch": [0, 32], "case": [0, 4, 7, 8, 9, 10, 12, 16, 23, 24, 27, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 46, 48, 50, 51, 53, 54, 55, 57], "dure": [0, 1, 17, 32], "deepcopi": [0, 8, 23, 24, 27, 32, 50, 52], "when": [0, 1, 4, 6, 7, 8, 9, 10, 11, 12, 16, 19, 20, 21, 23, 24, 27, 30, 31, 32, 34, 37, 39, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59], "object": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 21, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "ha": [0, 4, 5, 6, 8, 9, 11, 12, 15, 16, 20, 23, 24, 26, 27, 31, 32, 34, 35, 37, 38, 39, 42, 43, 46, 48, 50, 51, 52, 53, 54, 55, 57], "_annot": [0, 32], "optim": [0, 22, 31, 32], "variou": [0, 12, 16, 19, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 42, 43, 46, 48, 54, 55, 57, 59], "popul": [0, 4, 5, 6, 8, 10, 12, 14, 15, 16, 19, 21, 22, 23, 24, 27, 30, 32, 34, 35, 37, 38, 40, 46, 48, 49, 50, 52, 53, 54, 55], "genet": [0, 14, 32, 40, 49, 60], "andrew": [0, 32], "gui": [0, 32], "newickread": [0, 32], "pars": [0, 6, 8, 12, 16, 24, 27, 31, 32, 34, 36, 37, 38, 43, 46, 48, 49, 50, 55, 59], "jplace": [0, 32], "style": [0, 32, 39, 55], "number": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 39, 40, 43, 44, 46, 48, 49, 50, 51, 55, 56], "ben": [0, 32], "woodcroft": [0, 32], "probabl": [0, 3, 5, 7, 10, 12, 13, 14, 15, 16, 20, 22, 24, 30, 32, 38, 42, 49, 52, 56], "gene": [0, 10, 14, 17, 27, 30, 32, 53], "": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 44, 46, 47, 48, 49, 52, 54, 55, 56, 58, 60, 61, 62, 63], "speci": [0, 7, 9, 10, 14, 16, 20, 30, 32, 43, 48, 53, 55], "under": [0, 5, 7, 10, 11, 13, 15, 16, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 38, 40, 43, 45, 46, 47, 48, 57, 59], "multispeci": [0, 32, 40, 54], "coalesc": [0, 14, 21, 27, 30, 31, 32, 40, 49], "approach": [0, 7, 11, 27, 30, 32, 34, 38, 39, 49, 51, 52, 53, 54], "distanc": [0, 4, 14, 21, 26, 27, 31, 32, 34, 50, 52], "unlabel": [0, 32], "differ": [0, 1, 2, 4, 8, 10, 13, 15, 20, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 50, 52, 54, 55, 57], "size": [0, 1, 4, 8, 10, 12, 16, 17, 21, 24, 26, 27, 30, 32, 53, 54, 55], "profiledist": [0, 32], "treecompar": [0, 14, 27, 31, 32, 34, 48, 50, 51, 52, 54], "treeshapekernel": [0, 32], "intern": [0, 4, 6, 7, 10, 17, 24, 26, 27, 31, 32, 34, 43, 51, 52, 53, 57], "associ": [0, 4, 6, 8, 10, 13, 15, 16, 19, 20, 21, 22, 23, 24, 27, 30, 32, 34, 35, 37, 38, 39, 43, 48, 50, 51, 52, 53, 54, 55], "either": [0, 4, 5, 7, 9, 12, 16, 17, 20, 25, 27, 31, 32, 34, 35, 39, 42, 43, 46, 49, 51, 55, 57], "date": [0, 2, 5, 21, 32, 34, 39, 53, 55, 56], "non": [0, 5, 9, 10, 16, 19, 22, 24, 26, 27, 30, 31, 32, 34, 39, 42, 43, 48, 53, 54, 56], "contemporan": [0, 32, 56], "ag": [0, 1, 7, 10, 17, 21, 24, 26, 27, 32, 52, 56], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 63], "argument": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 21, 23, 24, 25, 27, 30, 31, 32, 34, 35, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "html": [0, 1, 2, 19, 32, 57, 60], "summari": [0, 5, 32, 40, 49, 54, 56], "min": [0, 16, 32, 43, 51, 57], "clade": [0, 5, 24, 27, 32, 56], "freq": [0, 32, 57], "appli": [0, 1, 16, 27, 32, 48, 57], "target": [0, 4, 6, 8, 32, 48, 53, 55, 56], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 35, 36, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "e": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 34, 35, 36, 37, 38, 39, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57], "well": [0, 1, 3, 5, 8, 20, 24, 27, 32, 34, 35, 37, 38, 46, 52, 53, 55, 57], "g": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 27, 30, 31, 32, 34, 35, 37, 38, 39, 43, 46, 48, 49, 51, 52, 53, 55, 57], "mcct": [0, 24, 32, 54, 56], "fast": [0, 7, 32, 51], "flexibl": [0, 27, 32, 51, 55], "power": [0, 32, 51], "subtre": [0, 4, 11, 26, 27, 32, 34, 40], "clone": [0, 5, 6, 8, 9, 12, 23, 24, 27, 31, 32, 40, 42, 51, 57], "extract": [0, 5, 10, 12, 24, 27, 32, 40, 52, 54], "onli": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 39, 42, 43, 45, 48, 49, 52, 55, 57], "taxa": [0, 7, 8, 10, 12, 13, 15, 16, 21, 23, 24, 26, 27, 29, 30, 32, 35, 37, 38, 42, 43, 48, 49, 50, 51, 53, 54, 55, 57], "interest": [0, 5, 32, 34, 43, 50, 51, 57], "treemanip": [0, 32], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 30, 31, 32, 35, 37, 40, 42, 44, 48, 49, 50, 52, 54, 57], "exist": [0, 4, 7, 8, 9, 10, 13, 21, 23, 24, 27, 30, 31, 32, 35, 39, 40, 42, 43, 50, 52, 55, 57], "neighbor": [0, 16, 32, 41, 54], "join": [0, 16, 27, 32, 41, 42, 54], "phylogenetic_dist": [0, 32], "The": [0, 1, 3, 4, 5, 11, 12, 13, 14, 17, 19, 25, 26, 30, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 57], "warm": 0, "over": [0, 5, 6, 8, 9, 12, 13, 15, 16, 19, 22, 23, 24, 26, 27, 32, 34, 35, 38, 39, 40, 46], "manag": [0, 2, 3, 5, 8, 9, 10, 12, 14, 16, 19, 21, 24, 27, 30, 31, 37, 39, 40, 53, 54, 55, 57], "within": [0, 1, 4, 5, 10, 12, 16, 21, 24, 27, 30, 33, 34, 39, 40, 44, 55, 57], "ecolog": [0, 16], "statist": [0, 16, 25, 28, 31, 32, 34, 39, 40, 49, 50, 51, 57], "describ": [0, 4, 5, 10, 20, 21, 35, 46, 49, 53, 54, 55, 57], "below": [0, 7, 8, 23, 31, 34, 39, 43, 46, 48, 53, 55, 56], "creat": [0, 2, 6, 7, 8, 9, 10, 12, 13, 16, 23, 24, 27, 30, 34, 36, 39, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55], "commun": [0, 1, 2, 5, 16, 19, 32, 33, 40, 53, 54], "ecologi": [0, 16, 32], "mean": [0, 4, 10, 11, 13, 16, 19, 20, 22, 24, 26, 27, 32, 34, 43, 48, 50, 53, 54, 56], "pairwis": [0, 16, 32, 43, 44, 54], "mpd": [0, 16, 32, 43, 54], "nearest": [0, 16, 27, 32, 43, 54], "mntd": [0, 16, 32, 43, 54], "effect": [0, 4, 8, 10, 16, 17, 23, 24, 26, 27, 30, 32, 34], "equival": [0, 4, 7, 9, 12, 16, 23, 24, 26, 27, 30, 32, 34, 39, 46, 48, 51, 57], "nri": [0, 16, 32], "nti": [0, 32], "datat": [0, 43], "class": [0, 1, 4, 5, 10, 11, 12, 13, 14, 19, 21, 22, 25, 26, 32, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 53, 54, 55], "implement": [0, 5, 13, 19, 24, 27, 30, 31, 33, 46, 52], "protract": [0, 14, 32], "speciat": [0, 7, 14, 27, 32], "process": [0, 2, 4, 5, 8, 10, 12, 15, 19, 20, 24, 26, 27, 30, 31, 32, 37, 38, 39, 40, 43, 46, 50, 52, 55, 56], "explicit": [0, 1, 32, 48, 53, 57], "rather": [0, 5, 6, 8, 9, 16, 23, 24, 27, 31, 32, 35, 38, 43, 55], "than": [0, 5, 6, 7, 9, 10, 11, 12, 17, 24, 26, 27, 30, 31, 32, 38, 42, 43, 51, 52, 53, 54, 55, 57], "event": [0, 1, 7, 10, 17, 19, 20, 27, 32, 53], "incorpor": [0, 3, 32, 57], "lag": [0, 32], "initi": [0, 6, 7, 8, 9, 13, 23, 24, 30, 32, 52, 57], "complet": [0, 10, 12, 20, 23, 24, 32, 34, 38, 48, 50, 51, 52, 57], "termin": [0, 4, 5, 7, 20, 21, 26, 27, 30, 48, 53, 57], "semicolon": 0, "requir": [0, 2, 4, 5, 6, 7, 8, 12, 13, 15, 21, 23, 24, 27, 30, 34, 39, 41, 42, 44, 45, 46, 47, 49, 51, 52, 54, 55, 57, 59], "relax": [0, 7, 10, 12, 43], "some": [0, 4, 5, 7, 8, 10, 15, 16, 22, 23, 24, 27, 28, 30, 31, 34, 43, 44, 46, 48, 49, 50, 51, 52, 54, 55, 57], "refin": 0, "filter": [0, 6, 16, 27, 43, 52, 55, 57], "drop": [0, 6, 33, 42, 51, 55, 57], "return": [0, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 35, 39, 42, 43, 44, 46, 49, 51, 52, 53, 54, 55, 57], "list": [0, 2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, 33, 35, 37, 38, 39, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57], "out": [0, 4, 5, 8, 10, 12, 19, 20, 21, 24, 27, 31, 32, 35, 37, 38, 39, 40, 42, 48, 51, 55, 57], "leav": [0, 5, 7, 10, 15, 16, 26, 27, 30, 34, 43, 53, 54], "forc": [0, 12, 16, 23, 24, 25, 27, 31, 34, 51, 54, 56], "max": [0, 26, 27], "begin": [0, 2, 4, 19, 39, 42, 44, 48, 49, 57], "function": [0, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 19, 21, 22, 23, 24, 27, 31, 32, 34, 41, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55], "find_nod": [0, 27], "collect": [0, 4, 6, 8, 9, 14, 16, 22, 23, 27, 31, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 48, 52], "match": [0, 6, 8, 9, 11, 16, 23, 24, 27, 31, 43, 48, 50, 55, 57], "insta": 0, "first": [0, 4, 6, 7, 8, 9, 10, 12, 13, 16, 17, 18, 19, 23, 24, 25, 27, 31, 34, 35, 38, 39, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 57], "one": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 20, 23, 24, 27, 30, 31, 32, 34, 35, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "handl": [0, 2, 4, 5, 6, 8, 12, 23, 24, 27, 35, 38, 39, 42, 45, 55, 57], "sequenc": [0, 4, 9, 12, 13, 14, 17, 18, 21, 23, 24, 27, 34, 44, 47, 48, 49, 52, 54, 55], "comparison": [0, 14, 24, 27, 34, 48, 50, 51], "where": [0, 5, 6, 8, 10, 12, 13, 16, 17, 18, 21, 24, 27, 30, 32, 33, 34, 35, 38, 39, 43, 48, 50, 51, 52, 53, 56], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "site": [0, 5, 13, 15, 18, 44, 45, 57], "common": [0, 1, 4, 7, 10, 12, 15, 23, 25, 27, 34, 35, 38, 40, 44, 54, 57], "string": [0, 4, 6, 7, 8, 9, 10, 11, 12, 16, 18, 23, 24, 25, 27, 30, 31, 32, 34, 38, 39, 40, 46, 48, 49, 50, 51, 52, 54, 55, 59], "check": [0, 2, 7, 8, 10, 21, 23, 27, 39, 42, 51, 56], "unicod": 0, "etc": [0, 4, 5, 6, 8, 12, 14, 17, 24, 27, 31, 32, 34, 35, 37, 38, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56], "exclus": [0, 4, 5, 9, 21, 27, 31, 34, 49], "work": [0, 3, 5, 10, 21, 22, 27, 31, 32, 34, 35, 37, 38, 45, 50, 52, 57], "symbol": [0, 8, 9, 27, 34], "ident": [0, 1, 8, 11, 14, 23, 24, 27, 34, 39, 48, 49, 53, 54], "coercion": 0, "deriv": [0, 5, 8, 12, 15, 18, 23, 24, 27, 31, 35, 46, 48, 51, 55, 57], "pop": [0, 6, 49, 50], "inner": [0, 4], "enabl": [0, 5, 50], "pickl": 0, "sever": [0, 33, 46], "mostli": [0, 8, 23, 24, 27, 45], "caus": [0, 11, 31], "leftov": 0, "dendropy3": [0, 27], "made": [0, 9, 23, 24, 27, 38, 48, 51, 55, 57], "group_rang": 0, "properli": [0, 9, 10, 30], "unord": [0, 15], "iter": [0, 6, 7, 8, 9, 10, 12, 15, 16, 20, 21, 23, 24, 27, 31, 34, 35, 40, 43, 54], "make": [0, 1, 2, 5, 6, 7, 8, 11, 12, 13, 24, 27, 30, 33, 34, 35, 37, 39, 43, 46, 48, 50, 51, 52, 57], "correctli": [0, 48], "miss": [0, 8, 9, 15, 27, 39, 48, 49, 57], "propag": 0, "f": [0, 8, 11, 12, 22, 24, 27, 34, 43, 51, 53, 54, 57], "frequenc": [0, 8, 13, 18, 24, 56], "option": [0, 6, 7, 8, 9, 12, 15, 21, 23, 24, 27, 30, 31, 33, 37, 38, 39, 42, 46, 47, 51, 52, 57], "underli": [0, 8, 12, 16, 24, 27, 39, 43, 45, 53], "summar": [0, 5, 14, 22, 24, 32, 40, 51, 56], "engin": [0, 32, 57], "v": [0, 2, 8, 19, 22, 32, 35, 41, 43, 52, 55, 57], "ultrametr": [0, 7, 10, 21, 26, 27, 53, 54, 56], "precis": [0, 7, 10, 27], "take": [0, 1, 2, 5, 6, 8, 10, 11, 12, 15, 16, 19, 23, 24, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "numer": [0, 7, 8, 9, 10, 16, 24, 27, 30, 31, 35, 42, 43, 54], "valu": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 37, 39, 43, 46, 48, 49, 50, 51, 52, 53, 54, 57, 59], "suppress": [0, 4, 34, 42, 55, 57], "definit": [0, 3, 4, 5, 8, 9, 12, 23, 27, 37, 39, 43, 48, 51, 52, 57], "adjust": [0, 21, 27, 42, 57], "child": [0, 4, 10, 27, 31, 37, 48, 51, 52, 53, 55], "collaps": [0, 4, 21, 24, 27, 32, 34, 51, 56], "basal": [0, 4, 27, 34, 51], "bifurc": [0, 4, 15, 27, 34, 42, 51], "instal": [0, 2, 32, 33, 41, 45, 47, 56], "virtual": [0, 50], "environ": [0, 1, 3, 5, 56], "virtualenv": 0, "dendropi": [1, 2, 4, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63], "0": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "5": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "we": [1, 2, 3, 4, 5, 7, 9, 13, 15, 16, 19, 22, 27, 32, 33, 34, 36, 38, 42, 48, 49, 50, 51, 52, 53, 54, 57], "member": [1, 6, 8, 9, 12, 23, 24, 27, 34, 37, 38, 43, 48, 53], "contributor": [1, 5, 55], "leader": [1, 33], "particip": [1, 5], "harass": 1, "free": [1, 5, 57], "experi": 1, "everyon": [1, 5, 32], "regardless": [1, 6, 8, 12, 23, 24, 27, 34, 48], "bodi": 1, "visibl": 1, "invis": 1, "disabl": [1, 7, 10, 39], "ethnic": 1, "sex": 1, "characterist": 1, "gender": 1, "express": [1, 9, 24, 33, 37, 55, 57], "level": [1, 6, 8, 9, 12, 23, 24, 27, 48, 51, 52], "educ": 1, "socio": 1, "econom": 1, "statu": 1, "nation": [1, 5, 57], "person": 1, "appear": [1, 5], "race": 1, "cast": [1, 51], "color": [1, 6, 51, 52, 55], "religion": 1, "sexual": 1, "orient": [1, 27], "act": [1, 13], "interact": [1, 48], "wai": [1, 2, 5, 22, 24, 27, 34, 35, 38, 39, 42, 43, 45, 49, 51, 53, 54, 55, 57, 59], "contribut": [1, 2, 8, 19, 33, 43, 48, 50, 52, 53, 55], "open": [1, 2, 8, 12, 16, 24, 27, 33, 35, 36, 38, 43, 46, 50, 53, 54], "welcom": [1, 2, 43, 48, 50, 52, 53, 55], "divers": [1, 4, 33, 44, 57], "inclus": [1, 4, 5, 27, 39, 57], "healthi": [1, 32], "exampl": [1, 4, 5, 7, 8, 9, 12, 15, 16, 19, 21, 23, 24, 25, 27, 30, 31, 32, 34, 35, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "behavior": [1, 4, 11, 27, 38, 42, 46, 48, 51, 55, 57], "posit": [1, 5, 8, 9, 12, 23, 24, 25, 27, 31, 34, 39, 43, 51, 57], "includ": [1, 5, 6, 7, 8, 9, 12, 13, 16, 23, 24, 27, 31, 32, 33, 34, 38, 39, 43, 45, 47, 50, 51, 52, 54, 55, 57], "demonstr": 1, "empathi": 1, "kind": [1, 4, 12, 28, 32, 37, 55], "toward": [1, 27], "other": [1, 2, 4, 6, 7, 8, 9, 12, 13, 16, 20, 21, 22, 23, 24, 27, 33, 34, 35, 38, 39, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59], "peopl": 1, "Being": [1, 47], "opinion": 1, "viewpoint": 1, "give": [1, 6, 8, 11, 12, 24, 27, 46, 50, 51, 57], "gracefulli": 1, "accept": [1, 5, 7, 23, 30, 31, 39, 53], "construct": [1, 8, 12, 21, 23, 24, 26, 27, 31, 32, 49, 50, 52, 53, 54, 57], "feedback": 1, "apolog": 1, "those": [1, 6, 8, 12, 24, 27, 37, 44, 55, 57], "affect": [1, 27, 51], "mistak": 1, "learn": [1, 33], "focus": [1, 33], "what": [1, 5, 23, 34, 52, 53, 56], "best": [1, 19, 42, 50, 57], "u": [1, 3, 5, 7, 27, 31, 32, 34, 39, 48, 51], "individu": [1, 2, 8, 10, 17, 27, 30, 44, 48, 50, 53, 55], "overal": 1, "unaccept": 1, "languag": [1, 6], "imageri": 1, "attent": [1, 57], "advanc": [1, 37], "ani": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 16, 20, 23, 24, 27, 30, 31, 34, 36, 38, 39, 43, 48, 50, 51, 52, 53, 54, 55, 57], "troll": 1, "insult": 1, "derogatori": 1, "comment": [1, 27, 42, 51, 55, 56], "polit": 1, "attack": 1, "public": [1, 5, 6, 32, 57], "privat": 1, "publish": [1, 2, 5, 6, 55], "inform": [1, 2, 4, 5, 6, 8, 13, 16, 24, 27, 32, 34, 35, 37, 38, 39, 50, 52, 54, 55, 57, 59], "physic": 1, "email": 1, "address": [1, 5, 48], "without": [1, 4, 19, 27, 31, 39, 42, 54, 57], "permiss": [1, 11], "which": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 30, 31, 34, 35, 37, 38, 39, 42, 43, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 59], "could": [1, 2, 16, 27, 34, 36, 48, 49, 57], "reason": [1, 27, 34, 38], "consid": [1, 4, 5, 8, 11, 16, 23, 24, 27, 34, 38, 43, 48, 49, 57], "inappropri": 1, "profession": 1, "clarifi": [1, 32], "appropri": [1, 12, 27, 30, 36, 39, 42, 43, 53, 57], "fair": 1, "action": [1, 2, 27], "thei": [1, 3, 4, 5, 8, 9, 10, 16, 21, 24, 25, 27, 30, 31, 32, 34, 38, 46, 48, 52, 53, 57], "deem": 1, "threaten": 1, "offens": 1, "harm": 1, "have": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 23, 24, 25, 27, 30, 31, 32, 34, 36, 38, 39, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 57], "remov": [1, 5, 6, 7, 8, 9, 10, 16, 23, 24, 27, 30, 33, 34, 35, 38, 43, 48, 50, 51, 52, 53, 57], "edit": 1, "reject": [1, 11], "commit": [1, 2, 33], "wiki": [1, 22, 55, 58, 60], "align": [1, 8, 12, 13, 23, 35, 47], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59], "moder": [1, 19], "decis": [1, 33], "space": [1, 23, 27, 39, 43, 48, 50, 57], "also": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 19, 23, 24, 27, 30, 32, 34, 35, 36, 37, 38, 39, 46, 48, 49, 50, 51, 52, 53, 55, 57], "offici": [1, 33], "repres": [1, 4, 8, 9, 10, 12, 13, 22, 23, 24, 27, 30, 31, 34, 35, 37, 38, 39, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55, 57], "mail": [1, 33], "post": [1, 5, 15, 27, 38, 46, 54, 57], "via": [1, 5, 6, 7, 8, 12, 13, 24, 27, 30, 33, 38, 55], "social": 1, "media": 1, "account": [1, 43, 54, 55, 57], "appoint": 1, "onlin": 1, "offlin": 1, "instanc": [1, 6, 7, 8, 9, 10, 12, 15, 16, 20, 23, 24, 27, 30, 31, 34, 35, 36, 38, 39, 40, 43, 46, 48, 51, 54, 55], "abus": 1, "otherwis": [1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 16, 17, 21, 23, 24, 27, 30, 31, 53, 54, 57], "mai": [1, 2, 4, 6, 7, 8, 9, 10, 12, 16, 19, 23, 24, 27, 39, 46, 48, 54, 55, 57], "report": [1, 2, 10, 44, 54, 57], "through": [1, 2, 5, 8, 17, 23, 24, 27, 33, 34, 35, 38, 39, 45, 48, 50, 51, 52, 55, 57, 59], "contact": [1, 57], "avail": [1, 5, 8, 35, 37, 38, 39, 43, 44, 50, 52, 54, 55, 57], "sukumaranlab": 1, "complaint": [1, 42], "review": 1, "investig": 1, "promptli": 1, "fairli": [1, 5], "oblig": 1, "privaci": 1, "secur": 1, "incid": [1, 4, 52], "follow": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 26, 27, 30, 31, 34, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59], "impact": 1, "determin": [1, 4, 9, 10, 11, 23, 24, 30, 31, 51], "consequ": 1, "violat": 1, "unprofession": 1, "unwelcom": 1, "written": [1, 5, 27, 31, 36, 37, 38, 42, 48, 50, 52, 55, 59], "provid": [1, 2, 4, 5, 8, 9, 10, 12, 13, 16, 19, 23, 24, 27, 30, 31, 33, 35, 37, 38, 39, 41, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57], "clariti": 1, "around": [1, 5, 27, 51, 54], "natur": 1, "explan": 1, "why": [1, 34], "apologi": 1, "request": [1, 2, 39, 42, 57], "singl": [1, 4, 6, 8, 9, 12, 20, 23, 24, 26, 27, 31, 36, 39, 42, 43, 46, 53, 54, 57], "seri": [1, 26, 32, 38, 55], "continu": [1, 7, 10, 14, 30, 31, 33, 35, 38, 42, 48, 50, 52, 53, 54], "No": [1, 6, 11, 23, 32, 51], "involv": [1, 2, 5, 23, 24, 27, 33, 43, 49, 57], "unsolicit": 1, "period": [1, 10, 19], "time": [1, 4, 7, 10, 11, 13, 15, 16, 17, 19, 20, 24, 27, 30, 34, 35, 38, 48, 49, 50, 51, 52, 53, 57], "avoid": [1, 7, 11, 16, 27, 31, 34, 48, 50, 53], "extern": [1, 2, 4, 8, 12, 16, 24, 27, 28, 31, 40, 48, 50, 52], "channel": 1, "like": [1, 2, 5, 6, 8, 9, 10, 12, 15, 16, 21, 23, 24, 27, 34, 35, 37, 38, 46, 48, 50, 52, 54, 55, 57], "term": [1, 4, 9, 11, 17, 24, 27, 31, 32, 34, 39, 48, 52, 53, 54, 57], "lead": [1, 27, 32, 57], "seriou": [1, 27], "sustain": 1, "sort": [1, 5, 7, 19, 23, 24, 27, 31, 34, 43, 44, 50, 51, 54], "pattern": [1, 15, 52], "aggress": 1, "disparag": 1, "adapt": [1, 7, 19, 22, 27], "coven": [1, 5], "version": [1, 5, 7, 10, 16, 27, 32, 34, 39, 55, 57], "www": [1, 6, 22, 39, 55, 57, 61], "code_of_conduct": 1, "were": [1, 5, 6, 7, 27, 31, 34, 38, 43, 48, 53, 54, 55, 57], "inspir": 1, "mozilla": 1, "ladder": [1, 27, 51], "For": [1, 5, 8, 9, 19, 21, 23, 24, 27, 31, 32, 34, 35, 37, 38, 39, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57], "answer": [1, 55], "question": [1, 57], "about": [1, 5, 9, 27, 54], "see": [1, 5, 7, 8, 12, 24, 27, 30, 31, 32, 34, 37, 39, 43, 48, 50, 52, 53, 54, 55, 57], "faq": [1, 57], "translat": [1, 43], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "3": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "4": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "onboard": 2, "serv": [2, 10, 30, 43, 49, 52, 55], "refer": [2, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 20, 21, 24, 25, 27, 30, 31, 34, 35, 36, 37, 38, 42, 43, 46, 48, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63], "maintain": [2, 8, 16, 27, 33, 34, 37, 38, 39, 48, 50, 52, 55], "help": [2, 32, 57], "found": [2, 5, 6, 8, 9, 12, 16, 20, 23, 24, 25, 27, 34, 35, 48, 50, 52, 54, 55, 57], "here": [2, 3, 4, 5, 7, 8, 12, 15, 16, 21, 23, 24, 27, 34, 38, 39, 43, 48, 49, 51, 52, 54, 57], "file": [2, 8, 12, 15, 16, 21, 24, 27, 32, 34, 35, 36, 37, 38, 40, 42, 43, 46, 48, 49, 53, 54, 55, 57, 60, 61, 62], "bug": [2, 32, 56], "featur": [2, 32, 33, 39], "cover": [2, 37, 46], "elsewher": [2, 55], "great": [2, 5, 57], "project": [2, 5, 6, 7, 27, 33, 53, 54, 55, 57], "static": [2, 22, 27], "linter": 2, "detect": [2, 32], "qualiti": [2, 55], "syntax": [2, 4, 55, 57], "error": [2, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 23, 24, 26, 27, 31, 43, 48, 53, 54, 57], "base": [2, 6, 7, 8, 9, 10, 13, 16, 17, 20, 21, 23, 24, 25, 27, 30, 31, 32, 34, 39, 40, 42, 44, 46, 48, 49, 50, 51, 54, 57], "To": [2, 8, 27, 38, 39, 48, 49, 51, 52, 53, 54, 57], "sh": [2, 57], "ruff": 2, "instruct": [2, 5, 6, 8, 12, 24, 27, 47, 51, 57], "run": [2, 3, 5, 19, 20, 32, 41, 45, 47, 55, 56], "setup": [2, 3, 5, 32], "unittest": 2, "test_exampl": 2, "netlifi": 2, "host": [2, 14], "keep": [2, 31, 33, 39, 43, 48, 51, 54, 57], "deploi": 2, "up": [2, 5, 6, 7, 8, 9, 10, 13, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 38, 42, 44, 45, 57], "main": [2, 3, 5, 32, 57], "our": [2, 5, 33, 51, 57], "manual": [2, 3, 5, 24, 56], "build": [2, 5, 9, 29, 30, 32, 34, 40, 44, 51, 57], "aren": 2, "usual": [2, 4, 5, 8, 21, 27, 57], "necessari": [2, 23], "unless": [2, 6, 8, 9, 12, 16, 24, 27, 31, 34, 35, 38, 43, 51, 53, 55, 57], "you": [2, 3, 5, 7, 8, 10, 12, 13, 15, 16, 23, 24, 27, 31, 32, 34, 35, 37, 38, 39, 42, 43, 47, 48, 50, 51, 52, 53, 54, 55, 57], "re": [2, 4, 7, 20, 27, 32, 45, 46, 57], "encount": [2, 5, 16, 27, 48, 57], "specif": [2, 4, 5, 6, 8, 9, 12, 13, 15, 24, 27, 34, 35, 38, 39, 46, 48, 49, 50, 52, 55, 57, 59], "local": [2, 6, 32, 39, 57], "c": [2, 7, 8, 9, 13, 15, 16, 19, 22, 23, 24, 27, 34, 35, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57], "doc": [2, 57], "want": [2, 3, 5, 7, 13, 15, 24, 32, 34, 35, 38, 39, 42, 43, 51, 52, 53, 54, 55, 57], "txt": [2, 53, 54], "numpi": 2, "convent": [2, 12, 27, 34, 51], "sphinx": 2, "cross": [2, 11, 57], "referenc": [2, 6, 8, 9, 23, 24, 27, 31, 37, 38, 48, 50, 52], "depend": [2, 5, 7, 8, 12, 16, 24, 27, 31, 34, 35, 54, 57, 59], "isol": [2, 32], "your": [2, 5, 24, 32, 42, 47, 48, 51, 54, 55, 57], "system": [2, 5, 31, 32, 45, 47, 57], "global": [2, 7, 31, 34, 38], "prevent": [2, 51, 55], "conflict": [2, 25, 27, 32], "ensur": [2, 5, 8, 23, 24, 27, 31, 32, 33, 34, 36, 38, 43, 46, 48, 50, 51, 54], "smoothli": 2, "consist": [2, 4, 6, 8, 9, 10, 12, 16, 19, 20, 24, 27, 31, 34, 37, 43, 44, 52, 55, 57], "machin": [2, 33, 50, 57], "enter": [2, 57], "venv": 2, "env": [2, 24, 27, 39, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55], "bin": [2, 19, 24, 27, 39, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57], "activ": [2, 33, 38], "ci": 2, "each": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 30, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 59], "pull": [2, 32, 51], "push": 2, "note": [2, 3, 5, 6, 7, 8, 9, 10, 12, 15, 16, 19, 21, 23, 24, 27, 30, 31, 32, 34, 35, 36, 38, 39, 42, 43, 47, 48, 50, 51, 52, 54, 55, 57, 58, 63], "across": [2, 4, 8, 9, 12, 16, 27, 32, 34, 37, 38, 43, 44, 48, 54, 57], "so": [2, 4, 5, 8, 11, 12, 17, 23, 24, 27, 31, 32, 34, 35, 37, 38, 39, 42, 43, 45, 47, 48, 50, 51, 52, 53, 57], "even": [2, 5, 8, 15, 19, 22, 23, 24, 27, 31, 32, 34, 38, 42, 48, 50, 51, 52, 57], "pass": [2, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 19, 21, 22, 23, 24, 27, 30, 34, 35, 36, 38, 39, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 57], "flag": [2, 3, 5, 27, 49, 51, 57], "incompat": [2, 27], "configur": [2, 24, 31, 57], "workflow": [2, 33, 55], "bumpver": 2, "tool": [2, 37], "updat": [2, 3, 6, 8, 12, 24, 25, 27, 31, 34, 51, 52, 54, 55], "new": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 20, 23, 24, 27, 30, 31, 34, 35, 36, 39, 40, 43, 48, 50, 52, 53, 54, 55], "patch": [2, 43, 48, 50, 52, 53, 55], "minor": [2, 8, 32], "major": [2, 5, 32, 33, 56], "tag": [2, 55], "__version__": 2, "inadvert": 2, "automat": [2, 6, 8, 9, 12, 24, 27, 34, 48, 51, 52, 53, 54, 55], "after": [2, 4, 7, 9, 11, 12, 13, 21, 27, 30, 38, 50, 51, 53, 54, 55, 57], "simpli": [2, 11, 34, 36, 38, 46, 48, 51, 53, 57], "origin": [2, 4, 6, 8, 10, 12, 13, 24, 27, 30, 32, 34, 38, 39, 42, 43, 44, 50, 51, 52, 54, 55, 57], "control": [2, 3, 7, 8, 11, 12, 17, 24, 27, 30, 32, 34, 35, 37, 38, 46, 48, 51, 55, 57], "though": [2, 4, 6, 8, 12, 24, 27, 32, 34, 38, 42, 47, 48, 51, 53, 54, 55], "fail": [2, 7], "abort": 2, "directli": [3, 5, 7, 8, 12, 15, 23, 24, 27, 32, 35, 37, 46, 51, 52, 53, 54, 55, 57], "altern": [3, 5, 9, 19, 23, 24, 33, 36, 39, 42, 46, 51, 52, 55, 57], "recommend": [3, 12, 32, 38], "anaconda": [3, 5], "python3": [3, 5, 57], "If": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 38, 39, 42, 43, 47, 48, 50, 51, 52, 53, 54, 55, 57], "alreadi": [3, 5, 6, 7, 8, 9, 12, 16, 17, 23, 24, 27, 34, 39], "upgrad": [3, 32], "releas": [3, 5, 31, 32, 33, 45, 57], "do": [3, 5, 6, 7, 10, 15, 16, 20, 22, 24, 27, 30, 32, 34, 38, 39, 42, 43, 48, 51, 53, 54, 55, 57], "should": [3, 5, 6, 8, 10, 12, 13, 15, 16, 17, 21, 23, 24, 26, 27, 30, 31, 32, 34, 38, 39, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 57, 59], "easy_instal": 3, "onc": [3, 10, 12, 15, 20, 22, 27, 34, 42, 44, 49], "xvzf": 3, "cd": [3, 57], "particular": [3, 4, 5, 6, 8, 12, 19, 23, 24, 27, 31, 34, 37, 38, 43, 46, 48, 49, 51, 55, 57, 59], "Or": [3, 7, 9, 15, 27, 32, 37, 41, 48, 49, 55, 57], "And": [3, 5], "chang": [3, 4, 5, 6, 8, 9, 12, 13, 16, 21, 23, 24, 27, 34, 39, 42, 48, 51, 52, 54, 55, 57], "plan": [3, 48], "mode": [3, 12, 14, 22, 56], "cours": [3, 5, 23, 26, 48, 50, 57], "need": [3, 5, 6, 7, 8, 9, 12, 19, 20, 23, 24, 25, 27, 30, 31, 34, 37, 38, 39, 45, 48, 50, 51, 52, 53, 54, 57, 58, 63], "yourself": [3, 5, 15, 34, 51, 55, 57], "abov": [3, 5, 7, 8, 12, 15, 16, 23, 24, 26, 27, 30, 31, 32, 34, 37, 38, 42, 43, 46, 49, 50, 51, 52, 53, 55, 57], "o": [3, 7, 16, 27, 32, 34, 57], "x": [3, 5, 6, 8, 9, 10, 12, 15, 16, 19, 23, 24, 27, 31, 32, 43, 46, 49, 52, 57], "binari": [3, 22, 26, 34], "microsoft": [3, 57], "window": [3, 57], "ancestor": [4, 7, 10, 11, 26, 27, 34, 40, 53], "On": [4, 11, 16, 27, 57], "full": [4, 6, 8, 9, 12, 23, 24, 27, 31, 32, 48, 50, 51, 52, 55, 57], "given": [4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 34, 37, 39, 41, 43, 44, 46, 48, 49, 51, 52, 53, 54, 55, 57], "descend": [4, 10, 11, 13, 19, 20, 24, 27, 34, 51, 52], "parent": [4, 6, 8, 11, 12, 24, 27, 37, 52, 53, 55], "until": [4, 7, 8, 10, 20, 27, 30, 34, 51, 53], "ancestr": [4, 10, 13, 18, 27, 52], "anoth": [4, 8, 11, 12, 16, 23, 24, 27, 34, 35, 48, 50, 51, 53, 57], "leaf": [4, 10, 17, 21, 24, 27, 30, 31, 34, 48, 52, 53, 54], "never": [4, 20, 31, 34, 48], "except": [4, 5, 6, 8, 9, 12, 17, 23, 24, 26, 27, 42, 52, 53, 55, 57], "most": [4, 6, 7, 8, 10, 11, 16, 24, 27, 31, 34, 35, 40, 51, 53, 54, 55, 57], "exactli": [4, 7, 8, 9, 12, 16, 24, 27, 30, 34, 39, 43, 46, 48, 57], "two": [4, 9, 10, 16, 21, 25, 26, 27, 30, 31, 32, 34, 38, 39, 42, 43, 44, 46, 48, 51, 52, 53, 54, 55, 57], "reflect": [4, 11, 13, 16], "unroot": [4, 16, 24, 27, 31, 34, 51, 52, 54, 57, 60, 62], "artifact": [4, 27, 31, 34, 52], "doe": [4, 5, 6, 7, 8, 9, 10, 21, 23, 27, 30, 31, 35, 47, 48, 51, 52, 54, 55, 56], "algorithm": [4, 15, 16, 19, 21, 27, 52, 54], "contriv": 4, "In": [4, 6, 7, 8, 10, 12, 15, 16, 23, 24, 27, 30, 31, 33, 34, 35, 37, 38, 42, 43, 46, 48, 50, 51, 52, 53, 54, 55, 57, 59], "practic": [4, 5, 32, 49, 53], "oper": [4, 5, 8, 12, 14, 23, 24, 27, 29, 31, 32, 33, 34, 36, 37, 38, 39, 44, 48, 50, 51, 52, 53, 54, 57], "undetermin": 4, "erroren": 4, "thu": [4, 5, 8, 10, 16, 23, 24, 27, 34, 35, 38, 39, 42, 43, 44, 48, 51, 52, 55, 57], "typic": [4, 6, 7, 8, 9, 12, 15, 16, 23, 24, 27, 34, 35, 42, 43, 48, 53, 54, 55, 57], "yield": [4, 24, 27, 42], "trifurc": [4, 27, 51], "three": [4, 8, 12, 31, 38, 39, 48, 49, 57], "while": [4, 7, 8, 22, 23, 24, 32, 34, 35, 38, 39, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57], "might": [4, 5, 9, 24, 27, 31, 34, 39, 42, 43, 50, 51, 52, 53, 54, 55, 57], "occur": [4, 5, 10, 19, 27], "both": [4, 12, 16, 20, 25, 27, 34, 41, 42, 44, 48, 50, 51, 52, 53, 57], "known": [4, 9, 24, 34, 43, 48, 50, 52, 53, 55], "degre": [4, 11, 27, 57], "partit": [4, 8, 40, 54], "mutual": [4, 9, 21, 27, 34, 48, 49], "comprehens": [4, 5, 27, 32, 33, 43], "It": [4, 5, 27, 38, 39, 42, 43, 48, 50, 51, 52, 53, 54, 55, 57], "correspond": [4, 8, 9, 10, 13, 16, 17, 18, 20, 21, 23, 24, 27, 30, 31, 32, 37, 39, 43, 48, 50, 51, 52, 54, 55, 57], "imagin": [4, 53, 54], "cut": [4, 57], "form": [4, 21, 55, 57], "often": [4, 27, 37, 53, 54], "especi": [4, 57], "context": [4, 5, 6, 8, 12, 23, 24, 27, 31, 34, 38, 48, 52, 57], "detail": [4, 5, 7, 8, 12, 24, 27, 30, 37, 39, 43, 46, 48, 50, 52, 53, 54, 55, 57, 59], "zero": [4, 16, 20, 21, 23, 32, 43, 53], "children": [4, 26, 27, 34, 42, 51, 52], "connect": [4, 16, 27, 43, 52], "synonym": [4, 9, 27, 31], "tail": [4, 27], "call": [4, 6, 7, 8, 10, 11, 12, 13, 15, 19, 21, 23, 24, 25, 27, 31, 34, 36, 37, 38, 39, 45, 46, 49, 50, 51, 52, 53, 54, 55, 59], "head": [4, 27, 48, 52], "destin": [4, 8, 12, 24, 27, 46], "said": [4, 5], "subtend": [4, 23, 27, 34, 48, 51, 52], "convers": [4, 5, 8, 34, 57], "its": [4, 5, 8, 9, 15, 16, 20, 21, 23, 24, 27, 31, 33, 34, 35, 37, 38, 42, 43, 48, 50, 51, 52, 53, 54, 55, 57, 59], "outgo": [4, 27], "everi": [4, 9, 15, 23, 27, 31, 32, 34, 35, 38, 39, 44, 48, 49, 52, 55, 57], "hand": [4, 8, 9, 16, 27, 34, 50, 53], "As": [4, 10, 26, 27, 31, 34, 35, 38, 39, 43, 46, 50, 51, 55, 57], "thought": 4, "belong": [4, 6, 8, 12, 24, 27, 48, 53], "due": [4, 5, 7, 10, 16, 20, 34, 43, 48, 50, 55, 57], "relationship": [4, 27, 34, 51, 52, 54], "properti": [4, 6, 8, 9, 11, 27, 31, 34, 38, 39, 51, 55], "attribut": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 20, 21, 23, 24, 25, 26, 27, 30, 34, 37, 38, 42, 44, 48, 49, 50, 51, 52, 53, 54], "them": [4, 5, 8, 12, 19, 24, 27, 31, 34, 35, 38, 39, 43, 48, 51, 54, 55, 57], "rang": [4, 5, 8, 9, 22, 35, 39, 42, 51, 53, 54, 55, 57], "phenomena": 4, "weight": [4, 15, 16, 19, 24, 25, 27, 43, 52, 57], "quantit": 4, "thing": [4, 5, 10, 30, 39, 50, 57], "expect": [4, 5, 10, 13, 16, 30, 31, 43, 54, 57], "rate": [4, 7, 10, 11, 13, 17, 19, 20, 26, 30, 55], "substitut": [4, 9, 13, 41, 47, 48, 55], "mani": [4, 5, 27, 31, 32, 34, 37, 39, 43, 48, 51, 52, 54, 57], "special": [4, 5, 8, 13, 27, 35, 37, 38, 46, 51, 53, 54, 55, 57], "denot": 4, "relat": [4, 5, 14, 23, 32, 34, 44, 48, 51, 54], "extend": [4, 8, 10, 13, 24, 35, 50, 57], "link": [4, 27, 48, 57], "outer": 4, "fundament": [4, 8, 9, 48, 55], "element": [4, 6, 8, 9, 10, 12, 16, 19, 22, 23, 24, 27, 34, 35, 37, 43, 45, 48, 55], "relationshop": 4, "independ": [4, 6, 8, 9, 11, 12, 23, 24, 27, 31, 38, 39, 40, 45, 48, 57], "aspect": [4, 39, 50], "depth": [4, 6, 8, 10, 12, 23, 24, 27, 50, 52], "height": [4, 27, 55], "longest": [4, 8, 27], "downward": 4, "henc": [4, 34, 57], "convention": 4, "empti": [4, 6, 8, 12, 16, 23, 24, 27, 34, 40, 43, 53, 55], "1": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 30, 31, 32, 34, 39, 42, 43, 47, 48, 49, 50, 52, 53, 54, 55, 57], "immedi": [4, 27, 44, 52, 53, 55], "unweight": [4, 16, 25, 43, 52], "sum": [4, 7, 16, 19, 22, 24, 26, 27, 50, 52, 54, 57], "postord": [4, 15, 17, 24, 52], "travers": [4, 15, 27, 31, 40], "visit": [4, 17, 24, 27, 48, 52], "being": [4, 6, 7, 8, 9, 16, 23, 24, 25, 27, 31, 38, 39, 42, 43, 48, 50, 51, 53, 54, 55, 57], "preorder": [4, 24, 27, 52], "befor": [4, 6, 16, 19, 20, 24, 25, 27, 32, 38, 50, 51, 52, 53, 55, 57], "recent": [4, 7, 10, 27, 33, 34, 40, 53, 54], "distinct": [4, 8, 9, 12, 16, 23, 24, 27, 34, 37, 38, 44, 48, 50], "direction": 4, "invert": [4, 27], "serial": [4, 11, 12, 31, 39, 42, 46, 57], "speak": 4, "cannot": [4, 7, 9, 30, 53, 54], "name": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 21, 23, 24, 25, 27, 30, 31, 34, 37, 39, 40, 49, 55, 57], "becaus": [4, 5, 24, 27, 31, 32, 51, 52, 57], "built": 4, "adopt": [4, 27], "terminologi": [4, 34, 54], "typicallli": 4, "predefin": 4, "input": [4, 6, 10, 23, 30, 34, 42, 43, 47, 48, 54, 56], "output": [4, 6, 8, 23, 27, 46, 48, 52, 53, 54, 55, 57], "topmost": 4, "commonli": [4, 57], "strictest": 4, "sens": [4, 6, 7, 8, 12, 24, 27, 30, 34, 46, 51, 57], "valid": [4, 7, 8, 9, 10, 16, 27, 30, 42, 43, 53], "By": [4, 6, 7, 10, 16, 23, 27, 30, 34, 39, 42, 48, 51, 52, 53, 57], "sinc": [4, 13, 19, 27, 34, 54], "structur": [4, 6, 8, 9, 12, 16, 21, 23, 24, 25, 27, 33, 34, 37, 51, 52, 54], "sibl": 4, "sister": [4, 21], "share": [4, 8, 12, 25, 27, 35, 40, 43, 50, 52, 54], "same": [4, 8, 10, 11, 12, 13, 15, 16, 17, 21, 23, 24, 25, 27, 30, 31, 34, 35, 36, 38, 39, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57], "taxonom": [4, 8, 12, 14, 24, 27, 31, 34, 37, 38, 39, 44, 48], "unit": [4, 7, 8, 9, 10, 12, 17, 23, 24, 27, 30, 34, 37, 39, 44, 48, 53, 57], "concept": [4, 8, 12, 23, 24, 27, 34, 48], "organ": [4, 32, 39, 48, 57], "namethat": 4, "guarante": [4, 27], "uniqu": [4, 8, 9, 24, 48, 59], "namespac": [4, 6, 7, 8, 9, 12, 14, 15, 16, 24, 27, 31, 34, 37, 38, 39, 43, 50, 52, 53, 54, 55], "map": [4, 6, 8, 9, 10, 11, 12, 15, 21, 23, 24, 27, 30, 34, 35, 36, 37, 38, 40, 42, 49, 50, 53, 54, 55, 57, 59], "arboresc": [4, 27], "graph": [4, 27], "constrain": [4, 10, 22, 27, 34, 50, 53], "direct": [4, 27, 31, 39], "cycl": [4, 57], "parlanc": 4, "second": [4, 9, 10, 17, 24, 25, 27, 32, 34, 35, 38, 39, 46, 48, 50, 51, 52, 53, 54, 55, 57], "constraint": [4, 12, 21, 27, 34], "alon": [4, 5], "acyl": 4, "addit": [4, 5, 6, 7, 8, 10, 15, 23, 24, 27, 30, 33, 34, 35, 37, 38, 39, 42, 46, 50, 54, 55], "third": [4, 17, 34, 39, 49, 57], "strictli": [4, 27], "unifurc": 4, "aris": [4, 48], "side": [4, 5, 16, 26, 34], "manipul": [4, 5, 8, 27, 32, 40], "problem": [4, 5, 16, 57], "patholog": 4, "facil": [4, 35], "necessarili": [4, 48, 50], "conceptu": [4, 38, 40], "restructur": [4, 40], "represent": [4, 6, 8, 9, 12, 23, 24, 27, 34, 35, 37, 46, 51, 52], "simul": [5, 7, 10, 11, 13, 20, 21, 31, 32, 40, 47, 54], "matric": [5, 12, 14, 24, 37], "script": [5, 50, 57], "posterior": [5, 22, 24, 56], "distribut": [5, 7, 10, 11, 13, 19, 22, 24, 30, 40, 50, 52, 54, 57], "part": [5, 6, 8, 27, 35, 43, 51, 57], "libari": 5, "stand": 5, "compon": [5, 8, 23, 24, 33, 35, 37, 39], "complex": [5, 6, 8, 12, 23, 24, 27, 39, 44, 47, 53, 54], "multi": [5, 9, 49, 57], "phyloinformat": [5, 54, 57], "pipelin": [5, 57], "glue": 5, "assembl": 5, "drive": 5, "pure": [5, 7, 17, 26, 34, 40, 47], "less": [5, 7, 10, 17, 24, 26, 27, 30, 48, 52, 53, 57], "download": [5, 39, 57], "legaci": [5, 23, 27, 31], "repositori": [5, 32, 56], "latest": [5, 31], "develop": [5, 32, 57], "fulli": [5, 27, 31, 32, 42, 55, 57], "easi": [5, 27, 33, 57], "obtain": [5, 7, 27, 37, 43, 48, 57], "section": [5, 12, 16, 35, 38, 43, 46, 50, 52, 55, 57, 59], "conda": 5, "jupyt": 5, "notebook": 5, "how": [5, 6, 7, 8, 10, 12, 24, 27, 30, 31, 34, 35, 36, 37, 38, 39, 46, 48, 50, 51, 52, 53, 54, 55, 56], "lot": [5, 32], "walk": 5, "api": [5, 10, 24, 27, 30, 31, 32, 33, 46, 53, 54], "technic": 5, "modul": [5, 27, 30, 39, 41, 44, 45, 53, 54], "method": [5, 8, 10, 11, 12, 13, 16, 21, 23, 24, 25, 27, 31, 32, 34, 35, 36, 38, 39, 40, 42, 43, 46, 48, 49, 50, 51, 52, 55, 59], "almost": [5, 8, 48, 50, 57], "readili": 5, "interpret": [5, 6, 8, 10, 12, 24, 27, 30, 31, 34, 46, 48, 51, 55, 57], "invok": [5, 38, 57], "bundl": 5, "facili": 5, "parameter": [5, 57], "bootstrap": [5, 27, 34, 56], "bayesian": [5, 57], "migrat": [5, 8, 23, 24, 27, 32, 50], "guid": [5, 46], "howev": [5, 6, 8, 9, 12, 24, 27, 34, 38, 42, 43, 47, 48, 51, 52, 54, 55, 57], "signific": [5, 24, 27, 34, 52], "enough": [5, 47, 57], "break": [5, 50], "overview": [5, 40], "fix": [5, 8, 10, 27, 32, 43, 48, 50, 52, 53, 54, 55], "try": [5, 20, 23, 24, 27, 34, 46], "task": [5, 55, 57], "lint": 5, "place": [5, 7, 10, 24, 27, 31, 34, 42, 43, 48, 53, 57], "start": [5, 7, 23, 27, 31, 32, 40, 47, 52, 53, 54, 55], "histori": [5, 40, 54], "creation": [5, 9, 12, 16, 35, 40], "constantli": 5, "expand": [5, 9], "look": [5, 9, 27, 31, 34, 48, 52, 57], "idea": [5, 57], "would": [5, 8, 9, 12, 21, 22, 23, 24, 27, 31, 34, 37, 38, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 57], "easili": [5, 51, 57], "matter": [5, 27, 36, 57], "suggest": [5, 33, 56], "someth": [5, 9, 15, 27, 34, 57], "done": [5, 8, 15, 24, 27, 34, 49, 50, 51, 54, 57], "better": [5, 12, 15, 31, 32, 52], "pleas": [5, 33, 57], "let": [5, 34, 57], "know": [5, 56], "page": [5, 27, 33, 55, 57], "veri": [5, 10, 27, 30, 32, 35, 37, 38, 45, 50, 53, 54, 55, 57], "serious": 5, "forward": 5, "critiqu": 5, "entir": [5, 12, 19, 23, 24, 27, 31, 34, 39, 43, 50, 52], "sometim": [5, 24, 34, 39, 50, 52, 54, 55], "point": [5, 6, 7, 10, 11, 16, 19, 27, 37, 39, 42, 43, 51, 52, 53, 54], "think": 5, "realli": [5, 6, 8, 12, 24, 27, 39, 57], "larg": [5, 19, 31, 34, 37, 50, 55, 57], "suit": [5, 33, 44], "nook": 5, "cranni": 5, "scurri": 5, "crook": 5, "nanni": 5, "favor": 5, "sure": [5, 7, 34, 35, 39, 43, 57], "deal": [5, 13, 24, 32, 35, 54], "hesit": 5, "neg": [5, 25, 27, 57], "troubl": 5, "decent": 5, "quit": [5, 20, 57], "frustrat": 5, "receiv": 5, "vagu": 5, "lackadais": 5, "littl": [5, 47], "stream": [5, 8, 24, 27, 31, 52], "conscious": 5, "respons": [5, 7], "stimuli": 5, "monitor": 5, "accident": 5, "blurt": 5, "keyboard": 5, "doesn": 5, "At": [5, 6, 42, 53, 57], "least": [5, 7, 16, 17, 19, 20, 23, 24, 27, 30, 34, 38, 43, 46, 51, 55, 57], "brief": [5, 39], "explic": 5, "observ": [5, 16, 19, 27, 43], "led": 5, "locat": [5, 8, 12, 24, 27, 39, 57], "apart": [5, 19, 32, 57], "retriev": [5, 8, 23, 31, 39, 42, 52], "command": [5, 45, 57], "ship": 5, "onward": 5, "entireti": 5, "along": [5, 11, 13, 16, 43, 51, 54, 59], "essenti": [5, 6, 12, 48, 52, 54], "gone": 5, "sensibl": 5, "meaning": [5, 10, 30, 53], "messag": [5, 57], "chunk": [5, 19], "text": [5, 6, 9, 27, 52, 57], "screen": [5, 57], "stack": 5, "trace": 5, "pack": [5, 8, 35], "abl": [5, 43, 57], "reproduc": [5, 57], "self": [5, 6, 8, 9, 12, 21, 23, 24, 27, 47, 48], "contain": [5, 6, 8, 9, 10, 21, 23, 24, 27, 30, 34, 37, 38, 39, 40, 43, 46, 48, 49, 50, 51, 54, 55, 57], "minimum": [5, 11, 22, 24, 27, 53, 55, 56], "crucial": [5, 27, 48], "bit": [5, 24, 27, 34], "step": [5, 16, 53, 54], "anyon": 5, "who": [5, 19], "good": [5, 20, 57], "perfectli": 5, "justifi": 5, "strawberri": 5, "cheesecak": 5, "orang": 5, "mocha": 5, "frappuccino": 5, "deliv": 5, "doorstep": 5, "moment": 5, "group": [5, 16, 21, 27, 33, 34, 48, 49, 54], "usag": [5, 12, 23, 24, 27, 31, 34, 39, 50, 54, 57], "carri": [5, 31, 42, 51], "respond": 5, "regularli": 5, "24": [5, 43, 51], "hour": 5, "Of": 5, "bad": 5, "guess": 5, "prefer": [5, 16, 23, 27, 52], "seem": [5, 9, 48, 57], "hassl": 5, "discourag": 5, "feel": [5, 57], "go": [5, 7, 10, 13, 15, 20, 30, 32, 50, 51, 53, 57], "ahead": 5, "fit": [5, 7, 14, 15, 20, 54], "dedic": [5, 57], "foster": 5, "atmospher": 5, "overse": 5, "accord": [5, 7, 12, 19, 24, 30, 34, 48], "mechan": [5, 9], "misconduct": 5, "familiar": [5, 57], "whole": [5, 27, 35], "research": [5, 57], "cite": [5, 56], "bibtex": [5, 6, 55], "misc": 5, "dendropy5": 5, "titl": [5, 39, 48, 55], "matthew": 5, "andr": 5, "year": [5, 55], "keyword": [5, 6, 7, 8, 9, 12, 16, 21, 23, 24, 27, 30, 31, 32, 35, 38, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59], "evolut": [5, 7, 14, 16, 20, 39, 55, 60], "q": [5, 57], "bio": 5, "pe": [5, 57], "fo": [5, 6, 8, 12, 24, 27], "biolog": [5, 10, 26, 30, 48], "scienc": [5, 26, 58], "url": [5, 8, 12, 24, 27, 35, 39, 46, 55], "ab": 5, "perpetu": 5, "scientif": [5, 57], "primari": [5, 8, 9, 34, 38, 40], "materi": 5, "revis": 5, "78e6a63": 5, "earlier": [5, 10], "2010": [5, 7, 19, 30, 57], "bioinformat": [5, 7, 48, 57], "26": [5, 57], "1569": [5, 57], "1571": [5, 57], "1093": [5, 55], "btq228": 5, "aug": [5, 39], "18": [5, 11, 39, 43], "io": [5, 27, 43], "star": [5, 29, 30, 40], "bsd": [5, 57], "claus": [5, 57], "notic": [5, 57], "portion": [5, 57], "cipr": [5, 55, 57], "collabor": [5, 57], "fund": [5, 57], "nsf": [5, 57], "technologi": [5, 57], "itr": [5, 57], "grant": [5, 57], "entitl": [5, 57], "THE": [5, 57], "OF": [5, 57], "life": [5, 27, 57], "resourc": [5, 39, 50, 52, 57], "atol": [5, 57], "0732920": [5, 57], "gmail": [5, 57], "mtholder": 5, "ku": 5, "edu": [5, 60], "morenoma": 5, "umich": 5, "find": [5, 6, 27, 34, 39, 40, 55, 56], "copi": [6, 8, 9, 10, 12, 13, 17, 23, 24, 27, 30, 37, 40, 51, 53, 57], "paramet": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 27, 30, 41, 53, 54, 57], "integ": [6, 7, 8, 9, 10, 12, 17, 23, 24, 25, 27, 30, 31, 34, 39, 49, 55, 57], "shallow": [6, 8, 12, 23, 24, 27, 50, 52], "attr": [6, 8, 12, 24, 27], "annotation_set": [6, 8, 12, 24, 27], "top": [6, 8, 12, 24, 27, 55], "field": [6, 8, 11, 12, 13, 24, 27, 34, 43, 55], "scope": [6, 8, 9, 12, 23, 24, 27, 33, 50, 52], "exhaust": [6, 8, 10, 12, 24, 27, 34, 49], "deep": [6, 8, 12, 21, 23, 24, 27, 40, 49, 50, 52, 55], "taxon_namespace_scoped_copi": [6, 8, 9, 12, 23, 24, 27], "memo": [6, 8, 9, 12, 23, 24, 27], "mixin": 6, "persist": [6, 17, 39, 42], "subclass": 6, "__copy__": 6, "dynam": [6, 8, 12, 24, 27, 31], "bound": [6, 8, 12, 24, 27, 31, 55], "copy_annotations_from": [6, 8, 12, 24, 27], "attribute_object_mapp": [6, 8, 12, 24, 27], "must": [6, 7, 8, 9, 10, 12, 13, 15, 17, 19, 21, 23, 24, 25, 27, 30, 31, 34, 35, 46, 53, 54, 55, 57], "annotate_set": [6, 8, 12, 24, 27], "retain": [6, 7, 8, 12, 13, 24, 27, 30, 51, 52, 57], "desir": [6, 8, 12, 24, 27], "_valu": [6, 8, 12, 24, 27], "tupl": [6, 8, 9, 10, 12, 16, 20, 22, 24, 25, 27, 39, 54], "obj": [6, 8, 12, 24, 27], "attr_nam": [6, 8, 9, 12, 24, 27], "getattr": [6, 8, 12, 24, 27], "unchang": [6, 8, 12, 24, 27, 31, 55], "id": [6, 8, 12, 24, 27, 31, 39, 50, 55], "dict": [6, 8, 10, 12, 15, 24, 27, 37], "purpos": [6, 8, 12, 13, 21, 24, 27], "owner": [6, 8, 12, 24, 27], "insert": [6, 8, 9, 12, 24, 27, 31, 50], "That": [6, 8, 9, 10, 12, 24, 27, 31, 48], "remap": [6, 8, 12, 24, 27, 50], "reattribut": [6, 8, 12, 24, 27], "dictionari": [6, 7, 8, 9, 10, 11, 12, 15, 21, 23, 24, 27, 30, 34, 40, 49, 53, 54, 57], "deep_copy_annotations_from": [6, 8, 12, 24, 27], "sub": [6, 8, 12, 24, 27, 30, 48, 49], "replac": [6, 8, 12, 19, 23, 24, 27, 31, 42, 43, 55], "alwai": [6, 8, 12, 24, 27, 31, 34, 38, 48, 50, 51], "entiti": [6, 8, 9, 12, 24, 27, 48], "absolut": [6, 8, 12, 24, 27, 54], "datatype_hint": [6, 55], "name_prefix": [6, 55], "name_is_prefix": [6, 55], "is_attribut": 6, "annotate_as_refer": [6, 55], "is_hidden": [6, 55], "real_value_format_specifi": [6, 60, 62], "composit": [6, 16], "print": [6, 7, 15, 16, 23, 25, 27, 34, 35, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "render": [6, 24, 55], "mini": 6, "8f": [6, 42, 54], "4e": 6, "04d": 6, "arg": [6, 8, 12, 13, 16, 23, 24, 27, 51], "__add__": [6, 24], "orderedset": [6, 55], "union": 6, "__contains__": [6, 23], "__delitem__": [6, 8, 31], "delet": [6, 23, 27, 52, 57], "kei": [6, 7, 8, 9, 10, 11, 15, 21, 23, 24, 27, 30, 34, 35, 37, 39, 49, 50, 53, 54, 55, 57], "__getitem__": [6, 8, 9, 23, 24, 31], "experiment": [6, 11], "ineffici": [6, 26, 34, 52], "volatil": 6, "subject": [6, 55, 57], "__iter__": [6, 8, 9, 24, 27], "__reversed__": 6, "revers": [6, 7, 23, 27, 50], "order": [6, 7, 8, 15, 19, 22, 23, 24, 27, 31, 34, 38, 39, 50, 51, 52, 53, 54, 57], "__setitem__": [6, 8], "add": [6, 7, 8, 9, 12, 23, 24, 27, 30, 34, 38, 39, 46, 49, 50, 52, 55, 57], "add_bibtex": 6, "citat": [6, 57], "store_a": [6, 55], "bibtexentri": 6, "entri": [6, 8, 55], "content": [6, 39, 55, 57], "record": [6, 8, 15, 35, 40, 55], "becom": [6, 16, 19, 27, 53], "separ": [6, 8, 10, 12, 24, 35, 39, 43, 45, 55, 57], "prism": [6, 55], "industri": [6, 55], "dublin": [6, 55], "dublic": 6, "mainli": 6, "dc": [6, 39, 55], "w3": [6, 39, 55], "xml": [6, 39, 46, 55, 61], "1998": [6, 39, 55], "boolean": [6, 7, 8, 23, 24, 27, 30, 31, 51], "add_bound_attribut": [6, 55], "annotation_nam": [6, 55], "owner_inst": 6, "xsd": [6, 39, 55], "namespace_prefix": 6, "prefix": [6, 39, 55, 57], "bool": [6, 7, 8, 10, 12, 13, 15, 16, 20, 23, 24, 25, 27, 30], "uri": 6, "whose": [6, 48, 55], "add_cit": [6, 55], "read_a": 6, "current": [6, 8, 10, 11, 15, 16, 23, 24, 25, 27, 33, 34, 35, 43, 45, 48, 51, 54, 55, 57], "add_new": [6, 55], "attribute_nam": 6, "str": [6, 7, 8, 12, 15, 24, 27, 30, 35], "discard": [6, 8, 24, 57], "kwarg": [6, 7, 8, 9, 11, 12, 15, 16, 20, 21, 23, 24, 27, 29, 30, 46, 51], "criteria": [6, 16, 27, 28, 31, 51, 54], "prefixed_nam": [6, 55], "typeerror": [6, 8, 23, 55], "findal": [6, 23, 31, 55], "get_valu": [6, 55], "next": [6, 27, 34, 37, 52, 54], "last": [6, 10, 19, 24, 27, 39, 49, 53, 54], "keyerrorif": 6, "require_valu": 6, "values_as_dict": [6, 55], "key_attr": [6, 55], "key_fn": 6, "value_attr": [6, 55], "value_fn": 6, "neither": [6, 45], "collis": [6, 23, 55], "overwritten": [6, 8, 35, 55], "util": [6, 31, 43, 48, 54, 55], "__delattr__": 6, "ones": [6, 27, 52], "treat": [6, 8, 15, 27, 35, 37, 51, 54, 56], "__getattr__": 6, "__repr__": 6, "__setattr__": 6, "__str__": [6, 23, 27], "as_bibtex": 6, "wrap_width": 6, "78": [6, 43], "compos": [6, 8, 12, 24, 27, 31, 39], "as_compact_bibtex": 6, "bibtyp": [6, 55], "citekei": [6, 55], "fields_as_dict": 6, "parse_text": 6, "nee": 7, "2001": [7, 11, 39, 55], "infer": [7, 24, 27, 54], "phylogeni": [7, 11, 20, 26, 34, 55, 57], "55": [7, 51], "661": 7, "668": 7, "yule": [7, 17, 26], "1924": 7, "mathemat": [7, 54], "theori": [7, 34], "conclus": 7, "dr": 7, "willi": 7, "phil": 7, "tran": 7, "r": [7, 16, 20, 22, 27, 31, 34, 36, 39, 42, 43, 46, 50, 51, 53, 54, 57], "soc": 7, "lond": 7, "b": [7, 8, 15, 19, 20, 22, 23, 24, 26, 27, 34, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57], "213": 7, "21": [7, 42, 43], "87": 7, "hoehna": 7, "2015": [7, 57], "reconstruct": [7, 16, 24, 27, 34, 42], "role": 7, "mass": 7, "journal": [7, 11, 39, 55], "theoret": [7, 53], "380": [7, 19], "321": 7, "331": 7, "birth_death_likelihood": [7, 14], "log": [7, 11, 24, 54, 57], "inter": [7, 8, 10, 23, 24, 27, 55], "internal_node_ag": [7, 27], "former": [7, 12, 20, 27, 43, 51], "conveni": [7, 13, 16, 24, 27, 30, 34, 38, 43, 51, 52, 53, 55, 57], "off": [7, 11, 16, 57], "latter": [7, 12, 20, 21, 24, 27], "effici": [7, 12, 23, 24, 27, 31, 37, 40, 47, 52, 54], "mandatori": [7, 8, 9, 12, 21, 24, 27, 39, 42, 46, 50, 55], "ultrametricity_precis": [7, 10, 21, 24, 27], "vice": [7, 31, 51], "versa": [7, 31, 51], "birth_rat": [7, 30, 53], "float": [7, 8, 10, 13, 16, 19, 20, 24, 25, 30, 35, 50, 52, 54, 60, 62], "death_rat": [7, 30, 53], "sampling_prob": 7, "sampl": [7, 8, 10, 13, 16, 17, 19, 20, 21, 22, 24, 27, 30, 38, 43, 44, 49, 53, 54, 57], "sampling_strategi": 7, "strategi": [7, 10, 21, 30, 54, 56], "uniform": [7, 10, 17, 19, 30], "diversifi": 7, "is_mrca_includ": 7, "condition_on": 7, "condit": [7, 20, 21, 30, 34, 54], "surviv": 7, "imprecis": [7, 10], "down": [7, 8, 10, 31, 32, 42, 50], "decim": [7, 10, 24, 34, 57], "ignore_likelihood_calculation_failur": 7, "abnorm": 7, "estim": [7, 11, 20, 41, 45, 55, 57], "valueerror": [7, 8, 23, 24, 26, 27], "still": [7, 8, 19, 27, 31, 42, 50, 52, 55, 57], "succe": 7, "inf": 7, "is_node_ages_presort": 7, "vector": [7, 8, 13, 17, 34, 39], "skip": [7, 12, 19, 24, 27, 30, 39, 50], "client": [7, 27, 31, 39, 48], "oldest": [7, 27], "closer": 7, "lift": 7, "fantast": 7, "tess": 7, "h": [7, 20, 23, 24, 27, 34, 43, 51, 53, 55, 57], "hna": 7, "2013": 7, "29": [7, 55], "11": [7, 43, 49, 55], "1367": 7, "1374": 7, "lnl": 7, "likehood": [7, 57], "birth_rate_sd": [7, 30, 53], "death_rate_sd": [7, 30, 53], "real": [7, 8, 16, 24, 30, 34, 43, 48], "growth": [7, 30, 53], "num_extant_tip": [7, 30], "grown": [7, 30], "extant": [7, 30], "equal": [7, 8, 10, 13, 17, 20, 21, 24, 27, 30, 53, 54, 55, 57], "num_extinct_tip": [7, 30], "num_total_tip": [7, 30], "plu": [7, 30, 32], "max_tim": [7, 20, 30, 53], "maximum": [7, 8, 11, 20, 22, 24, 26, 27, 30, 34, 45, 53, 56], "gsa_ntax": [7, 30], "select": [7, 10, 19, 27, 30, 35, 42, 51, 57], "interv": [7, 10, 22, 27, 30, 54, 57], "corresond": [7, 30], "had": [7, 15, 27, 30, 34, 39], "hartmann": [7, 30], "et": [7, 13, 20, 30, 42, 54], "al": [7, 13, 20, 30, 42, 54], "met": [7, 20, 30, 53], "deviat": [7, 11, 16, 22, 26, 27, 30, 43, 52, 53, 57], "normal": [7, 11, 16, 24, 26, 27, 30, 31, 34, 52, 53], "mutat": [7, 8, 13, 30], "daughter": [7, 30], "evolv": [7, 10, 11, 13, 30, 52], "int": [7, 8, 10, 13, 15, 16, 20, 24, 25, 27, 30, 43, 54], "reach": [7, 30, 53], "exce": [7, 10, 20, 30, 57], "threshold": [7, 21, 27, 30, 54, 56], "taxon_namespac": [7, 8, 10, 12, 13, 15, 16, 17, 23, 24, 25, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 62, 63], "is_assign_extant_taxa": [7, 30], "is_assign_extinct_taxa": [7, 30], "is_retain_extinct_tip": [7, 30], "is_add_extinct_attr": [7, 30], "indic": [7, 8, 12, 13, 16, 18, 24, 26, 27, 30, 31, 34, 43, 49, 51, 55, 57], "whether": [7, 16, 23, 24, 27, 30, 31, 34, 48, 51, 57], "extinct_attr_nam": [7, 30], "is_extinct": [7, 30], "lineag": [7, 10, 17, 20, 21, 27, 30, 53, 55, 57], "repeat_until_success": [7, 30, 53], "treesimtotalextinctionexcept": [7, 20, 30, 53], "rng": [7, 10, 11, 13, 16, 17, 19, 20, 21, 27, 30], "global_rng": [7, 13, 27, 30], "wong": [7, 30], "stadler": [7, 30], "systemat": [7, 25, 30, 55], "59": [7, 30], "465": [7, 30], "476": [7, 30], "discrete_birth_death_tre": [7, 14, 30, 53], "discret": [7, 8, 10, 14, 30, 35, 53], "ntax": [7, 30, 39, 42, 48, 49, 53, 55], "len": [7, 21, 30, 35, 39, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55], "assign_taxa": [7, 30, 53], "final": [7, 15, 30, 33, 38, 48, 49, 50, 52, 54, 57], "create_required_taxa": [7, 27, 30, 53], "fit_pure_birth_model": [7, 14], "log_likelihood": 7, "idx": [7, 8, 15, 44, 51, 52, 54], "enumer": [7, 15, 27, 39, 43, 44, 50, 51, 52, 53, 54], "logl": 7, "pre": [7, 10, 16, 27, 30, 35, 39, 52, 53, 57], "laser": 7, "dan": 7, "raboski": 7, "klau": 7, "schliep": 7, "analysi": [7, 15, 45, 57], "cran": 7, "fit_pure_birth_model_to_tre": [7, 14], "1e": [7, 10, 24, 26, 27], "05": [7, 10, 22, 24, 26, 27, 43, 55], "get_from_path": [7, 8, 12, 15, 16, 24, 25, 27, 34, 42, 46, 53, 55], "pythonida": [7, 8, 12, 15, 35, 36, 37, 38, 41, 43, 45, 46, 47, 50, 51, 52, 54, 55], "nex": [7, 8, 12, 15, 16, 24, 25, 27, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 62], "uniform_pure_birth_tre": [7, 14], "character_valu": 8, "character_typ": 8, "character_annot": 8, "simpl": [8, 11, 19, 24, 27, 31, 39, 47, 49, 53, 62], "parallel": [8, 32, 34, 46, 56], "access": [8, 12, 15, 23, 24, 27, 31, 34, 37, 40, 48, 52, 53, 56], "annotations_at": 8, "character_type_at": 8, "set_character_type_at": 8, "append": [8, 13, 23, 24, 27, 42, 43, 44, 49, 50, 54], "simultan": [8, 9, 32, 38, 50, 52, 53, 54, 55, 57], "interfac": [8, 30, 39, 45, 50, 53], "cell_it": 8, "triplet": 8, "store": [8, 15, 24, 27, 34, 37, 38, 39, 50, 52, 54], "descript": [8, 23, 27, 48, 49, 52, 53, 54, 55, 59], "has_annotations_at": 8, "set_annotations_at": 8, "set_at": 8, "symbols_as_list": [8, 35], "symbols_as_str": [8, 35, 39], "sep": 8, "value_at": 8, "state_alphabet": [8, 13], "charactersubset": [8, 35], "character_indic": 8, "constitut": [8, 16, 34], "assoc": 8, "taxononom": [8, 12], "behav": [8, 27, 35, 50], "instanti": [8, 9, 12, 16, 24, 27, 31, 34, 35, 37, 38, 39, 43, 44, 46, 50, 52, 53, 54], "get_from_stream": [8, 12, 24, 27, 31, 46], "get_from_str": [8, 12, 15, 24, 27, 39, 46, 49, 51, 52], "multipl": [8, 9, 10, 12, 13, 15, 16, 23, 24, 31, 32, 34, 36, 37, 40, 43, 48, 52, 54, 55, 57], "concaten": [8, 13, 32, 39, 40], "concatenate_from_path": [8, 35], "These": [8, 9, 12, 24, 27, 32, 35, 37, 39, 44, 46, 48, 51, 55, 57, 59], "vari": [8, 34, 35, 39, 53, 57, 59], "defin": [8, 9, 12, 13, 16, 25, 27, 30, 35, 38, 48, 49, 50, 51, 52, 53, 54], "NO": [8, 35], "op": [8, 35], "add_sequ": [8, 35], "replace_sequ": [8, 35], "update_sequ": [8, 35], "extend_sequ": [8, 35], "extend_matrix": [8, 35], "been": [8, 9, 10, 15, 16, 21, 23, 24, 25, 27, 30, 31, 32, 48, 50, 51, 57], "assum": [8, 11, 15, 16, 17, 19, 20, 22, 24, 27, 31, 34, 45, 50, 51, 57], "curent": 8, "__len__": [8, 9, 23, 27], "n": [8, 9, 10, 12, 16, 17, 19, 23, 24, 26, 27, 30, 32, 34, 35, 43, 45, 46, 53, 54, 55], "add_character_subset": 8, "char_subset": 8, "other_matrix": 8, "as_str": [8, 12, 16, 24, 27, 35, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55], "identifi": [8, 12, 24, 27, 32, 39, 44, 46, 48, 49, 54, 55], "character_sequence_typ": 8, "alia": [8, 24, 25], "clear": [8, 13, 21, 23, 24, 27, 50, 52, 57], "coerce_valu": 8, "convert": [8, 20, 21, 27, 35, 40, 53, 54], "from_dict": [8, 35], "overridden": [8, 57], "compat": [8, 27, 33, 57], "derefer": 8, "positionali": 8, "classmethod": [8, 12, 16, 24, 27, 51], "char_matric": [8, 12, 15, 37, 38, 42, 47], "present": [8, 17, 19, 27, 31, 33, 35, 55], "reader": [8, 12, 16, 24, 27, 36, 43, 55], "merg": 8, "combin": [8, 27, 37, 42, 53, 57], "concatenate_from_stream": 8, "indent": [8, 23, 27], "item": [8, 19, 23, 24, 27, 35, 39, 41, 55], "discard_sequ": [8, 35], "export_character_indic": 8, "export_character_subset": 8, "character_subset": [8, 35], "is_add_new_sequ": 8, "fill": [8, 11, 35], "pad": [8, 18], "long": [8, 17, 19, 31, 34, 57], "end": [8, 10, 27, 39, 42, 48, 49, 51, 57], "front": 8, "fill_taxa": [8, 35], "source_dict": 8, "char_matrix": [8, 11, 12, 13, 18, 39, 42, 45], "case_sensitive_taxon_label": [8, 48, 60, 61, 62], "similar": [8, 23, 24, 27, 31, 53, 54, 55, 58], "dereferenc": [8, 9, 34, 35, 55], "coerc": [8, 12], "s1": [8, 35, 50, 52, 54], "tccaa": [8, 35], "s2": [8, 35, 54], "tgcaa": [8, 35], "s3": [8, 35], "tg": [8, 35], "aa": [8, 35, 39], "constructor": [8, 12, 24, 27, 31, 38, 39, 42, 44], "One": [8, 9, 11, 12, 24, 27, 46], "matrix_offset": [8, 58, 61, 62, 63], "offset": [8, 24, 27, 34], "ignore_unrecognized_keyword_argu": [8, 12, 24, 27, 58, 60, 61, 62, 63], "unsupport": [8, 12, 24, 27], "unrecogn": [8, 12, 24, 27], "dna1": [8, 35, 37, 38, 46], "dna2": [8, 35, 46], "purl": [8, 12, 35, 39, 46, 55], "phylo": [8, 12, 35, 46, 55, 57], "treebas": [8, 12, 35, 46, 55], "phylow": [8, 12, 35, 46, 55], "tb2": [8, 12, 35, 46, 55], "m2610": [8, 35, 46], "aa1": [8, 35, 46], "dat": [8, 12, 24, 27, 35, 46], "std1": [8, 35, 46], "python_morph": [8, 35, 46], "std2": [8, 35, 46], "t1": [8, 15, 23, 24, 25, 27, 35, 43, 46, 50, 51, 53, 54, 57], "n01011": [8, 35, 46], "t2": [8, 15, 23, 24, 25, 27, 35, 43, 46, 50, 51, 53, 54], "n11100": [8, 35, 46], "factori": [8, 12, 24, 27, 31, 35, 38, 46, 50, 51, 52, 53, 54], "custom": [8, 12, 15, 24, 27, 32, 35, 37, 38, 45, 46, 50, 51, 55, 56, 59], "pdo": [8, 12, 24, 27], "get_from_url": [8, 12, 24, 27, 46], "strip_markup": [8, 12, 24, 27], "pair": [8, 9, 10, 16, 22, 24, 25, 27, 30, 35, 48, 52, 54, 55], "keep_sequ": [8, 35], "max_sequence_s": [8, 35], "migrate_taxon_namespac": [8, 23, 24, 27], "unify_taxa_by_label": [8, 23, 24, 27], "taxon_mapping_memo": [8, 23, 24, 27], "move": [8, 23, 24, 27, 31, 51, 54], "reconstruct_taxon_namespac": [8, 23, 24, 27], "alread": [8, 23, 24, 27], "sensit": [8, 9, 23, 24, 27, 31, 48, 58], "is_case_sensit": [8, 23, 24, 27], "establish": [8, 15, 23, 24, 27, 34, 54], "old": [8, 23, 24, 27, 31], "insensit": [8, 9, 23, 24, 27, 31, 48], "four": [8, 23, 24, 27, 38, 49, 51, 54, 57], "foo": [8, 23, 24, 27], "variant": [8, 9, 23, 24, 27], "remain": [8, 10, 23, 24, 27, 34, 57], "preced": [8, 23, 24, 27, 43, 48, 51, 57], "counterpart": [8, 23, 24, 27, 51], "whatev": [8, 23, 24, 27], "other_taxon_namespac": [8, 23, 24, 27], "some_other_data": [8, 23, 24, 27], "achiv": [8, 23, 24, 27], "t3": [8, 15, 23, 24, 27, 50, 53, 54], "new_character_subset": 8, "new_sequ": 8, "poll_taxa": [8, 23, 24, 27], "purge_taxon_namespac": [8, 23, 24, 27], "taxonnamespaceassoci": [8, 14, 48], "reindex_subcomponent_taxa": [8, 23, 24, 27], "synchron": [8, 31, 51], "reindex_taxa": [8, 23, 24, 27], "deprec": [8, 12, 23, 24, 25, 27, 33], "rebuild": [8, 21, 23, 24, 27], "scratch": [8, 23, 24, 27], "remove_sequ": [8, 35], "sequence_s": 8, "update_taxon_namespac": [8, 23, 24, 27], "vector_s": [8, 42], "w": [8, 12, 21, 24, 27, 46, 53, 54], "write_to_path": [8, 12, 24, 27, 37, 38, 46], "dest": [8, 12, 24, 27, 46], "write_to_stream": [8, 12, 24, 27, 46], "folded_site_frequency_spectrum": 8, "is_pad_vector_to_unfolded_length": 8, "fold": 8, "allel": [8, 10], "spectrum": [8, 18], "chromosom": [8, 39], "f_0": 8, "f_1": 8, "f_2": 8, "f_n": 8, "f_i": 8, "segreg": [8, 10, 18, 44], "f_m": 8, "ceil": 8, "frac": [8, 10, 16, 43], "monomorph": 8, "remap_to_default_state_alphabet_by_symbol": 8, "purge_other_state_alphabet": 8, "reassign": 8, "remap_to_state_alphabet_by_symbol": 8, "sa": 8, "taxon_state_sets_map": [8, 15], "char_indic": 8, "gaps_as_miss": [8, 15], "gap_stat": 8, "no_data_st": [8, 9], "gap": [8, 9, 15, 39, 48, 49], "agn": 8, "gc": 8, "wherea": [8, 20, 27], "rnacharacterdatasequ": 8, "proteincharacterdatasequ": 8, "restrictionsitescharacterdatasequ": 8, "infinitesitescharacterdatasequ": 8, "default_state_alphabet": [8, 58, 62, 63], "new_standard_state_alphabet": [8, 58, 62, 63], "abc": [8, 58, 63], "ij": 8, "standardcharacterdatasequ": 8, "fundamental_st": 9, "ambiguous_st": 9, "polymorphic_st": 9, "symbol_synonym": 9, "no_data_symbol": 9, "gap_symbol": 9, "case_sensit": [9, 31], "master": 9, "registri": 9, "There": [9, 27, 43, 49, 53, 57], "denomin": 9, "basic": [9, 27, 39, 45, 51, 52, 54, 55, 56], "atom": 9, "dna": [9, 35, 36, 38, 39, 44, 48, 49, 58, 63], "adenin": 9, "guanin": 9, "cytosin": 9, "thymin": 9, "pseudo": [9, 34], "themselv": [9, 24, 50], "ambigu": [9, 57], "polymorph": [9, 18], "unknown": [9, 57], "uncertainti": 9, "lack": 9, "knowledg": 9, "With": [9, 38, 48, 50, 53], "uncertaintli": 9, "molecular": [9, 11, 16, 25, 26, 40, 55], "widespread": 9, "geograph": 9, "upon": 9, "immut": [9, 23, 27, 34], "symbologi": 9, "correspod": 9, "acgt": [9, 48], "canon": 9, "furthermor": [9, 51, 59], "multist": 9, "blank": 9, "tractabl": 9, "anonym": 9, "state_it": 9, "ambiguous_state_it": 9, "ambiguous_symbol_it": 9, "include_synonym": 9, "canonical_symbol_state_map": 9, "variat": [9, 11, 19], "compile_lookup_map": 9, "tabl": [9, 16, 22, 27, 39, 43], "quick": [9, 40, 52, 56], "compile_member_states_lookup_map": 9, "compile_symbol_lookup_map": 9, "full_symbol_state_map": 9, "fundamental_state_it": 9, "fundamental_symbol_it": 9, "get_canonical_symbol_for_symbol": 9, "get_fundamental_states_for_symbol": 9, "get_states_for_symbol": 9, "match_ambiguous_st": 9, "match_polymorphic_st": 9, "match_stat": 9, "state_denomin": 9, "polypmorphic_st": 9, "multistate_state_it": 9, "multistate_symbol_it": 9, "new_ambiguous_st": 9, "implicit": [9, 48], "member_state_symbol": 9, "taken": [9, 10, 18, 20, 21, 26, 27, 30, 32, 57], "turn": [9, 51, 52, 55], "member_st": 9, "new_fundamental_st": 9, "new_multist": 9, "enum": 9, "new_polymorphic_st": 9, "new_symbol_synonym": 9, "referenced_symbol": 9, "polymorphic_state_it": 9, "polymorphic_symbol_it": 9, "set_state_as_attribut": 9, "symbol_state_pair_it": 9, "token": [9, 16, 31, 43, 45, 51], "presenc": [9, 16, 23, 27, 34], "wing": 9, "morpholog": 9, "fundamental_index": 9, "fundamental_indexes_with_gaps_as_miss": 9, "tupe": 9, "fundamental_symbol": 9, "is_exact_correspond": 9, "tri": 9, "is_fundamental_st": 9, "is_single_st": 9, "itself": [9, 27, 35, 50, 52], "member_states_str": 9, "stated": 9, "kingman": [10, 21, 30, 54], "framework": [10, 54], "coalesce_nod": [10, 14], "pop_siz": [10, 17, 21, 30, 53, 55], "use_expected_tmrca": [10, 21], "yet": [10, 15, 32], "draw": [10, 19, 53], "exponenti": [10, 19], "choos": [10, 16, 19, 22, 43], "k": [10, 18, 19, 21, 25, 27, 41], "child_nod": [10, 27, 37, 52], "total": [10, 16, 19, 21, 24, 26, 27, 43, 44, 48, 52, 57], "deepest": 10, "deduct": 10, "repeat": [10, 27, 51], "left": [10, 26, 27, 34], "uncoalesc": [10, 30], "gradual": 10, "grow": [10, 27, 53], "modifi": [10, 13, 27, 34, 47, 51, 55], "reset": 10, "neutral": [10, 21, 30, 40, 54], "haploid": [10, 17, 30, 53, 54], "diploid": [10, 17, 30, 53], "2n": [10, 17, 30, 53], "constrained_kingman_tre": [10, 14, 30], "pop_tre": [10, 30], "gene_tree_list": [10, 30], "gene_node_label_fn": [10, 30], "gene_sampling_strategi": [10, 30], "random_uniform": [10, 30], "num_gen": [10, 17, 30], "num_genes_attr": [10, 17, 30], "pop_size_attr": [10, 17, 30], "decorate_original_tre": [10, 30], "gene_nod": [10, 30], "node_attribut": [10, 30], "Will": [10, 20, 21, 30], "fixed_per_popul": [10, 30], "fallback": [10, 30], "spcifi": [10, 30], "count": [10, 21, 24, 25, 27, 30, 34, 48, 53, 54], "contained_coalescent_tre": [10, 14, 30, 53, 54], "containing_tre": [10, 21, 30, 53, 54], "gene_to_containing_taxon_map": [10, 30, 53, 54], "edge_pop_size_attr": [10, 21, 30], "default_pop_s": [10, 21, 30, 53, 54], "edge_pop_size_map": [10, 30], "trivial": [10, 24, 30, 48], "extra": [10, 30, 32, 43], "pop_node_gen": [10, 30], "discrete_time_to_coalesc": [10, 14], "n_gene": 10, "n_to_coalesc": 10, "wright": 10, "fisher": [10, 22], "wait": [10, 20, 27], "greater": [10, 53, 54, 57], "expected_tmrca": [10, 14], "drawn": [10, 13, 19, 44, 52, 57], "extract_coalescent_fram": [10, 14], "frame": 10, "log_probability_of_coalescent_fram": [10, 14], "coalescent_fram": 10, "haploid_pop_s": 10, "classic": [10, 48], "citep": 10, "kingman1982": 10, "kingman1982b": 10, "n_e": 10, "pr": 10, "chronolog": 10, "log_probability_of_coalescent_tre": [10, 14, 54], "wrap": [10, 13, 23, 27, 30, 48, 52, 58], "mean_kingman_tre": [10, 14, 30], "node_waiting_time_pair": [10, 14], "pure_kingman_tre": [10, 14, 30, 53], "unconstrain": [10, 30, 53], "pure_kingman_tree_shap": [10, 14], "num_leav": 10, "time_to_coalesc": [10, 14], "variabl": [10, 24, 31, 53, 57], "math": 10, "polytomy_strategi": [11, 42], "contrast": [11, 16, 23, 40, 50], "felsenstein": [11, 25, 42], "1985": [11, 13, 42, 58], "compar": [11, 25, 32, 34, 40, 43, 51], "american": [11, 16], "naturalist": [11, 16], "125": 11, "15": [11, 43, 51, 54], "garland": [11, 42], "jr": 11, "bennett": 11, "l": [11, 27, 57], "rezend": 11, "2005": [11, 42], "physiologi": 11, "208": 11, "3015": 11, "3035": 11, "throw": [11, 42], "raw": [11, 16, 18, 42, 44], "contrasts_tre": [11, 42], "character_index": [11, 42], "annotate_pic_statist": [11, 42], "state_values_as_node_label": [11, 42], "corrected_edge_length": [11, 42], "pic_state_valu": [11, 42], "pic_state_vari": [11, 42], "pic_contrast_raw": [11, 42], "pic_contrast_vari": [11, 42], "pic_contrast_standard": [11, 42], "pic_edge_length_error": [11, 42], "pic_corrected_edge_length": [11, 42], "pic": [11, 40], "evolve_continuous_char": [11, 14], "roeotro": 11, "awai": [11, 27], "clock": 11, "min_rat": 11, "max_rat": 11, "ktb": 11, "kishino": 11, "thorn": 11, "bruno": 11, "time_attr": 11, "edge_length": [11, 13, 24, 27, 52], "val_attr": 11, "hold": [11, 34], "success": [11, 19, 27, 57], "mutation_r": [11, 13], "mean_val_attr": 11, "tho": 11, "although": [11, 33], "odd": 11, "constrain_rate_mod": 11, "choic": [11, 19, 34], "crop": 11, "linear_bounc": 11, "extrem": [11, 22], "line": [11, 31, 43, 44, 45, 50, 53, 54, 57], "propos": 11, "limit": [11, 27, 55, 57], "small": [11, 33, 55], "slice": [11, 23, 24, 50], "illeg": 11, "diverg": [11, 17], "probabilist": 11, "vol": [11, 25], "pp": [11, 25, 44], "352": 11, "361": 11, "varianc": [11, 16, 22, 26, 42, 43, 54], "product": [11, 24, 57], "durat": [11, 20], "chosen": 11, "mean_rat": 11, "averag": [11, 26, 44, 54], "endpoint": 11, "coordin": [12, 27], "tree_list": [12, 37, 38, 42, 46, 48, 55, 60, 61, 62], "load": [12, 34, 42, 54, 57], "document": [12, 32, 33, 35, 46, 47, 54, 57], "mesquit": [12, 21], "otu": [12, 39, 48, 55], "ideal": [12, 45], "idiomat": 12, "enforc": [12, 34, 37], "attach": [12, 36], "tn": [12, 15, 23, 25, 36, 43, 46, 48, 54], "attach_taxon_namespac": [12, 36, 38, 46, 48], "subsequ": [12, 16, 38, 50], "semant": [12, 13, 23, 27, 48, 51, 55], "similarli": [12, 34], "deseri": [12, 31, 39], "cleaner": 12, "mix": [12, 13, 48], "newli": [12, 32], "data_object": 12, "add_char_matrix": 12, "add_taxon_namespac": 12, "add_taxon_set": 12, "taxon_set": [12, 31], "add_tree_list": 12, "attach_taxon_set": 12, "detach_taxon_namespac": [12, 38], "detach_taxon_set": 12, "exclude_tre": [12, 46, 60, 61, 62], "exclude_char": [12, 60, 61, 62], "dataset1": [12, 37, 46], "chars_and_tre": [12, 46], "dataset2": [12, 46], "studi": [12, 24, 27, 46, 55, 57], "s1925": [12, 46], "get_tree_list": 12, "new_char_matrix": 12, "char_matrix_typ": 12, "char": [12, 15, 31, 35, 38, 42, 61, 62], "new_taxon_namespac": [12, 36, 46, 48], "new_taxon_set": 12, "new_tree_list": 12, "attached_taxon_namespac": [12, 38], "read_from_path": [12, 24, 37, 38, 46], "filepath": [12, 24, 50, 57], "undefin": [12, 24], "read_from_stream": [12, 24, 46], "fileobj": [12, 24], "read_from_str": [12, 24, 46], "src_str": [12, 24], "read_from_url": [12, 24, 46], "unify_taxon_namespac": [12, 38], "case_sensitive_label_map": 12, "reindic": 12, "subcompon": 12, "discretecharacterevolutionmodel": [13, 14], "stationary_freq": 13, "__init__": [13, 21], "pmatrix": 13, "tlen": 13, "nucleotid": [13, 35, 39, 44, 45], "simulate_descendant_st": 13, "ancestral_st": 13, "discretecharacterevolv": [13, 14], "seq_model": 13, "seq_attr": 13, "seq_model_attr": 13, "edge_length_attr": 13, "edge_rate_attr": 13, "seq_label_attr": 13, "meta": [13, 37, 38, 39, 54, 55], "nomenclatur": 13, "evolve_st": 13, "seq_len": 13, "root_stat": 13, "simulate_root_st": 13, "in_plac": 13, "stationari": 13, "extend_char_matrix_with_characters_on_tre": 13, "exclud": [13, 26, 27, 57], "fine": [13, 35, 38, 51, 57], "tune": 13, "hky85": [13, 14], "kappa": 13, "base_freq": 13, "hasegawa": 13, "swofford": 13, "1996": [13, 25], "jc69": [13, 14], "corrected_substitution_r": 13, "factor": [13, 47, 57], "multipli": [13, 17, 27], "proport": [13, 22, 24, 26, 52, 57], "per": [13, 15, 17, 18, 19, 47, 53, 54, 55], "pij": 13, "state_i": 13, "state_j": 13, "p_ij": 13, "nu": 13, "analyt": 13, "solut": [13, 43, 48], "pvector": 13, "transit": [13, 32], "qmatrix": 13, "instantan": 13, "juke": 13, "cantor": 13, "1969": 13, "25": [13, 43], "nucleotidecharacterevolutionmodel": [13, 14], "seqmodel": 13, "is_purin": 13, "state_index": 13, "purin": 13, "row": [13, 16, 22, 27, 35, 39, 42, 43], "is_purine_transit": 13, "state1_idx": 13, "state2_idx": 13, "state1": 13, "state2": 13, "is_pyrimidin": 13, "pyrimidin": 13, "is_pyrimidine_transit": 13, "is_transit": 13, "is_transvers": 13, "transversion": 13, "stationary_sampl": 13, "nucleotidesequ": 13, "hky85_char": [13, 14], "tree_model": 13, "retain_sequences_on_tre": 13, "characterblock": 13, "hky": [13, 47], "leaf_nod": [13, 27], "accumul": [13, 19, 39, 46], "simulate_discrete_char_dataset": [13, 14], "simulate_discrete_char": [13, 14], "datamodel": [13, 14, 31, 35, 50, 52], "core": [14, 31, 32, 33, 55, 57], "infrastructur": [14, 23, 31, 33, 40, 47], "dataobject": [14, 31], "taxonmodel": [14, 31], "treemodel": [14, 24, 31, 52], "treecollectionmodel": [14, 31, 50], "charstatemodel": [14, 31], "charmatrixmodel": [14, 31, 35], "datasetmodel": 14, "aggreg": [14, 38, 48, 53, 54], "phylogeneticdist": 14, "birthdeath": [14, 53], "parsimoni": [14, 21, 54], "fitch_down_pass": [14, 15], "fitch_up_pass": [14, 15], "parsimony_scor": [14, 15], "protractedspeci": 14, "expected_duration_of_speci": [14, 20], "log_probability_of_duration_of_speci": [14, 20], "maximum_probability_duration_of_speci": [14, 20], "probability_of_duration_of_speci": [14, 20], "protractedspeciationprocess": 14, "reconcil": [14, 31, 53, 54], "parasit": 14, "containingtre": [14, 21, 53, 54], "monophyletic_partition_discord": [14, 21, 54], "reconciliation_discord": [14, 21, 54], "treeshap": 14, "shape": [14, 54], "star_tre": [14, 29, 30, 53], "treemeasur": [14, 27, 31, 54], "unari": [14, 40], "b1": [14, 26, 27, 49, 54], "n_bar": [14, 26, 27], "colless_tree_imbal": [14, 26, 27, 54], "patristic_dist": [14, 16, 26, 43, 52], "pybus_harvey_gamma": [14, 26, 27, 54], "sackin_index": [14, 26, 27, 54], "treeness": [14, 26, 27, 54], "euclidean_dist": [14, 25, 27, 54], "false_positives_and_neg": [14, 25, 27, 54], "find_missing_bipartit": [14, 25, 27], "mason_gamer_kellogg_scor": [14, 25], "robinson_foulds_dist": [14, 25, 27, 50], "symmetric_differ": [14, 25, 27, 34, 48, 50, 54], "unweighted_robinson_foulds_dist": [14, 25], "weighted_robinson_foulds_dist": [14, 25, 27, 50, 51, 52, 54], "treescor": [14, 15, 31, 54], "score": [14, 15, 19, 24, 34, 40], "popgenstat": [14, 31, 44], "average_number_of_pairwise_differ": [14, 18, 44], "derived_state_matrix": [14, 18], "nucleotide_divers": [14, 18, 44], "num_segregating_sit": [14, 18, 44], "tajimas_d": [14, 18, 44], "unfolded_site_frequency_spectrum": [14, 18], "wattersons_theta": [14, 18, 44], "binomial_rv": [14, 19], "chisq_pdf": [14, 19], "exp_pdf": [14, 19], "geometric_rv": [14, 19], "hypergeometric_pmf": [14, 19], "num_poisson_ev": [14, 19], "poisson_pmf": [14, 19], "poisson_rv": [14, 19], "sample_multinomi": [14, 19], "weighted_choic": [14, 19], "weighted_index_choic": [14, 19], "z_pmf": [14, 19], "fishersexacttest": [14, 22], "empirical_cdf": [14, 22], "empirical_hpd": [14, 22, 54], "mean_and_population_vari": [14, 22], "mean_and_sample_vari": [14, 22, 54], "median": [14, 22, 24, 56], "quantile_5_95": [14, 22], "rank": [14, 22], "variance_covari": [14, 22], "treesim": [14, 31, 53, 54], "unifi": [14, 38], "popgensim": [14, 31], "pop_gen_tre": [14, 17], "postorder_node_it": [15, 27, 31, 52, 55], "state_sets_attr_nam": 15, "state_set": 15, "score_by_character_list": 15, "fitch": 15, "1971": 15, "basi": [15, 35, 44, 57], "parismoni": 15, "apternodu": 15, "tre": [15, 24, 27, 34, 36, 38, 42, 46, 50, 53, 54, 57, 60, 62], "taxon_set_map": 15, "nd": [15, 27, 42, 51, 52], "analysis1_st": 15, "require_taxon": [15, 23, 39], "t4": [15, 24, 27, 53, 54], "t5": [15, 27, 53, 54], "preorder_node_it": [15, 27, 31, 52], "phase": 15, "gap_as_miss": 15, "pscore": 15, "unsur": 15, "mle": [15, 34, 36, 38, 43, 46, 50, 51, 52, 54, 55, 57], "is_store_path_edg": 16, "as_data_t": 16, "is_weighted_edge_dist": 16, "assemblage_membership_definitions_from_csv": [16, 43], "default_data_typ": [16, 43], "csv_reader_kwarg": 16, "delimit": [16, 43, 57], "absenc": [16, 27, 34], "abund": 16, "compile_from_tre": 16, "span": [16, 23, 27, 38, 54], "taxon1": [16, 26, 43, 52], "taxon2": [16, 26, 43, 52], "is_normalize_by_tree_s": 16, "distinct_taxon_pair_it": 16, "filter_fn": [16, 27, 43], "from_csv": [16, 43], "is_allow_new_taxa": [16, 43], "is_first_row_column_nam": 16, "is_first_column_row_nam": 16, "label_transform_fn": [16, 43], "comma": [16, 43, 57], "tab": [16, 43, 57], "cell": [16, 43], "upper": [16, 43, 55], "diagon": [16, 43], "lower": [16, 43, 57], "despit": [16, 43], "err": 16, "caution": [16, 53, 54], "highlight": [16, 32, 33], "incorrect": [16, 38, 48], "mismatch": [16, 43], "header": 16, "csv": [16, 43, 57], "pdm": [16, 43, 52], "pdm1": [16, 43], "pdm2": 16, "tsv": [16, 43, 57], "from_tre": 16, "snapshot": [16, 43, 52, 54, 55], "syntact": 16, "phylogenetic_distance_matrix": [16, 27, 43, 52, 54], "mean_nearest_taxon_dist": [16, 43], "sum_": [16, 43], "delta_": [16, 43], "neq": [16, 43], "communit": 16, "restrict": [16, 43], "daata": 16, "mntds_by_commun": 16, "community_label": 16, "lambda": [16, 23, 27, 43, 49, 50, 51, 52, 55], "mean_pairwise_dist": [16, 43], "webb": 16, "2000": [16, 26, 55], "explor": [16, 33], "rainforest": 16, "156": 16, "145": 16, "155": 16, "swenson": 16, "mpd1": 16, "mpds_by_commun": 16, "mrca": [16, 27, 34, 40, 51, 52, 54], "nj_tree": [16, 43], "tree_factori": [16, 24, 27, 51], "saitou": [16, 43], "nei": [16, 43], "1987": [16, 43], "distance_matrix": 16, "406": 16, "425": 16, "path_edge_count": [16, 43, 52], "path_edg": 16, "shuffle_taxa": [16, 27], "is_shuffle_phylogenetic_dist": 16, "is_shuffle_phylogenetic_path_step": 16, "is_shuffle_mrca": 16, "shuffl": [16, 43], "situ": [16, 51], "standardized_effect_size_mean_nearest_taxon_dist": [16, 43], "assemblage_membership": [16, 43], "num_randomization_repl": 16, "1000": [16, 20, 57], "is_skip_single_taxon_assemblag": 16, "null_model_typ": 16, "se": [16, 43], "model_": [16, 43], "sd": [16, 22, 43, 53], "bia": [16, 43], "decreas": [16, 43], "rich": [16, 37, 39, 43, 52, 55], "increas": [16, 43, 57], "satur": [16, 43], "considerd": 16, "replic": [16, 43, 57], "ob": [16, 43], "null_model_mean": [16, 43], "null_model_sd": [16, 43], "z": [16, 19, 23, 43, 55], "p": [16, 19, 20, 21, 22, 27, 43, 55, 57], "comm1": 16, "standardized_effect_size_mean_pairwise_dist": [16, 43], "rel": [16, 39, 55], "assemblage_membership_definit": [16, 43], "sum_of_dist": 16, "taxon_it": 16, "upgma_tre": [16, 43], "arithmet": 16, "simlat": 17, "decor": [17, 24, 55], "num_pop": 17, "scalar": 17, "sweep": 17, "proper": 17, "scale": [17, 27, 32, 47, 57], "ignore_uncertain": 18, "ancestral_sequ": 18, "derived_state_alphabet": 18, "chardatasequ": 18, "ggctaatctga": 18, "gctttttctga": 18, "gctctctcttc": 18, "ggttaatctga": 18, "0010000000": 18, "0000110000": 18, "0001110011": 18, "pi": 18, "tajima": [18, 44], "char_sequ": 18, "ancestral_seq": 18, "watterson": [18, 44], "theta": [18, 44], "trial": 19, "binv": 19, "kachitvicyanukul": 19, "schmeiser": 19, "1988": 19, "binomi": 19, "acm": 19, "31": [19, 43, 57], "216": 19, "222": 19, "NOT": [19, 23, 27], "author": [19, 39, 55], "paper": [19, 57], "own": [19, 38, 50, 51, 53, 54, 57], "round": [19, 55, 57], "loop": 19, "8": [19, 20, 27, 34, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57], "chisq": 19, "df": 19, "chi": 19, "squar": [19, 54], "gari": 19, "perlman": 19, "stat": 19, "densiti": [19, 22, 57], "intens": 19, "evalu": [19, 27, 39], "geometr": 19, "devroy": 19, "luc": 19, "1986": 19, "500": 19, "cg": 19, "sc": 19, "carleton": 19, "ca": 19, "rnbookindex": 19, "poisson": 19, "prob": 19, "eli": 19, "thegreenplac": 19, "net": [19, 44], "22": [19, 43], "anyth": [19, 27], "arbitrari": [19, 27, 34, 53], "weighted_choice_sub": 19, "uniformli": 19, "larger": [19, 26], "etienn": 20, "morlon": 20, "lambert": 20, "2014": 20, "2430": 20, "2440": 20, "1111": 20, "evo": [20, 48], "12433": 20, "speciation_initiation_r": 20, "speciation_completion_r": 20, "incipient_species_extinction_r": 20, "eq": 20, "incipi": 20, "condi": 20, "tional": 20, "fact": [20, 23, 24, 27, 34, 38, 42, 46], "succeed": 20, "produc": [20, 42, 48, 52, 53, 55, 57], "lambda_1": 20, "exctinct": 20, "mu_1": 20, "tau": 20, "phi": 20, "maxim": [20, 24, 57], "speciation_initiation_from_orthospecies_r": 20, "speciation_initiation_from_incipient_species_r": 20, "orthospecies_extinction_r": 20, "lineage_label_format_templ": 20, "species_label_format_templ": 20, "generate_sampl": 20, "ortho": 20, "confirm": 20, "species_tree_nod": 20, "lineage_tree_nod": 20, "exceed": 20, "min_extant_orthospeci": 20, "max_extant_orthospeci": 20, "num_extant_lineag": 20, "tipe": 20, "is_retry_on_total_extinct": 20, "rerun": 20, "max_retri": 20, "execut": [20, 57], "prematur": 20, "lineage_tre": 20, "orthospecies_tre": 20, "reconcili": 21, "embed": [21, 53], "contained_taxon_namespac": [21, 53, 54], "contained_to_containing_taxon_map": [21, 53, 54], "contained_tre": 21, "fit_containing_edge_length": 21, "collapse_empty_edg": 21, "ignore_root_deep_coalesc": 21, "biogeograph": 21, "area": [21, 33], "topolog": 21, "build_edge_taxa_set": 21, "clear_contained_edg": 21, "deep_coalesc": [21, 53, 54], "embed_contained_kingman": [21, 53, 54], "emb": [21, 53, 54], "censor": [21, 40, 54], "embed_tre": [21, 53, 54], "fit_edge_length": 21, "recalcul": [21, 24, 25, 27, 34, 51], "accomod": 21, "num_deep_coalesc": 21, "rebuild_taxa": 21, "simulate_contained_kingman": 21, "container_tree_nod": 21, "write_as_mesquit": 21, "debug": 21, "taxon_namespace_partit": 21, "tax_set": 21, "monophylet": [21, 49, 54], "taxonnamespacepartit": [21, 49, 53, 54], "gene_tre": [21, 53], "species_tre": 21, "encod": [21, 24, 25, 26, 27, 39, 55], "duplic": [21, 23, 24], "impli": [21, 54], "goodman": [21, 54], "czelnusiniak": 21, "moor": 21, "romero": 21, "herrera": 21, "matsuda": 21, "1979": [21, 54], "illustr": [21, 39, 42, 48, 54], "cladogram": [21, 54], "globin": [21, 54], "syst": [21, 54], "zool": [21, 54], "19": [21, 43, 54], "99": [21, 54], "113": [21, 54], "maddison": [21, 54], "1997": 21, "biol": 21, "46": 21, "523": 21, "536": 21, "correct": [21, 25, 27, 38, 39, 42, 43, 48, 57], "is_root": [21, 24, 27, 51], "mask": [21, 23, 27], "encode_split": [21, 27, 60, 62], "2x2": 22, "hypothesi": 22, "categori": [22, 55], "vertic": 22, "horizont": 22, "ax": 22, "left_tail_p": 22, "probability_of_t": 22, "shown": [22, 55], "hypergeometr": 22, "right_tail_p": 22, "two_tail_p": 22, "conf": 22, "unimod": 22, "95": [22, 54, 57], "highest": [22, 24], "hpd": [22, 54, 57], "emp": 22, "teachingdemo": 22, "greg": 22, "snow": 22, "licens": [22, 56], "artist": 22, "pool": 22, "moin": 22, "simpleprogram": 22, "bin_siz": 22, "quantil": [22, 57], "value_to_be_rank": 22, "value_providing_rank": 22, "search": [22, 23, 27, 31, 45, 48, 52, 57, 58], "var": [22, 54], "hpd95": 22, "quant_5_95": 22, "population_vari": 22, "covari": 22, "forum": 22, "pythonforum": 22, "viewtop": 22, "php": 22, "17441": 22, "domain": [23, 38, 48, 55], "is_mut": [23, 27, 34], "later": [23, 24, 37, 48, 51], "add_taxon": 23, "0x106509090": 23, "0x10661f050": 23, "0x10651c590": 23, "0x106642a90": 23, "tns1": 23, "taxa1": 23, "0x1097275d0": 23, "0x109727610": 23, "0x109727e10": 23, "0x109727e90": 23, "tns2": 23, "0x109727d50": 23, "alll": 23, "achiev": [23, 38, 53, 55], "accession_index": 23, "add_taxa": 23, "noth": [23, 57], "happen": [23, 32], "regist": 23, "mutabl": [23, 27], "all_taxa_bitmask": 23, "bitmask": [23, 24, 25, 27, 48, 54], "bitmask_as_newick_str": 23, "preserve_spac": [23, 27, 60, 62], "quote_underscor": [23, 27, 48], "hash": [23, 24, 27, 34, 48, 51], "underscor": [23, 27, 43, 48, 57], "quot": [23, 27, 43, 48], "bitmask_taxa_list": 23, "discard_taxon_label": [23, 31], "first_match_onli": 23, "decid": [23, 56], "ridden": 23, "redund": [23, 32, 34], "remove_taxon_label": [23, 31], "get_taxa": 23, "lest": 23, "get_taxa_bitmask": 23, "taxa_bitmask": 23, "get_taxon": [23, 35, 39, 52], "critieria": 23, "has_taxa_label": [23, 31], "has_taxon_label": [23, 31], "label_taxon_map": 23, "overrid": [23, 24, 27, 39, 48], "attempt": [23, 24, 55], "dictonari": 23, "new_taxa": 23, "new_taxon": 23, "remove_taxon": [23, 31], "lookuperror": 23, "split_as_newick_str": [23, 27], "taxa_bipartit": 23, "taxon_bitmask": 23, "mainten": 23, "repopul": [23, 24, 27], "unlik": [23, 24, 27, 55], "univers": [24, 27, 33, 48], "opeat": 24, "unnam": [24, 31, 38], "usr": [24, 27, 39, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55], "tlst1": 24, "tlst2": 24, "treefil": [24, 27, 57], "ru": 24, "tlst3": 24, "sometre": [24, 27, 50], "tlst4": 24, "tlst5": 24, "boot1": 24, "boot3": 24, "tlist6_1": 24, "tlist6_2": 24, "tlist6": 24, "tlist5_1": 24, "tlist5_2": 24, "parser": [24, 27, 48], "tlst8": 24, "extract_comment_metadata": [24, 55, 60, 62], "store_tree_weight": [24, 27, 60, 62], "preserve_underscor": [24, 27, 43, 46, 48, 60, 62], "100": [24, 35, 37, 53, 55, 57], "mcmc": [24, 27, 36, 38, 46, 47, 50, 52, 54, 57], "collection_offset": [24, 27, 37, 60, 61, 62], "tree_offset": [24, 27, 36, 37, 38, 46, 50, 52, 54, 60, 61, 62], "tlst4copy0a": 24, "assert": [24, 27, 39, 43, 48, 50, 51, 52, 53], "tlst4copy0b": 24, "tlst4copy1a": 24, "tlst4copy1b": 24, "default_tree_typ": 24, "tlist": 24, "__iadd__": 24, "taxon_import_strategi": 24, "taxon_nameaspac": 24, "as_tree_arrai": 24, "min_freq": [24, 54], "is_bipartitions_upd": [24, 25, 26, 27, 34, 54], "summarize_split": 24, "minumum": [24, 46], "frequency_of_bipartit": [24, 54], "split_bitmask": [24, 27, 34, 54], "frequency_of_split": [24, 54], "burn": [24, 38, 46, 54, 57], "tree4": [24, 46, 51], "opentreeoflif": [24, 27, 46], "v2": [24, 27, 46], "pg_1144": [24, 27, 46], "tree2324": [24, 27, 46], "maximum_product_of_split_support_tre": [24, 54], "include_external_split": 24, "score_attr": 24, "log_product_of_split_support": [24, 54], "credibl": [24, 34, 56], "mcct_tree": 24, "maximum_sum_of_split_support_tre": [24, 54], "sum_of_split_support": [24, 54], "split_distribut": 24, "default_edge_length_valu": 24, "understand": [24, 48], "signatur": [24, 46], "oppos": [24, 34, 46], "ish": 24, "tree_typ": 24, "destim": 24, "is_rooted_tre": 24, "ignore_edge_length": 24, "ignore_node_ag": 24, "use_tree_weight": 24, "is_force_max_ag": [24, 27], "taxon_label_age_map": 24, "high": [24, 31, 32, 37, 51, 56], "minim": [24, 27, 51], "toplogi": [24, 34], "memori": [24, 27, 50, 54, 57], "cost": [24, 51], "incompatibleedgelengthstreearrayupd": 24, "incompatiblenodeagestreearrayupd": 24, "incompatiblerootingtreearrayupd": 24, "incompatibletreearrayupd": 24, "incompatibletreeweightstreearrayupd": 24, "tree_arrai": [24, 60, 61, 62], "add_tre": 24, "represnet": 24, "thess": 24, "bipartition_encoding_frequ": 24, "frozenset": 24, "occurr": [24, 54], "calculate_log_product_of_split_support": 24, "calculate_sum_of_split_support": 24, "consensus_tre": 24, "split_summarization_kwarg": 24, "get_split_bitmask_and_edge_tupl": 24, "mst_tree": 24, "read_from_fil": 24, "split_bitmask_set_frequ": 24, "topologi": [24, 27, 32, 34, 39, 56], "sort_descend": 24, "frequency_attr_nam": 24, "frequency_annotation_nam": 24, "ascend": [24, 27, 51], "regard": [24, 54], "freqenc": 24, "calc_freq": 24, "collapse_edges_with_less_than_minimum_support": 24, "count_splits_on_tre": 24, "log_product_of_split_support_on_tre": 24, "sum_of_split_support_on_tre": 24, "normalize_bitmask": 24, "rotat": [24, 27, 34, 40, 57], "split_support_it": 24, "traversal_strategi": 24, "node_support_attr_nam": 24, "edge_support_attr_nam": 24, "specfi": 24, "splits_consid": 24, "distribt": 24, "summarize_splits_on_tre": 24, "rendit": 24, "set_edge_length": 24, "add_support_as_node_attribut": 24, "add_support_as_node_annot": 24, "set_support_as_node_label": 24, "add_node_age_summaries_as_node_attribut": 24, "age_mean": 24, "age_median": 24, "age_sd": 24, "age_hpd95": 24, "age_rang": 24, "add_node_age_summaries_as_node_annot": 24, "add_edge_length_summaries_as_edge_attribut": 24, "attribtut": 24, "length_mean": [24, 55, 57], "length_median": [24, 55, 57], "length_sd": [24, 55, 57], "length_hpd95": [24, 55, 57], "length_rang": [24, 55], "add_edge_length_summaries_as_edge_annot": 24, "support_label_decim": 24, "support_as_percentag": 24, "percentag": [24, 57], "minimum_edge_length": [24, 27], "error_on_negative_edge_length": [24, 27], "metric": [25, 28, 31, 34, 40, 51], "measur": [25, 26, 28], "tree1": [25, 27, 34, 37, 46, 48, 51, 52, 54], "tree2": [25, 34, 46, 48, 51, 52, 54], "edge_weight_attr": 25, "value_typ": 25, "euclidean": 25, "2004": 25, "encode_bipartit": [25, 27, 34], "implicitli": [25, 37, 38], "reference_tre": [25, 54], "comparison_tre": [25, 54], "bipar": 25, "mason": 25, "gamer": 25, "kellogg": 25, "among": [25, 27], "tribe": 25, "triticea": 25, "graminea": 25, "45": [25, 39, 55], "524": 25, "func": 25, "unweighg": 25, "robinson": [25, 27, 31, 34], "fould": [25, 27, 31, 34], "symmetr": [25, 50], "rf": 25, "reciproc": 26, "interior": 26, "colless": [26, 54], "imbal": [26, 54], "pda": 26, "distinguish": 26, "arrang": 26, "prec": [26, 27], "gamma": 26, "pybu": 26, "harvei": 26, "constanc": 26, "distibut": 26, "ultrametricti": 26, "macro": 26, "incomplet": [26, 27], "proc": [26, 39], "royal": 26, "societi": 26, "267": 26, "2267": 26, "2272": 26, "sackin": [26, 54], "balanc": 26, "acycl": 27, "seed_nod": [27, 52], "recogn": 27, "stringio": [27, 43], "importerror": 27, "t7": [27, 53], "suppress_internal_node_taxa": [27, 60, 62], "t8": [27, 53], "BUT": 27, "nds3": 27, "nds4": 27, "independent": [27, 35, 38], "egs3": 27, "eg": 27, "postorder_edge_it": [27, 52, 53], "egs4": 27, "lves7": 27, "lves8": 27, "lf": 27, "lves3": 27, "t9": [27, 53], "lves5": 27, "lves9": 27, "switch": [27, 31, 57], "reindex": 27, "t11": 27, "t12": 27, "dump": [27, 55], "age_order_node_it": [27, 31], "include_leav": 27, "ageorder_node_it": [27, 31], "younger": 27, "older": 27, "before_fn": 27, "after_fn": 27, "leaf_fn": 27, "peyotl": 27, "as_ascii_plot": [27, 51, 52, 53], "graphic": 27, "ascii": [27, 52], "as_python_sourc": 27, "tree_obj_nam": 27, "tree_arg": 27, "calc_node_ag": [27, 54], "is_force_min_ag": 27, "set_node_age_fn": 27, "is_return_internal_node_ages_onli": 27, "newer": [27, 31], "resolve_node_ag": 27, "youngest": 27, "contemporari": 27, "is_leaf": 27, "els": [27, 44, 52], "calc_node_root_dist": 27, "return_leaf_distances_onli": 27, "root_dist": 27, "coalescence_interv": 27, "collapse_basal_bifurc": 27, "set_as_unrooted_tre": 27, "collapse_unweighted_edg": 27, "07": [27, 43], "update_bipartit": [27, 51], "suppress_unifurc": [27, 51], "collapse_unrooted_basal_bifurc": 27, "suppress_storag": 27, "is_bipartitions_mut": 27, "outdegre": 27, "bipartition_encod": [27, 34], "lock": 27, "frozen": 27, "modif": [27, 31, 34], "other_tre": 27, "extract_tre": [27, 51, 52], "extraction_source_reference_attr_nam": 27, "extraction_sourc": [27, 51, 52], "node_filter_fn": [27, 51], "is_apply_filter_to_leaf_nod": 27, "is_apply_filter_to_internal_nod": 27, "node_factori": [27, 51], "tree0": [27, 51, 52], "mammal": 27, "genu": [27, 43], "rhacophoru": 27, "old_world_frog": 27, "is_intern": 27, "startswith": [27, 43, 44, 51], "inclusion_set": 27, "leaf_node_it": [27, 31, 52], "retain_taxa": [27, 51], "habitat": [27, 55], "mountain": 27, "forest": 27, "bird": 27, "include_habitat": 27, "extract_tree_with_taxa": [27, 51], "thin": [27, 51, 52], "taxa_to_retain": 27, "extract_tree_with_taxa_label": [27, 51], "extract_tree_without_taxa": [27, 51], "taxa_to_exclud": 27, "extract_tree_without_taxa_label": [27, 51], "prune_taxa": [27, 51], "filter_leaf_nod": 27, "recurs": [27, 52], "repeatedli": 27, "cherri": 27, "find_missing_split": 27, "hasattr": 27, "find_node_for_taxon": 27, "find_node_with_label": 27, "find_node_with_taxon": [27, 52], "taxon_filter_fn": 27, "find_node_with_taxon_label": [27, 51, 52], "from_bipartition_encod": 27, "from_split_bitmask": 27, "split_edge_length": 27, "infer_taxa": 27, "inorder_edge_it": [27, 31], "infix": [27, 31], "inorder_node_it": [27, 31], "internal_edg": 27, "exclude_seed_edg": 27, "exclude_seed_nod": 27, "omit": [27, 48], "internal_nod": 27, "is_compatible_with_bipartit": 27, "stabl": [27, 33, 34, 48, 55], "reorder": 27, "prior": [27, 55, 57], "leaf_edge_it": 27, "leaf_edg": 27, "leaf_it": [27, 31, 52], "overrrid": 27, "level_order_edge_it": [27, 31, 52], "levelorder_edge_it": [27, 31], "level_order_node_it": [27, 31, 52], "levelorder_node_it": [27, 31], "max_distance_from_root": [27, 54], "furthest": [27, 54], "minmax_leaf_distance_from_root": 27, "closest": 27, "shallowest": 27, "leafset": 27, "leafset_bitmask": [27, 34], "taxon_label": [27, 51, 52, 54], "start_nod": 27, "node_ag": 27, "internal_onli": 27, "num_lineages_at": [27, 54], "distance_from_root": 27, "pdc": [27, 43, 54], "postorder_internal_edge_it": 27, "postorder_internal_node_it": [27, 42], "preorder_edge_it": [27, 52], "preorder_internal_edge_it": 27, "preorder_internal_node_it": 27, "print_plot": [27, 52, 53], "prune_leaves_without_taxa": 27, "prune_subtre": 27, "prune_taxa_with_label": [27, 51], "randomly_assign_taxa": [27, 53], "add_extra_taxa": 27, "randomly_reori": 27, "pick": 27, "bipartition_bitmask": 27, "bipartition_edge_map": [27, 34], "kept": 27, "randomly_rot": 27, "alter": 27, "reroot_at_edg": [27, 51], "length1": 27, "length2": 27, "reroot_at_midpoint": [27, 51], "reroot": [27, 32, 34, 40], "mid": 27, "reroot_at_nod": [27, 51], "new_root_nod": 27, "new_seed_nod": 27, "hard": [27, 48, 55, 57], "reseed_at": 27, "rese": 27, "soft": [27, 57], "node_callback_fn": 27, "node_edge_length_fn": 27, "elaps": 27, "distant": 27, "resolve_node_depth": 27, "resolve_polytomi": 27, "arbitrarili": [27, 34, 42], "sequenti": [27, 53, 54], "equiprob": 27, "broken": [27, 43, 48, 50, 52, 53, 55], "determinist": 27, "retain_taxa_with_label": [27, 51], "scale_edg": 27, "edge_len_multipli": 27, "set_edge_lengths_from_node_ag": 27, "include_internal_nod": 27, "nor": [27, 45], "strip_com": 27, "to_outgroup_posit": [27, 51], "outgroup_nod": [27, 51], "_parent_nod": [27, 31], "unassign_taxa": 27, "exclude_leav": 27, "exclude_intern": 27, "strip": 27, "update_split": 27, "write_as_dot": 27, "dot": 27, "digraph": 27, "write_ascii_plot": 27, "yield_from_fil": [27, 31, 34, 50, 54], "suffici": [27, 31, 53, 57], "far": [27, 38, 48, 51], "overhead": [27, 57], "fault": 27, "hit": [27, 57], "isinst": 27, "f1": [27, 51], "trees1": [27, 50, 52, 57], "f2": [27, 51], "trees2": [27, 57], "tree_yield": [27, 50], "trees3": 27, "trees4": 27, "root_ag": 27, "add_child": [27, 31, 51, 52], "parent_nod": [27, 37, 52], "tail_nod": [27, 31], "adjacent_nod": 27, "age_order_it": [27, 31], "ageorder_it": [27, 31], "defau": 27, "lt": 27, "ancestor_it": 27, "predecessor": 27, "child_edge_it": 27, "child_edg": 27, "child_node_it": [27, 52], "clear_child_nod": 27, "collapse_clad": 27, "collapse_conflict": 27, "subtree_root": 27, "distance_from_tip": 27, "edge_factori": 27, "extract_subtre": 27, "mirror": 27, "get_adjacent_nod": 27, "adjacent_edg": 27, "get_incident_edg": 27, "incident_edg": 27, "inorder_it": 27, "insert_child": [27, 31], "insert_new_child": 27, "__init": 27, "__": 27, "ultim": 27, "level_order_it": [27, 31], "levelorder_it": [27, 31], "new_child": [27, 51, 52], "num_child_nod": 27, "postorder_it": 27, "preorder_it": 27, "reinsert_nod": 27, "nd_connection_list": 27, "undo": 27, "reversible_remove_child": 27, "remove_child": [27, 51], "restor": [27, 38], "info": 27, "po": [27, 31], "stolen": 27, "lengthen": 27, "steal": 27, "accordingli": 27, "sole": 27, "set_child_nod": [27, 52], "set_children": 27, "sibling_nod": 27, "sister_nod": 27, "head_nod": [27, 31, 52], "rootedg": [27, 55], "adjust_collapsed_head_children_edge_length": 27, "occupi": 27, "longer": [27, 31, 46], "get_adjacent_edg": 27, "polar": 27, "divis": [27, 34, 39], "bisect": [27, 34], "arrai": [27, 31, 34], "membership": [27, 34, 43, 49], "signfic": [27, 34], "till": 27, "unset": [27, 34], "identif": [27, 49, 59], "orienti": 27, "lose": 27, "unnorm": 27, "assess": [27, 34, 57], "quickli": [27, 34], "impos": 27, "waiver": 27, "sign": [27, 57], "risk": 27, "warn": [27, 31, 41, 43, 45, 47, 48, 50, 52, 53, 55], "implos": 27, "occlud": 27, "bitarrai": [27, 34], "bitstr": [27, 34], "signfici": 27, "lsb": [27, 34], "scheme": [27, 34, 49], "0b0001": 27, "0b0010": 27, "0b0100": 27, "0b1000": 27, "msb": 27, "0b10000": 27, "16": [27, 43, 55], "0b00001": 27, "stabil": 27, "strongli": 27, "motiv": 27, "OR": [27, 34, 48], "logic": [27, 31], "AND": 27, "strike": 27, "intuit": 27, "tree_leafset_bitmask": 27, "0b1111": 27, "compile_bipartit": 27, "lowest": 27, "facilit": 27, "_leafset_bitmask": 27, "_tree_leafset_bitmask": 27, "compile_split_bitmask": 27, "compile_tree_leafset_bitmask": 27, "lowest_relevant_bit": 27, "is_compatible_bitmask": 27, "m1": 27, "m2": [27, 57], "fill_bitmask": 27, "is_compatible_with": 27, "is_incompatible_with": 27, "is_leafset_nested_within": 27, "is_nested_within": 27, "is_other_masked_for_tree_leafset": 27, "is_trivi": 27, "divid": [27, 34, 43, 54], "rest": [27, 31, 34], "is_trivial_bitmask": 27, "fewer": [27, 51, 57], "leafset_as_bitstr": 27, "symbol0": 27, "symbol1": 27, "paup": [27, 40, 48], "mr": [27, 57], "bay": [27, 57], "leafset_as_newick_str": 27, "leafset_taxa": 27, "lsb0": 27, "split_as_bitstr": [27, 43, 52], "plot_metr": [27, 51], "show_internal_node_label": 27, "leaf_spacing_factor": 27, "width": [27, 55], "displai": [27, 40, 57], "node_label_compose_fn": [27, 60, 62], "nulledgelengtherror": 27, "with_traceback": 27, "tb": 27, "__traceback__": 27, "calc_plot": 27, "edge_scale_factor": 27, "draw_nod": 27, "plot": [27, 52], "onto": [27, 42, 57], "grid": [27, 57], "expos": [30, 31, 53], "stronger": 31, "rewritten": [31, 32], "ground": [31, 32], "speed": [31, 57], "reliabl": [31, 33, 34], "renam": 31, "albeit": 31, "exhort": 31, "treecalc": 31, "submodul": 31, "criterion": 31, "treesplit": 31, "subsum": 31, "treesum": 31, "constrast": [31, 42], "opaqu": 31, "meant": [31, 39], "greatli": [31, 57], "slow": [31, 47, 50], "benefit": 31, "has_taxon": 31, "has_taxa": 31, "took": [31, 39], "case_insensit": 31, "caseless": 31, "bring": 31, "emit": 31, "conform": [31, 55], "nois": 31, "temporari": 31, "upcom": [31, 33], "soon": 31, "expedi": 31, "_head_nod": 31, "_tail_nod": 31, "book": [31, 43], "potenti": [31, 37], "node_set": 31, "edge_set": 31, "additon": 31, "tree_source_it": 31, "multi_tree_source_it": 31, "suppress_external_taxon_label": 31, "suppress_external_node_label": 31, "suppress_leaf_taxon_label": [31, 42, 60, 62], "suppress_leaf_node_label": [31, 42, 60, 62], "as_root": 31, "default_as_root": 31, "intrepret": 31, "uncondition": [31, 51], "annotations_as_nhx": [31, 55, 60, 62], "suppress_annot": [31, 60, 62], "sudo": [32, 57], "repo": 32, "wide": [32, 47], "folk": [32, 57], "highli": [32, 38, 43], "grab": 32, "goodi": 32, "offer": [32, 52], "usuali": 32, "tweak": 32, "hood": 32, "fourth": 32, "architectur": 32, "certainli": [32, 48, 57], "crazili": 32, "bigger": 32, "thousand": 32, "million": 32, "minut": 32, "dai": 32, "percol": 32, "stupend": 32, "amount": [32, 53], "abil": 32, "dozen": 32, "nasti": 32, "dealt": 32, "kill": 32, "big": 32, "farm": 32, "quarantin": 32, "zone": 32, "live": 32, "munch": 32, "mock": 32, "advertis": 32, "em": 32, "goal": 32, "routin": [32, 53], "ever": 32, "extens": [32, 33], "auto": 32, "processor": [32, 57], "progress": [32, 57], "eas": [32, 53], "glossari": 32, "oversubscrib": [32, 57], "terminolog": 32, "soup": 32, "character": 32, "foundat": 33, "robust": [33, 55], "priorit": 33, "friendli": 33, "experienc": 33, "novic": [33, 48], "bioinformatician": 33, "alik": 33, "portabl": 33, "versatil": 33, "founder": 33, "driven": 33, "broader": 33, "discuss": [33, 34, 38, 39, 55, 57], "intend": 33, "futur": [33, 43, 45, 48, 50, 52, 53, 55], "interoper": 33, "perhap": 33, "jit": 33, "compil": [33, 57], "integr": [33, 43], "emerg": 33, "introduc": 33, "phylostatist": 33, "background": [34, 40], "computation": 34, "inde": [34, 38, 57], "servic": 34, "bi": 34, "short": [34, 52, 53, 57], "view": [34, 40, 42], "schemat": 34, "cluster": [34, 56], "abbabbaa": 34, "explain": 34, "sai": [34, 57], "Then": [34, 52, 57], "succintli": 34, "usefulli": 34, "01101100": 34, "108": 34, "essenc": 34, "exact": 34, "bitwis": 34, "00001": 34, "11111": 34, "00010": 34, "11110": 34, "00100": 34, "11100": 34, "01000": 34, "11000": 34, "10000": [34, 53, 55, 57], "ing": [34, 48], "complement": 34, "word": [34, 57], "togeth": [34, 57], "complic": 34, "statement": [34, 38, 48, 51], "00011": 34, "00111": 34, "absent": 34, "placement": 34, "wholli": 34, "artifactu": 34, "imposs": [34, 48, 50], "robustli": 34, "mayb": 34, "unpredict": 34, "unmodif": 34, "lost": 34, "unstabl": 34, "accur": 34, "leaf_bitmask": 34, "acces": 34, "ed": 34, "split_bitmask_edge_map": 34, "exploit": 34, "possibli": [34, 57], "inaccess": 34, "patrisit": 34, "idiom": 34, "snippet": [34, 55], "show": [34, 42, 52, 53, 54, 55], "target_tre": 34, "sup_tre": 34, "boots1": [34, 57], "boots2": [34, 57], "boostraps3": 34, "simpler": 34, "But": [34, 52], "mle1": 34, "mle2": 34, "counts1": 34, "counts2": 34, "count1": 34, "count2": 34, "meaningfulli": 34, "rna": [35, 39], "nucleodtid": 35, "amino": 35, "acid": 35, "back": [35, 45, 57], "again": [35, 38, 48, 49, 51, 53, 55, 57], "letter": [35, 57], "protein": [35, 39, 58, 63], "dna_state_alphabet": 35, "rna_state_alphabet": 35, "grain": [35, 38], "pythonidae_cytb": [35, 36, 38], "prot1": 35, "pythonidae_morph": [35, 36], "concatent": 35, "d1": [35, 47, 49], "primat": [35, 38, 39, 42], "1stpo": 35, "d2": [35, 49], "2ndpo": 35, "d3": 35, "3rdpo": 35, "d_all": 35, "12": [35, 43, 44, 54], "231": 35, "693": 35, "locus002": 35, "0x101d792d0": 35, "locus000": 35, "0x101d79250": 35, "locus001": 35, "0x101d79290": 35, "concatentate_from_path": 35, "concatentate_from_stream": 35, "cane": 35, "neccessarili": 35, "macaca": [35, 42], "sylvanu": 35, "s4": 35, "s5": 35, "cc": [35, 42], "pythonidae_continu": [35, 38], "0230088801573": 35, "327376261257": 35, "483676644025": 35, "0868649474847": 35, "898": 35, "repr": 35, "0x10134a290": 35, "0x10134a350": 35, "0x101b4a290": 35, "0x101b4a350": 35, "aagcttcataggagcaaccattct": 35, "seen": [35, 39, 46, 51, 55], "save": [36, 40, 42, 57], "writer": 36, "cytb": [36, 38], "post_tre": [36, 46], "run1": [36, 38, 46, 54, 57], "200": [36, 46, 54, 55, 57], "run2": [36, 38, 46, 54, 57], "data_typ": [36, 38, 48, 58, 63], "pythonidae_aa": [36, 38], "pythonidae_tre": 36, "pythonidae_combin": [36, 38], "bind": 36, "design": [37, 54], "tree_list11": 37, "tree_list1": [37, 46, 48], "programmat": [37, 40], "chapter": 37, "ingest": 37, "mcmc1": [37, 50, 57], "mcmc2": [37, 50, 57], "suppress_edge_length": [37, 60, 62], "mb": [38, 54], "run3": [38, 46, 54, 57], "run4": [38, 54, 57], "dnafasta": [38, 48], "treelist1": [38, 50], "literalinclud": 38, "ds4": 38, "effort": [38, 57], "suitabl": [38, 45, 50], "snake": 38, "pythonidae_morpholog": 38, "regiu": [38, 43, 48, 52, 55], "previou": [38, 39, 48, 52, 55, 57], "few": 38, "fifth": 38, "genbankdna": 39, "genbankrna": 39, "genbankprotein": 39, "gi": 39, "interop": [39, 41, 45, 47], "gb_dna": 39, "eu105474": 39, "eu105475": 39, "gb": 39, "158930545": 39, "homo": [39, 42], "sapien": 39, "ach": 39, "region": 39, "t864": 39, "genom": 39, "158930546": 39, "arara": 39, "genbankaccessionrecord": 39, "qualifi": 39, "primary_access": 39, "taxonomi": [39, 55], "feature_t": 39, "generate_char_matrix": 39, "dimens": [39, 42, 48, 49], "taxlabel": [39, 42, 48, 49], "nchar": [39, 48, 49], "494": 39, "datatyp": [39, 48, 49, 55], "matchchar": [39, 48, 49], "tctcttatca": 39, "queri": 39, "nuccor": 39, "pend": 39, "id_rang": 39, "prepend": [39, 55], "158930550": 39, "158930547": 39, "158930548": 39, "158930549": 39, "105474": 39, "105479": 39, "eu": 39, "tp": 39, "eu105476": 39, "eu105477": 39, "eu105478": 39, "eu105479": 39, "verifi": 39, "105475": 39, "105478": 39, "acquire_rang": 39, "suppli": [39, 57], "verif": 39, "105480": 39, "gb_rec": 39, "locu": 39, "moltyp": 39, "stranded": 39, "update_d": 39, "create_d": 39, "accession_vers": 39, "osi_kei": 39, "osi_valu": 39, "other_seq_id": 39, "ref": 39, "consrtm": 39, "medline_id": 39, "pubmed_id": 39, "remark": 39, "linear": 39, "doubl": [39, 55], "pri": 39, "27": 39, "nov": 39, "2007": 39, "human": 39, "eukaryota": 39, "metazoa": 39, "chordata": 39, "craniata": 39, "vertebrata": 39, "eutel": 39, "alternativ": 39, "submiss": 39, "submit": 39, "17": [39, 43], "mol_typ": 39, "db_xref": 39, "9606": 39, "misc_featur": 39, "tctcttatcaaacta": 39, "label_compon": 39, "label_component_separ": 39, "gb_to_taxon_fn": 39, "_": [39, 43, 48], "eu105474_homo_sapien": 39, "eu105475_homo_sapien": 39, "def": [39, 49, 51, 52, 53], "gb_to_taxon": 39, "gi158930545": 39, "gi158930546": 39, "bribri": 39, "guatuso": 39, "guaymi": 39, "gb_id": 39, "set_taxon_attr": 39, "set_seq_attr": 39, "sidx": 39, "deflin": 39, "add_ref_annotation_to_taxa": 39, "add_ref_annotation_to_seq": 39, "iso": [39, 55], "8859": [39, 55], "xsi": [39, 55], "schemaloc": [39, 55], "xmln": [39, 55], "dcterm": 39, "xmlschema": [39, 55], "d4320533416": 39, "d4323884688": 39, "resourcemeta": [39, 55], "href": [39, 55], "ncbi": 39, "nlm": 39, "nih": 39, "gov": 39, "d4323884752": 39, "d4323884816": 39, "d4323990736": 39, "d4320533856": 39, "d4322811536": 39, "d4322811600": 39, "tctcttatcaaac": 39, "d4320534384": 39, "d4322811664": 39, "d4322917584": 39, "add_full_annotation_to_taxa": 39, "add_full_annotation_to_seq": 39, "dtd": 39, "insd_insdseq": 39, "mod": 39, "literalmeta": [39, 55], "insdseq_locu": 39, "d4323884880": 39, "insdseq_length": 39, "d4323884944": 39, "insdseq_moltyp": 39, "d4323885008": 39, "insdseq_topologi": 39, "d4323901520": 39, "insdseq_stranded": 39, "d4323901584": 39, "insdseq_divis": 39, "d4323901648": 39, "insdseq_upd": 39, "d4323901712": 39, "insdseq_cr": 39, "d4323901776": 39, "insdseq_definit": 39, "d4323901840": 39, "insdseq_primari": 39, "accesison": 39, "d4323901904": 39, "insdseq_access": 39, "d4323901968": 39, "otherseqid": 39, "d4323902032": 39, "d4323902160": 39, "d4323902224": 39, "insdseq_sourc": 39, "d4323902096": 39, "insdseq_organ": 39, "d4323902288": 39, "insdseq_taxonomi": 39, "euteleostomi": 39, "mammalia": 39, "eutheria": 39, "euarchontoglir": 39, "haplorrhini": 39, "catarrhini": 39, "hominida": 39, "d4323902352": 39, "insdseq_refer": 39, "d4323902416": 39, "insdreference_refer": 39, "d4323902544": 39, "d4323902672": 39, "insdreference_posit": 39, "d4323902736": 39, "insdreference_titl": 39, "d4323902800": 39, "insdreference_journ": 39, "natl": 39, "acad": 39, "sci": 39, "104": 39, "17614": 39, "17619": 39, "d4323902864": 39, "insdreference_pubm": 39, "17978179": 39, "d4323902928": 39, "d4323902608": 39, "d4323903056": 39, "d4323903120": 39, "d4323903184": 39, "laboratorio": 39, "de": 39, "biologia": 39, "genomica": 39, "pontificia": 39, "universidad": 39, "catolica": 39, "rio": 39, "grand": 39, "sul": 39, "av": 39, "ipiranga": 39, "6681": 39, "predio": 39, "12c": 39, "sala": 39, "172": 39, "porto": 39, "alegr": 39, "90619": 39, "900": 39, "brazil": 39, "d4323903248": 39, "insdseq_featur": 39, "d4323902480": 39, "d4323903312": 39, "insdfeature_kei": 39, "d4323903440": 39, "insdfeature_loc": 39, "d4323903504": 39, "insdfeature_qu": 39, "d4323903376": 39, "d4323903632": 39, "d4323903696": 39, "d4323903760": 39, "d4323903824": 39, "d4323903888": 39, "d4323903568": 39, "d4323904016": 39, "d4323904080": 39, "d4323903952": 39, "d4323904208": 39, "d4324005904": 39, "d4324006032": 39, "d4324006096": 39, "introduct": [40, 56], "nativ": [40, 47, 50, 51, 53], "deroot": 40, "phylogeograph": [40, 54], "scenario": [40, 54], "analys": [40, 57], "databas": 40, "acquir": 40, "genebank": 40, "utf": [41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55], "estimate_tre": [41, 45], "tree_est_criterion": 41, "num_subst": 41, "unequal_base_freq": 41, "gamma_r": 41, "prop_invar": 41, "est_tre": 41, "est_model": 41, "estimate_model": 41, "readi": [42, 53], "analyz": [42, 57], "ctree1": 42, "row_str": 42, "ljust": 42, "hp": 42, "85263000": 42, "38500000": 42, "48342000": 42, "10500000": 42, "hpm": 42, "20037840": 42, "34560000": 42, "48239000": 42, "21560000": 42, "hpma": 42, "78082358": 42, "60190555": 42, "17222840": 42, "22190555": 42, "18372461": 42, "37574347": 42, "25050358": 42, "visual": [42, 52, 57], "cidx": 42, "suppress_internal_taxon_label": [42, 60, 62], "suppress_internal_node_label": [42, 60, 62], "09434": 42, "61092": 42, "85263": 42, "28": 42, "37024": 42, "49": [42, 57], "2003784": 42, "13": [42, 43, 49, 57], "02815": 42, "62": 42, "78082357912": 42, "38": 42, "46968": 42, "1837246134": 42, "74493": 42, "3322": 42, "038565": 42, "3673": 42, "7432084": 42, "89037": 42, "43796714996": 42, "30259": 42, "01135659943": 42, "menu": 42, "easier": [42, 43, 52], "pic_tre": 42, "pongo": 42, "atel": 42, "galago": 42, "pic_1": 42, "42": [42, 51, 55], "105": [42, 51], "385": 42, "745933254387": 42, "48342": 42, "875": 42, "2156": 42, "3456": 42, "58474156959": 42, "48239": 42, "9656": 42, "221905550953": 42, "601905550953": 42, "19292629182": 42, "1722284": 42, "60190555095": 42, "37574347039": 42, "35831889583": 42, "25050357912": 42, "pic_2": 42, "17988971592": 42, "41273": 42, "717612470209": 42, "671265": 42, "867896862104": 42, "8528384": 42, "897060422518": 42, "13537714996": 42, "invalid": [42, 55], "dubiou": 42, "14": [43, 44, 55], "160": [43, 48, 50, 52, 53, 55], "mle_tre": [43, 50], "protect": 43, "inadver": 43, "transform": 43, "python_regiu": [43, 48, 57], "idx1": [43, 52], "weighted_patristic_dist": [43, 52], "unweighted_patristic_dist": [43, 52], "reduc": [43, 57], "assemblag": 43, "assembalg": 43, "artifici": [43, 52], "community_taxa": 43, "realist": 43, "phylogeny_str": 43, "spa": 43, "spb": 43, "67": 43, "spc": 43, "08": 43, "spd": 43, "spe": 43, "spf": 43, "40": [43, 57], "spg": 43, "sph": 43, "04": [43, 55], "spi": 43, "spj": 43, "00": 43, "60": 43, "spk": 43, "spl": 43, "spm": 43, "spn": 43, "37": 43, "spo": 43, "79": 43, "assemblage_data_table_str": 43, "c1": [43, 49], "c2": [43, 49], "23": [43, 44], "c3": [43, 49], "30": [43, 55], "c4": [43, 49], "20": [43, 50, 51, 54, 57], "c5": [43, 49], "35": 43, "assemblage_data": 43, "row_nam": 43, "row_name_it": 43, "col_nam": 43, "column_name_it": 43, "19428571429": 43, "61142857143": 43, "88666666667": 43, "06666666667": 43, "06166666667": 43, "91066666667": 43, "108333333333": 43, "namedtupl": 43, "assemblage_nam": 43, "member_label": 43, "member_taxa": 43, "results_mpd": 43, "inspect": [43, 52], "zip": [43, 48, 50, 52], "42344634503": 43, "982": 43, "917064662164": 43, "769722690565": 43, "87070720087": 43, "229": 43, "99810309955": 43, "unhappi": 43, "co": 43, "ordin": 43, "ordereddict": 43, "somewhat": [43, 57], "populationpairsummarystatist": 44, "instantati": 44, "average_number_of_pairwise_differences_between": 44, "average_number_of_pairwise_differences_within": 44, "average_number_of_pairwise_differences_net": 44, "wakeleys_psi": 44, "wakelei": 44, "psi": 44, "stickleback": 44, "eastern": 44, "pacif": [44, 55], "epac": 44, "western": 44, "wpac": 44, "p1": 44, "p2": 44, "orti1994": 44, "come": [44, 48], "raxmlrunn": 45, "lighweight": 45, "gtrcat": 45, "rx": 45, "raxml_arg": 45, "bfg": 45, "invari": 45, "substitutio": 45, "250": 45, "gtrcati": 45, "obvious": 45, "polish": 45, "Not": [46, 56], "tree3": [46, 51, 52], "tree_list2": [46, 48], "tree_list3": 46, "famili": 46, "dispatch": 46, "800": 46, "1600": 46, "2400": 46, "varieti": [46, 47, 53], "xx": 46, "rebind": 46, "dna_character_matrix": 46, "further": [46, 57], "advantag": 47, "seqgen": 47, "straightforward": [47, 57], "pretti": [47, 57], "jc": 47, "d0": [47, 57], "scale_branch_len": 47, "char_model": 47, "gtr": [47, 55], "state_freq": 47, "general_r": 47, "world": [48, 51, 52], "deme": 48, "higher": [48, 53], "literatur": [48, 54], "subunit": 48, "fragment": [48, 53, 54, 55], "shotgun": 48, "assai": 48, "proven": 48, "inadvent": 48, "nonetheless": 48, "tree_str1": 48, "nd1": [48, 52], "nd2": [48, 52], "ok": 48, "tree_str2": 48, "ds2": 48, "taxonnamespaceidentityerror": [48, 54], "quirk": 48, "idiosyncraci": [48, 57], "dictat": 48, "nexus1": 48, "python_seba": 48, "acgta": 48, "fasta1": 48, "aaaa": 48, "0x43b4e0": 48, "taxonnamespace4437216": 48, "0x22867b0": 48, "taxon36202416": 48, "0x2286810": 48, "taxon36202512": 48, "seba": [48, 52, 55], "0x22867d0": 48, "taxon36202448": 48, "0x2286830": 48, "taxon36202544": 48, "confusingli": 48, "mind": [48, 57], "bear": 48, "0x43c780": 48, "taxonnamespace4441984": 48, "0x2386770": 48, "taxon37250928": 48, "0x2386790": 48, "taxon37250960": 48, "simplest": 48, "lexic": 48, "gotcha": 48, "taxonnamespace5736800": 48, "dnacharactermatrix37505040": 48, "dnacharactermatrix37504848": 48, "reli": [49, 57], "seqstr": 49, "a1": 49, "a2": 49, "a3": 49, "b2": 49, "b3": 49, "acctttg": 49, "atctttg": 49, "acccttg": 49, "acaaaag": 49, "accaaag": 49, "parit": 49, "membership_func": 49, "membership_attr_nam": 49, "membership_dict": 49, "membership_list": 49, "mf": 49, "tax_part": 49, "0x101116838": 49, "taxonnamespace4312885304": 49, "0x101116788": 49, "taxonnamespace4312885128": 49, "0x101116730": 49, "taxonnamespace4312885040": 49, "0x1011167e0": 49, "taxonnamespace4312885216": 49, "0x1011166d8": 49, "taxonnamespace4312884952": 49, "0x1011165d0": 49, "taxonnamespace4312884688": 49, "0x1011169f0": 49, "taxonnamespace4312885744": 49, "0x101116680": 49, "taxonnamespace4312884864": 49, "tax_pop_label_map": 49, "0x1011166e8": 49, "0x1011165f0": 49, "0x1011169f1": 49, "0x101116620": 49, "0x10069f838": 49, "0x10069fba8": 49, "0x101116520": 49, "0x1011164c8": 49, "taxonnamespace4301912120": 49, "taxonnamespace4301913000": 49, "taxonnamespace4312884512": 49, "taxonnamespace4312884424": 49, "bd0301": [50, 54], "first_10_tre": 50, "last_10_tre": 50, "propog": 50, "tx": 50, "did": [50, 53], "original_tree_taxon_namespac": 50, "treelist2": 50, "treelist3": 50, "everyth": [50, 52], "tx1": [50, 52], "tx2": [50, 52], "beast": [50, 54, 55, 57], "burnin": [50, 54, 57], "source_fil": 50, "mcmc3": [50, 57], "mcmc4": [50, 57], "tree_idx": [50, 54], "mcmc_tree": 50, "magnitud": [50, 57], "low": 51, "comparis": 51, "postpon": 51, "rehash": 51, "unspecifi": [51, 55], "mle_root": 51, "is_unroot": 51, "rooted": 51, "broad": [51, 55], "tree_str": 51, "node_d": 51, "outgroup": [51, 57], "midpoint": [51, 57], "82": 51, "74": 51, "64": 51, "045": 51, "75": [51, 57], "light": [51, 52], "hello": [51, 52], "blue": [51, 52, 55], "tast": [51, 52], "sweet": [51, 52], "original_nod": [51, 52], "morelia": [51, 54, 55], "dramat": 51, "timeit": 51, "taxa_to_prun": 51, "timer": 51, "00191879272461": 51, "000579190254211": 51, "morelia_taxa": 51, "morelia_label": 51, "non_morelia_taxa": 51, "non_morelia_label": 51, "ourselv": 51, "phylonod": 51, "preferenti": 51, "phylotre": 51, "cl": 51, "concern": 51, "neccessari": 51, "nd3": 52, "vist": 52, "center": 52, "process_nod": 52, "gauss": [52, 53], "clearer": 52, "breadth": 52, "proceed": 52, "evolve_char": 52, "multifurc": 52, "mle_len": 52, "find_taxon_nod": 52, "antaresia": [52, 54, 55], "maculosa": [52, 54, 55], "curtu": [52, 55], "moluru": [52, 55], "mention": [52, 57], "ch1": 52, "ch2": 52, "ch3": 52, "ch4": 52, "ch5": 52, "ch6": 52, "t6": [53, 54], "t10": 53, "traceback": [53, 54], "stdin": [53, 54], "188": 53, "birth_death": 53, "eventu": 53, "shift": 53, "temporarili": 53, "br": 53, "randint": [53, 55], "num_period": 53, "pure_kingman": 53, "1n": 53, "z1": 53, "z2": 53, "z3": 53, "z4": 53, "z5": 53, "z6": 53, "z7": 53, "z8": 53, "contained_coalesc": 53, "Such": 53, "truncat": 53, "genealogi": 53, "throughout": 53, "sp": 53, "100000": [53, 54], "easiest": [53, 54], "create_contained_taxon_map": [53, 54], "sp_tree_str": 53, "sp_tree": 53, "gene_to_species_map": 53, "containing_taxon_namespac": [53, 54], "num_contain": [53, 54], "certain": [53, 54], "hypothes": 53, "demograph": 53, "underw": [53, 54], "wise": [53, 54], "vicari": [53, 54], "num_rep": [53, 54], "stepwise_tree_str": [53, 54], "120000": [53, 54], "80000": [53, 54], "40000": [53, 54], "frag_tree_str": [53, 54], "containing_taxa": [53, 54], "stepwise_tre": [53, 54], "frag_tre": [53, 54], "genes_to_speci": [53, 54], "domain_taxon_namespac": [53, 54], "rep": [53, 54], "gene_tree1": [53, 54], "gene_tree2": [53, 54], "stepwise_deep_co": [53, 54], "stepwise_out": [53, 54], "stepwis": [53, 54], "frag_deep_co": [53, 54], "frag_out": [53, 54], "frag": [53, 54], "calcuat": 54, "rapid": [54, 57, 58], "critic": 54, "archi": 54, "faith": 54, "cranston": 54, "ptp": 54, "tree_length": 54, "crit_index_95": 54, "crit_index_99": 54, "maculosa_childreni_ag": 54, "childreni": [54, 55], "ltt": 54, "hiv1": 54, "total_tim": 54, "current_tim": 54, "num_lineag": 54, "wast": 54, "yielder": 54, "tree_stat": 54, "defaultdict": 54, "pbh": 54, "pbhg": 54, "callabl": 54, "85": 54, "221": 54, "0x10052d310": 54, "0x101572210": 54, "too": 54, "unrooted_tree1": 54, "unrooted_tree2": 54, "rooted_tree1": 54, "rooted_tree2": 54, "rooted1": 54, "unrooted2": 54, "unrooted1": 54, "rooted2": 54, "161175": 54, "392293": 54, "104381": 54, "075411": 54, "028969": 54, "065840": 54, "170221": 54, "383247": 54, "971031": 54, "22326363775": 54, "50": [54, 55, 57], "tree_fil": 54, "con_tre": 54, "amethistina": [54, 55], "tracya": [54, 55], "split_leav": 54, "ntree": 54, "msst": 54, "unfortun": [54, 57], "confus": 54, "mct": 54, "slatkin": 54, "1989": 54, "ampersand": 55, "comemnt": 55, "trip": 55, "abbrevi": 55, "sy": 55, "sample1": 55, "bibliographiccit": 55, "wiklund": 55, "altamira": 55, "glover": 55, "smith": 55, "baco": 55, "dahlgren": 55, "2012": 55, "biodivers": 55, "ophryotrocha": 55, "annelida": 55, "dorvilleida": 55, "six": 55, "sea": 55, "whale": 55, "fall": 55, "wood": 55, "north": 55, "east": 55, "changenot": 55, "wed": 55, "jun": 55, "06": [55, 57], "02": [55, 57], "edt": 55, "publicationnam": 55, "creator": 55, "volum": 55, "historynot": 55, "nexmldocumentwrit": 55, "645f9132": 55, "rev": 55, "1060": 55, "modificationd": 55, "tb1": 55, "publicationd": 55, "creationd": 55, "09": 55, "polychaeta": 55, "12713": 55, "con": [55, 57], "majrul": 55, "41": [55, 58], "unrat": 55, "isdefinedbi": 55, "s12713": 55, "pythonid": 55, "closematch": 55, "uniprot": 55, "51751": 55, "51752": 55, "51750": 55, "143436": 55, "bredli": 55, "461327": 55, "spilota": 55, "51896": 55, "129332": 55, "clastolepi": 55, "129329": 55, "kinghorni": 55, "129330": 55, "nauta": 55, "129331": 55, "51895": 55, "oenpelliensi": 55, "461329": 55, "51891": 55, "perthensi": 55, "461324": 55, "stimsoni": 55, "461325": 55, "51888": 55, "carinata": 55, "461328": 55, "viridisn": 55, "129333": 55, "viridiss": 55, "apodora": 55, "papuana": 55, "129310": 55, "liasi": 55, "olivaceu": 55, "283338": 55, "fuscu": 55, "129327": 55, "mackloti": 55, "51889": 55, "melanocephalu": 55, "51883": 55, "ramsayi": 55, "461326": 55, "albertisii": 55, "129326": 55, "bothrochilu": 55, "boa": 55, "461341": 55, "boeleni": 55, "129328": 55, "timoriensi": 55, "51753": 55, "reticulatu": 55, "37580": 55, "xenopelti": 55, "unicolor": 55, "196253": 55, "candoia": 55, "aspera": 55, "51853": 55, "loxocemu": 55, "bicolor": 55, "39078": 55, "treeestim": 55, "substitutionmodel": 55, "hot": 55, "01917252": 55, "06241567": 55, "length_quant_5_95": 55, "02461821": 55, "06197141": 55, "01570374": 55, "07787249": 55, "0418470252488": 55, "04091105": 55, "0113086027131": 55, "nhx": 55, "lossi": 55, "x4320340992": 55, "x4320340552": 55, "x4320381904": 55, "floattre": 55, "meta4320379536": 55, "x4320340904": 55, "x4320340464": 55, "x4320377872": 55, "meta4320375440": 55, "x4320381968": 55, "meta4320379472": 55, "en": [55, 58, 60], "wikipedia": [55, 58, 60], "subject_annot": 55, "wire": 55, "8000": 55, "elif": 55, "6000": 55, "medium": 55, "4000": 55, "tini": 55, "x4320344648": 55, "x4320380112": 55, "x4320380432": 55, "x4320380752": 55, "meta4320379792": 55, "x4320381072": 55, "meta4320381328": 55, "x4320381264": 55, "meta4320381392": 55, "x4320344560": 55, "x4320379600": 55, "x4320379856": 55, "5491": 55, "meta4320379280": 55, "x4320379984": 55, "2721": 55, "meta4320379408": 55, "x4320380176": 55, "4627": 55, "meta4320379344": 55, "x4320380304": 55, "7202": 55, "meta4320381456": 55, "x4320380496": 55, "5337": 55, "meta4320379664": 55, "x4320380624": 55, "1478": 55, "meta4320381520": 55, "x4320380816": 55, "1539": 55, "meta4320379728": 55, "x4320380944": 55, "3457": 55, "meta4320381584": 55, "x4320381136": 55, "3895": 55, "meta4320381648": 55, "x4320379920": 55, "x4320380048": 55, "x4320380240": 55, "x4320380368": 55, "x4320380560": 55, "x4320380688": 55, "x4320380880": 55, "x4320381008": 55, "x4320381200": 55, "explictli": 55, "source_uri": 55, "articl": 55, "heathhh2012": 55, "traci": 55, "heath": 55, "john": 55, "huelsenbeck": 55, "molbev": 55, "msr255": 55, "939": 55, "955": 55, "dirichlet": 55, "mbe": 55, "oxfordjourn": 55, "earli": 55, "2011": 55, "abstract": 55, "edutella": 55, "meta4320453648": 55, "meta4320453200": 55, "meta4320453776": 55, "meta4320453328": 55, "meta4320453968": 55, "meta4320453840": 55, "meta4320453904": 55, "meta4320453456": 55, "meta4320453520": 55, "meta4320453584": 55, "meta4320453712": 55, "meta4320461584": 55, "meta4320461648": 55, "meta4320461776": 55, "meta4320461712": 55, "pagerang": 55, "ds_annot": 55, "phylgoenet": 55, "yoder": 55, "yang": 55, "overwrit": 55, "key_func": 55, "value_func": 55, "treatment": 55, "idiosyncrat": 55, "partial": 55, "fragil": 55, "recip": 56, "parametr": 56, "rule": 56, "hpc": 56, "troubleshoot": 56, "prerequisit": 56, "my": 56, "warranti": 56, "acknowledg": 56, "garli": 57, "homepag": 57, "dendropy_homepage_url": 57, "wish": 57, "jan": 57, "dev": 57, "dendropy4": 57, "feea2b0": 57, "stage": 57, "indirectli": 57, "parti": 57, "toolkit": 57, "primarili": 57, "mt": 57, "force_minimum_edge_length": 57, "metainform": 57, "additional_com": 57, "num": 57, "unpack": 57, "treefile1": 57, "treefile2": 57, "treefile3": 57, "f0": 57, "b200": 57, "multiprocess": 57, "invoc": 57, "anywher": 57, "redirect": 57, "unix": 57, "myself": 57, "myproject": 57, "phylo1": 57, "goe": 57, "phrase": 57, "dash": 57, "paramat": 57, "o1": 57, "option1": 57, "option2": 57, "credbl": 57, "msct": 57, "70": 57, "boot": 57, "bother": 57, "unprefix": 57, "beast1": 57, "beast2": 57, "beast3": 57, "fossil": 57, "viral": 57, "bacteri": 57, "past": 57, "sloppi": 57, "json": 57, "unprotect": 57, "mandat": 57, "x1": 57, "linearli": 57, "hardwar": 57, "octo": 57, "t40": 57, "launch": 57, "realiti": 57, "nanosecond": 57, "oversubscript": 57, "consider": 57, "workload": 57, "difficult": 57, "schedul": 57, "softwar": 57, "tell": 57, "sun": 57, "job": 57, "cwd": 57, "mpi": 57, "m4": 57, "sge": 57, "alloc": 57, "pb": 57, "torqu": 57, "ncpu": 57, "pbs_o_workdir": 57, "queue": 57, "administr": 57, "wall": 57, "finish": 57, "500th": 57, "5000th": 57, "10000th": 57, "g10000": 57, "whenev": 57, "altogeth": 57, "g0": 57, "presuppos": 57, "biggest": 57, "face": 57, "box": 57, "strong": 57, "motivi": 57, "worth": 57, "me": 57, "click": 57, "mac": 57, "platform": 57, "danc": 57, "pai": 57, "coupl": 57, "subdirectori": 57, "environment": 57, "pythonpath": 57, "symlink": 57, "crash": 57, "bootscor": 57, "spam": 57, "datafil": 57, "fasta_format": 58, "lipman": 58, "dj": 58, "pearson": 58, "wr": 58, "227": 58, "4693": 58, "1435": 58, "1126": 58, "2983426": 58, "fa": [58, 62], "0123456789": [58, 62, 63], "templat": 59, "washington": 60, "newicktre": 60, "newick_format": 60, "newick_doc": 60, "edge_length_typ": [60, 62], "finish_node_fn": [60, 62], "suppress_leaf_node_taxa": [60, 62], "terminating_semicolon_requir": [60, 62], "data_set": [60, 61, 62], "outputfil": 60, "suppress_root": [60, 62], "unquoted_underscor": [60, 62], "taxon_token_map": 60, "suppress_item_com": [60, 62], "node_label_element_separ": [60, 62], "edge_label_compose_fn": [60, 62], "default_namespac": 61, "markup_as_sequ": 61, "suppress_unreferenced_taxon_namespac": [61, 62], "suppress_taxa_block": 62, "suppress_block_titl": 62, "file_com": 62, "preamble_block": 62, "supplemental_block": 62, "allow_multiline_com": 62, "translate_tree_taxa": 62, "continuous_character_state_value_format_fn": 62, "discrete_character_state_value_format_fn": 62, "strict": 63, "interleav": 63, "multispace_delimit": 63, "underscore_to_spac": 63, "ignore_invalid_char": 63, "spaces_to_underscor": 63, "force_unique_taxon_label": 63, "suppress_missing_taxa": 63}, "objects": {"dendropy.calculate": [[16, 0, 0, "-", "phylogeneticdistance"], [18, 0, 0, "-", "popgenstat"], [19, 0, 0, "-", "probability"], [22, 0, 0, "-", "statistics"], [25, 0, 0, "-", "treecompare"], [26, 0, 0, "-", "treemeasure"], [28, 0, 0, "-", "treescore"]], "dendropy.calculate.phylogeneticdistance": [[16, 1, 1, "", "PhylogeneticDistanceMatrix"]], "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix": [[16, 2, 1, "", "as_data_table"], [16, 2, 1, "", "assemblage_membership_definitions_from_csv"], [16, 2, 1, "", "compile_from_tree"], [16, 2, 1, "", "distance"], [16, 2, 1, "", "distances"], [16, 2, 1, "", "distinct_taxon_pair_iter"], [16, 2, 1, "", "from_csv"], [16, 2, 1, "", "from_tree"], [16, 2, 1, "", "mean_nearest_taxon_distance"], [16, 2, 1, "", "mean_pairwise_distance"], [16, 2, 1, "", "mrca"], [16, 2, 1, "", "nj_tree"], [16, 2, 1, "", "path_edge_count"], [16, 2, 1, "", "path_edges"], [16, 2, 1, "", "patristic_distance"], [16, 2, 1, "", "shuffle_taxa"], [16, 2, 1, "", "standardized_effect_size_mean_nearest_taxon_distance"], [16, 2, 1, "", "standardized_effect_size_mean_pairwise_distance"], [16, 2, 1, "", "sum_of_distances"], [16, 2, 1, "", "taxon_iter"], [16, 2, 1, "", "upgma_tree"]], "dendropy.calculate.popgenstat": [[18, 3, 1, "", "average_number_of_pairwise_differences"], [18, 3, 1, "", "derived_state_matrix"], [18, 3, 1, "", "nucleotide_diversity"], [18, 3, 1, "", "num_segregating_sites"], [18, 3, 1, "", "tajimas_d"], [18, 3, 1, "", "unfolded_site_frequency_spectrum"], [18, 3, 1, "", "wattersons_theta"]], "dendropy.calculate.probability": [[19, 3, 1, "", "binomial_rv"], [19, 3, 1, "", "chisq_pdf"], [19, 3, 1, "", "exp_pdf"], [19, 3, 1, "", "geometric_rv"], [19, 3, 1, "", "hypergeometric_pmf"], [19, 3, 1, "", "num_poisson_events"], [19, 3, 1, "", "poisson_pmf"], [19, 3, 1, "", "poisson_rv"], [19, 3, 1, "", "sample_multinomial"], [19, 3, 1, "", "weighted_choice"], [19, 3, 1, "", "weighted_index_choice"], [19, 3, 1, "", "z_pmf"]], "dendropy.calculate.statistics": [[22, 1, 1, "", "FishersExactTest"], [22, 3, 1, "", "empirical_cdf"], [22, 3, 1, "", "empirical_hpd"], [22, 3, 1, "", "mean_and_population_variance"], [22, 3, 1, "", "mean_and_sample_variance"], [22, 3, 1, "", "median"], [22, 3, 1, "", "mode"], [22, 3, 1, "", "quantile_5_95"], [22, 3, 1, "", "rank"], [22, 3, 1, "", "summarize"], [22, 3, 1, "", "variance_covariance"]], "dendropy.calculate.statistics.FishersExactTest": [[22, 2, 1, "", "left_tail_p"], [22, 2, 1, "", "probability_of_table"], [22, 2, 1, "", "right_tail_p"], [22, 2, 1, "", "two_tail_p"]], "dendropy.calculate.treecompare": [[25, 3, 1, "", "euclidean_distance"], [25, 3, 1, "", "false_positives_and_negatives"], [25, 3, 1, "", "find_missing_bipartitions"], [25, 3, 1, "", "mason_gamer_kellogg_score"], [25, 3, 1, "", "robinson_foulds_distance"], [25, 3, 1, "", "symmetric_difference"], [25, 3, 1, "", "unweighted_robinson_foulds_distance"], [25, 3, 1, "", "weighted_robinson_foulds_distance"]], "dendropy.calculate.treemeasure": [[26, 3, 1, "", "B1"], [26, 3, 1, "", "N_bar"], [26, 1, 1, "", "PatristicDistanceMatrix"], [26, 3, 1, "", "colless_tree_imbalance"], [26, 3, 1, "", "patristic_distance"], [26, 3, 1, "", "pybus_harvey_gamma"], [26, 3, 1, "", "sackin_index"], [26, 3, 1, "", "treeness"]], "dendropy.datamodel": [[6, 0, 0, "-", "basemodel"], [8, 0, 0, "-", "charmatrixmodel"], [9, 0, 0, "-", "charstatemodel"], [23, 0, 0, "-", "taxonmodel"], [24, 0, 0, "-", "treecollectionmodel"], [27, 0, 0, "-", "treemodel"]], "dendropy.datamodel.basemodel": [[6, 1, 1, "", "Annotable"], [6, 1, 1, "", "Annotation"], [6, 1, 1, "", "AnnotationSet"], [6, 1, 1, "", "DataObject"]], "dendropy.datamodel.basemodel.Annotable": [[6, 2, 1, "", "__copy__"], [6, 2, 1, "", "copy_annotations_from"], [6, 2, 1, "", "deep_copy_annotations_from"]], "dendropy.datamodel.basemodel.Annotation": [[6, 2, 1, "", "clone"], [6, 2, 1, "", "copy_annotations_from"], [6, 2, 1, "", "deep_copy_annotations_from"]], "dendropy.datamodel.basemodel.AnnotationSet": [[6, 2, 1, "", "__add__"], [6, 2, 1, "", "__contains__"], [6, 2, 1, "", "__delitem__"], [6, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__iter__"], [6, 2, 1, "", "__reversed__"], [6, 2, 1, "", "__setitem__"], [6, 2, 1, "", "add"], [6, 2, 1, "", "add_bibtex"], [6, 2, 1, "", "add_bound_attribute"], [6, 2, 1, "", "add_citation"], [6, 2, 1, "", "add_new"], [6, 2, 1, "", "discard"], [6, 2, 1, "", "drop"], [6, 2, 1, "", "find"], [6, 2, 1, "", "findall"], [6, 2, 1, "", "get_value"], [6, 2, 1, "", "index"], [6, 2, 1, "", "next"], [6, 2, 1, "", "pop"], [6, 2, 1, "", "remove"], [6, 2, 1, "", "require_value"], [6, 2, 1, "", "update"], [6, 2, 1, "", "values_as_dict"]], "dendropy.datamodel.basemodel.DataObject": [[6, 2, 1, "", "clone"], [6, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.charmatrixmodel": [[8, 1, 1, "", "CharacterDataSequence"], [8, 1, 1, "", "CharacterMatrix"], [8, 1, 1, "", "CharacterSubset"], [8, 1, 1, "", "CharacterType"], [8, 1, 1, "", "ContinuousCharacterMatrix"], [8, 1, 1, "", "DnaCharacterMatrix"], [8, 1, 1, "", "InfiniteSitesCharacterMatrix"], [8, 1, 1, "", "ProteinCharacterMatrix"], [8, 1, 1, "", "RestrictionSitesCharacterMatrix"], [8, 1, 1, "", "RnaCharacterMatrix"], [8, 1, 1, "", "StandardCharacterMatrix"]], "dendropy.datamodel.charmatrixmodel.CharacterDataSequence": [[8, 2, 1, "", "annotations_at"], [8, 2, 1, "", "append"], [8, 2, 1, "", "cell_iter"], [8, 2, 1, "", "character_type_at"], [8, 2, 1, "", "extend"], [8, 2, 1, "", "has_annotations_at"], [8, 2, 1, "", "insert"], [8, 2, 1, "", "set_annotations_at"], [8, 2, 1, "", "set_at"], [8, 2, 1, "", "set_character_type_at"], [8, 2, 1, "", "symbols_as_list"], [8, 2, 1, "", "symbols_as_string"], [8, 2, 1, "", "value_at"], [8, 2, 1, "", "values"]], "dendropy.datamodel.charmatrixmodel.CharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.CharacterType": [[8, 5, 1, "", "state_alphabet"], [8, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix": [[8, 2, 1, "", "__delitem__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__iter__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "__setitem__"], [8, 2, 1, "", "add_character_subset"], [8, 2, 1, "", "add_sequences"], [8, 2, 1, "", "as_string"], [8, 4, 1, "", "character_sequence_type"], [8, 2, 1, "", "clear"], [8, 2, 1, "", "clone"], [8, 2, 1, "", "coerce_values"], [8, 2, 1, "", "concatenate"], [8, 2, 1, "", "concatenate_from_paths"], [8, 2, 1, "", "concatenate_from_streams"], [8, 2, 1, "", "copy_annotations_from"], [8, 2, 1, "", "deep_copy_annotations_from"], [8, 2, 1, "", "description"], [8, 2, 1, "", "discard_sequences"], [8, 2, 1, "", "export_character_indices"], [8, 2, 1, "", "export_character_subset"], [8, 2, 1, "", "extend_matrix"], [8, 2, 1, "", "extend_sequences"], [8, 2, 1, "", "fill"], [8, 2, 1, "", "fill_taxa"], [8, 2, 1, "", "folded_site_frequency_spectrum"], [8, 2, 1, "", "from_dict"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_from_path"], [8, 2, 1, "", "get_from_stream"], [8, 2, 1, "", "get_from_string"], [8, 2, 1, "", "get_from_url"], [8, 2, 1, "", "items"], [8, 2, 1, "", "keep_sequences"], [8, 5, 1, "", "max_sequence_size"], [8, 2, 1, "", "migrate_taxon_namespace"], [8, 2, 1, "", "new_character_subset"], [8, 2, 1, "", "new_sequence"], [8, 2, 1, "", "pack"], [8, 2, 1, "", "poll_taxa"], [8, 2, 1, "", "purge_taxon_namespace"], [8, 2, 1, "", "reconstruct_taxon_namespace"], [8, 2, 1, "", "reindex_subcomponent_taxa"], [8, 2, 1, "", "reindex_taxa"], [8, 2, 1, "", "remap_to_default_state_alphabet_by_symbol"], [8, 2, 1, "", "remap_to_state_alphabet_by_symbol"], [8, 2, 1, "", "remove_sequences"], [8, 2, 1, "", "replace_sequences"], [8, 5, 1, "", "sequence_size"], [8, 2, 1, "", "sequences"], [8, 2, 1, "", "taxon_namespace_scoped_copy"], [8, 2, 1, "", "taxon_state_sets_map"], [8, 2, 1, "", "update_sequences"], [8, 2, 1, "", "update_taxon_namespace"], [8, 2, 1, "", "values"], [8, 5, 1, "", "vector_size"], [8, 2, 1, "", "write"], [8, 2, 1, "", "write_to_path"], [8, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.charstatemodel": [[9, 1, 1, "", "StateAlphabet"], [9, 1, 1, "", "StateIdentity"]], "dendropy.datamodel.charstatemodel.StateAlphabet": [[9, 2, 1, "", "__getitem__"], [9, 2, 1, "", "__iter__"], [9, 2, 1, "", "__len__"], [9, 2, 1, "", "ambiguous_state_iter"], [9, 2, 1, "", "ambiguous_symbol_iter"], [9, 5, 1, "", "canonical_symbol_state_map"], [9, 2, 1, "", "compile_lookup_mappings"], [9, 2, 1, "", "compile_member_states_lookup_mappings"], [9, 2, 1, "", "compile_symbol_lookup_mappings"], [9, 5, 1, "", "full_symbol_state_map"], [9, 2, 1, "", "fundamental_state_iter"], [9, 2, 1, "", "fundamental_symbol_iter"], [9, 2, 1, "", "get_canonical_symbol_for_symbol"], [9, 2, 1, "", "get_fundamental_states_for_symbols"], [9, 2, 1, "", "get_states_for_symbols"], [9, 2, 1, "", "match_ambiguous_state"], [9, 2, 1, "", "match_polymorphic_state"], [9, 2, 1, "", "match_state"], [9, 2, 1, "", "multistate_state_iter"], [9, 2, 1, "", "multistate_symbol_iter"], [9, 2, 1, "", "new_ambiguous_state"], [9, 2, 1, "", "new_fundamental_state"], [9, 2, 1, "", "new_multistate"], [9, 2, 1, "", "new_polymorphic_state"], [9, 2, 1, "", "new_symbol_synonym"], [9, 2, 1, "", "polymorphic_state_iter"], [9, 2, 1, "", "polymorphic_symbol_iter"], [9, 2, 1, "", "set_state_as_attribute"], [9, 2, 1, "", "state_iter"], [9, 5, 1, "", "states"], [9, 2, 1, "", "symbol_state_pair_iter"], [9, 5, 1, "", "symbols"], [9, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.charstatemodel.StateIdentity": [[9, 5, 1, "", "fundamental_indexes"], [9, 5, 1, "", "fundamental_indexes_with_gaps_as_missing"], [9, 5, 1, "", "fundamental_states"], [9, 5, 1, "", "fundamental_symbols"], [9, 2, 1, "", "is_exact_correspondence"], [9, 5, 1, "", "is_fundamental_state"], [9, 5, 1, "", "is_single_state"], [9, 5, 1, "", "member_states"], [9, 5, 1, "", "member_states_str"], [9, 5, 1, "", "state_denomination"], [9, 5, 1, "", "symbol"], [9, 5, 1, "", "symbol_synonyms"], [9, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.datasetmodel": [[12, 1, 1, "", "DataSet"]], "dendropy.datamodel.datasetmodel.DataSet": [[12, 2, 1, "", "add"], [12, 2, 1, "", "add_char_matrix"], [12, 2, 1, "", "add_taxon_namespace"], [12, 2, 1, "", "add_taxon_set"], [12, 2, 1, "", "add_tree_list"], [12, 2, 1, "", "as_string"], [12, 2, 1, "", "attach_taxon_namespace"], [12, 2, 1, "", "attach_taxon_set"], [12, 2, 1, "", "clone"], [12, 2, 1, "", "copy_annotations_from"], [12, 2, 1, "", "deep_copy_annotations_from"], [12, 2, 1, "", "detach_taxon_namespace"], [12, 2, 1, "", "detach_taxon_set"], [12, 2, 1, "", "get"], [12, 2, 1, "", "get_from_path"], [12, 2, 1, "", "get_from_stream"], [12, 2, 1, "", "get_from_string"], [12, 2, 1, "", "get_from_url"], [12, 2, 1, "", "get_tree_list"], [12, 2, 1, "", "new_char_matrix"], [12, 2, 1, "", "new_taxon_namespace"], [12, 2, 1, "", "new_taxon_set"], [12, 2, 1, "", "new_tree_list"], [12, 2, 1, "", "read"], [12, 2, 1, "", "read_from_path"], [12, 2, 1, "", "read_from_stream"], [12, 2, 1, "", "read_from_string"], [12, 2, 1, "", "read_from_url"], [12, 2, 1, "", "taxon_namespace_scoped_copy"], [12, 2, 1, "", "unify_taxon_namespaces"], [12, 2, 1, "", "write"], [12, 2, 1, "", "write_to_path"], [12, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.taxonmodel": [[23, 1, 1, "", "Taxon"], [23, 1, 1, "", "TaxonNamespace"], [23, 1, 1, "", "TaxonNamespaceAssociated"]], "dendropy.datamodel.taxonmodel.Taxon": [[23, 2, 1, "", "__str__"], [23, 2, 1, "", "description"], [23, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.taxonmodel.TaxonNamespace": [[23, 2, 1, "", "__contains__"], [23, 2, 1, "", "__getitem__"], [23, 2, 1, "", "__len__"], [23, 2, 1, "", "accession_index"], [23, 2, 1, "", "add_taxa"], [23, 2, 1, "", "add_taxon"], [23, 2, 1, "", "all_taxa_bitmask"], [23, 2, 1, "", "append"], [23, 2, 1, "", "bitmask_as_newick_string"], [23, 2, 1, "", "bitmask_taxa_list"], [23, 2, 1, "", "clear"], [23, 2, 1, "", "description"], [23, 2, 1, "", "discard_taxon_label"], [23, 2, 1, "", "findall"], [23, 2, 1, "", "get_taxa"], [23, 2, 1, "", "get_taxa_bitmask"], [23, 2, 1, "", "get_taxon"], [23, 2, 1, "", "has_taxa_labels"], [23, 2, 1, "", "has_taxon_label"], [23, 2, 1, "", "label_taxon_map"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "new_taxa"], [23, 2, 1, "", "new_taxon"], [23, 2, 1, "", "remove_taxon"], [23, 2, 1, "", "remove_taxon_label"], [23, 2, 1, "", "require_taxon"], [23, 2, 1, "", "reverse"], [23, 2, 1, "", "sort"], [23, 2, 1, "", "split_as_newick_string"], [23, 2, 1, "", "taxa_bipartition"], [23, 2, 1, "", "taxa_bitmask"], [23, 2, 1, "", "taxon_bitmask"], [23, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated": [[23, 2, 1, "", "migrate_taxon_namespace"], [23, 2, 1, "", "poll_taxa"], [23, 2, 1, "", "purge_taxon_namespace"], [23, 2, 1, "", "reconstruct_taxon_namespace"], [23, 2, 1, "", "reindex_subcomponent_taxa"], [23, 2, 1, "", "reindex_taxa"], [23, 2, 1, "", "update_taxon_namespace"]], "dendropy.datamodel.treecollectionmodel": [[24, 1, 1, "", "SplitDistribution"], [24, 1, 1, "", "SplitDistributionSummarizer"], [24, 1, 1, "", "TreeArray"], [24, 1, 1, "", "TreeList"]], "dendropy.datamodel.treecollectionmodel.SplitDistribution": [[24, 2, 1, "", "__getitem__"], [24, 2, 1, "", "calc_freqs"], [24, 2, 1, "", "collapse_edges_with_less_than_minimum_support"], [24, 2, 1, "", "consensus_tree"], [24, 2, 1, "", "count_splits_on_tree"], [24, 2, 1, "", "log_product_of_split_support_on_tree"], [24, 2, 1, "", "normalize_bitmask"], [24, 2, 1, "", "split_support_iter"], [24, 2, 1, "", "splits_considered"], [24, 2, 1, "", "sum_of_split_support_on_tree"], [24, 2, 1, "", "summarize_splits_on_tree"]], "dendropy.datamodel.treecollectionmodel.SplitDistributionSummarizer": [[24, 2, 1, "", "configure"]], "dendropy.datamodel.treecollectionmodel.TreeArray": [[24, 6, 1, "", "IncompatibleEdgeLengthsTreeArrayUpdate"], [24, 6, 1, "", "IncompatibleNodeAgesTreeArrayUpdate"], [24, 6, 1, "", "IncompatibleRootingTreeArrayUpdate"], [24, 6, 1, "", "IncompatibleTreeArrayUpdate"], [24, 6, 1, "", "IncompatibleTreeWeightsTreeArrayUpdate"], [24, 2, 1, "", "__add__"], [24, 2, 1, "", "__iadd__"], [24, 2, 1, "", "__iter__"], [24, 2, 1, "", "add_tree"], [24, 2, 1, "", "add_trees"], [24, 2, 1, "", "append"], [24, 2, 1, "", "bipartition_encoding_frequencies"], [24, 2, 1, "", "calculate_log_product_of_split_supports"], [24, 2, 1, "", "calculate_sum_of_split_supports"], [24, 2, 1, "", "consensus_tree"], [24, 2, 1, "", "extend"], [24, 2, 1, "", "get_split_bitmask_and_edge_tuple"], [24, 2, 1, "", "insert"], [24, 2, 1, "", "maximum_product_of_split_support_tree"], [24, 2, 1, "", "maximum_sum_of_split_support_tree"], [24, 2, 1, "", "read"], [24, 2, 1, "", "read_from_files"], [24, 2, 1, "", "split_bitmask_set_frequencies"], [24, 2, 1, "", "topologies"]], "dendropy.datamodel.treecollectionmodel.TreeList": [[24, 4, 1, "", "DEFAULT_TREE_TYPE"], [24, 2, 1, "", "__add__"], [24, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__iadd__"], [24, 2, 1, "", "append"], [24, 2, 1, "", "as_string"], [24, 2, 1, "", "as_tree_array"], [24, 2, 1, "", "clone"], [24, 2, 1, "", "consensus"], [24, 2, 1, "", "copy_annotations_from"], [24, 2, 1, "", "deep_copy_annotations_from"], [24, 2, 1, "", "extend"], [24, 2, 1, "", "frequency_of_bipartition"], [24, 2, 1, "", "frequency_of_split"], [24, 2, 1, "", "get"], [24, 2, 1, "", "get_from_path"], [24, 2, 1, "", "get_from_stream"], [24, 2, 1, "", "get_from_string"], [24, 2, 1, "", "get_from_url"], [24, 2, 1, "", "insert"], [24, 2, 1, "", "maximum_product_of_split_support_tree"], [24, 2, 1, "", "maximum_sum_of_split_support_tree"], [24, 2, 1, "", "migrate_taxon_namespace"], [24, 2, 1, "", "poll_taxa"], [24, 2, 1, "", "purge_taxon_namespace"], [24, 2, 1, "", "put"], [24, 2, 1, "id0", "read"], [24, 2, 1, "", "read_from_path"], [24, 2, 1, "", "read_from_stream"], [24, 2, 1, "", "read_from_string"], [24, 2, 1, "", "read_from_url"], [24, 2, 1, "", "reconstruct_taxon_namespace"], [24, 2, 1, "", "reindex_subcomponent_taxa"], [24, 2, 1, "", "reindex_taxa"], [24, 2, 1, "", "split_distribution"], [24, 2, 1, "", "taxon_namespace_scoped_copy"], [24, 2, 1, "", "tree_factory"], [24, 2, 1, "", "update_taxon_namespace"], [24, 2, 1, "", "write"], [24, 2, 1, "", "write_to_path"], [24, 2, 1, "", "write_to_stream"]], "dendropy.datamodel.treemodel": [[27, 1, 1, "", "AsciiTreePlot"], [27, 1, 1, "", "Bipartition"], [27, 1, 1, "", "Edge"], [27, 1, 1, "", "Node"], [27, 1, 1, "", "Tree"]], "dendropy.datamodel.treemodel.AsciiTreePlot": [[27, 6, 1, "", "NullEdgeLengthError"], [27, 2, 1, "", "calc_plot"], [27, 2, 1, "", "draw_node"]], "dendropy.datamodel.treemodel.AsciiTreePlot.NullEdgeLengthError": [[27, 2, 1, "", "with_traceback"]], "dendropy.datamodel.treemodel.Bipartition": [[27, 2, 1, "", "compile_bipartition"], [27, 2, 1, "", "compile_split_bitmask"], [27, 2, 1, "", "compile_tree_leafset_bitmask"], [27, 2, 1, "", "is_compatible_bitmasks"], [27, 2, 1, "", "is_compatible_with"], [27, 2, 1, "", "is_incompatible_with"], [27, 2, 1, "", "is_leafset_nested_within"], [27, 2, 1, "", "is_nested_within"], [27, 2, 1, "", "is_trivial"], [27, 2, 1, "", "is_trivial_bitmask"], [27, 2, 1, "", "leafset_as_bitstring"], [27, 2, 1, "", "leafset_as_newick_string"], [27, 2, 1, "", "leafset_taxa"], [27, 2, 1, "", "normalize"], [27, 2, 1, "", "split_as_bitstring"], [27, 2, 1, "", "split_as_newick_string"]], "dendropy.datamodel.treemodel.Edge": [[27, 5, 1, "", "adjacent_edges"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "collapse"], [27, 2, 1, "", "copy_annotations_from"], [27, 2, 1, "", "deep_copy_annotations_from"], [27, 2, 1, "", "description"], [27, 2, 1, "", "get_adjacent_edges"], [27, 2, 1, "", "invert"], [27, 2, 1, "", "is_internal"], [27, 2, 1, "", "is_leaf"], [27, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.treemodel.Node": [[27, 2, 1, "", "add_child"], [27, 2, 1, "", "adjacent_nodes"], [27, 2, 1, "", "age_order_iter"], [27, 2, 1, "", "ageorder_iter"], [27, 2, 1, "", "ancestor_iter"], [27, 2, 1, "", "apply"], [27, 5, 1, "", "bipartition"], [27, 2, 1, "", "child_edge_iter"], [27, 2, 1, "", "child_edges"], [27, 2, 1, "", "child_node_iter"], [27, 2, 1, "", "child_nodes"], [27, 2, 1, "", "clear_child_nodes"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "collapse_clade"], [27, 2, 1, "", "collapse_conflicting"], [27, 2, 1, "", "copy_annotations_from"], [27, 2, 1, "", "deep_copy_annotations_from"], [27, 2, 1, "", "description"], [27, 2, 1, "", "distance_from_root"], [27, 2, 1, "", "distance_from_tip"], [27, 5, 1, "", "edge"], [27, 2, 1, "", "edge_factory"], [27, 5, 1, "", "edge_length"], [27, 2, 1, "", "extract_subtree"], [27, 2, 1, "", "get_adjacent_nodes"], [27, 2, 1, "", "get_incident_edges"], [27, 2, 1, "", "incident_edges"], [27, 2, 1, "", "inorder_iter"], [27, 2, 1, "", "insert_child"], [27, 2, 1, "", "insert_new_child"], [27, 2, 1, "", "is_internal"], [27, 2, 1, "", "is_leaf"], [27, 2, 1, "", "leaf_iter"], [27, 2, 1, "", "leaf_nodes"], [27, 2, 1, "", "level"], [27, 2, 1, "", "level_order_iter"], [27, 2, 1, "", "levelorder_iter"], [27, 2, 1, "", "new_child"], [27, 2, 1, "", "num_child_nodes"], [27, 5, 1, "", "parent_node"], [27, 2, 1, "", "postorder_internal_node_iter"], [27, 2, 1, "", "postorder_iter"], [27, 2, 1, "", "preorder_internal_node_iter"], [27, 2, 1, "", "preorder_iter"], [27, 2, 1, "", "reinsert_nodes"], [27, 2, 1, "", "remove_child"], [27, 2, 1, "", "reversible_remove_child"], [27, 2, 1, "", "set_child_nodes"], [27, 2, 1, "", "set_children"], [27, 2, 1, "", "sibling_nodes"], [27, 2, 1, "", "sister_nodes"], [27, 2, 1, "", "taxon_namespace_scoped_copy"]], "dendropy.datamodel.treemodel.Tree": [[27, 2, 1, "", "B1"], [27, 2, 1, "", "N_bar"], [27, 2, 1, "", "__iter__"], [27, 2, 1, "", "__len__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "age_order_node_iter"], [27, 2, 1, "", "ageorder_node_iter"], [27, 2, 1, "", "apply"], [27, 2, 1, "", "as_ascii_plot"], [27, 2, 1, "", "as_python_source"], [27, 2, 1, "", "as_string"], [27, 2, 1, "", "calc_node_ages"], [27, 2, 1, "", "calc_node_root_distances"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "coalescence_intervals"], [27, 2, 1, "", "collapse_basal_bifurcation"], [27, 2, 1, "", "collapse_unweighted_edges"], [27, 2, 1, "", "colless_tree_imbalance"], [27, 2, 1, "", "copy_annotations_from"], [27, 2, 1, "", "deep_copy_annotations_from"], [27, 2, 1, "", "description"], [27, 2, 1, "", "edges"], [27, 2, 1, "", "encode_bipartitions"], [27, 2, 1, "", "encode_splits"], [27, 2, 1, "", "euclidean_distance"], [27, 2, 1, "", "extract_tree"], [27, 2, 1, "", "extract_tree_with_taxa"], [27, 2, 1, "", "extract_tree_with_taxa_labels"], [27, 2, 1, "", "extract_tree_without_taxa"], [27, 2, 1, "", "extract_tree_without_taxa_labels"], [27, 2, 1, "", "false_positives_and_negatives"], [27, 2, 1, "", "filter_leaf_nodes"], [27, 2, 1, "", "find_missing_splits"], [27, 2, 1, "", "find_node"], [27, 2, 1, "", "find_node_for_taxon"], [27, 2, 1, "", "find_node_with_label"], [27, 2, 1, "", "find_node_with_taxon"], [27, 2, 1, "", "find_node_with_taxon_label"], [27, 2, 1, "", "find_nodes"], [27, 2, 1, "", "from_bipartition_encoding"], [27, 2, 1, "", "from_split_bitmasks"], [27, 2, 1, "", "get"], [27, 2, 1, "", "get_from_path"], [27, 2, 1, "", "get_from_stream"], [27, 2, 1, "", "get_from_string"], [27, 2, 1, "", "get_from_url"], [27, 2, 1, "", "infer_taxa"], [27, 2, 1, "", "inorder_edge_iter"], [27, 2, 1, "", "inorder_node_iter"], [27, 2, 1, "", "internal_edges"], [27, 2, 1, "", "internal_node_ages"], [27, 2, 1, "", "internal_nodes"], [27, 2, 1, "", "is_compatible_with_bipartition"], [27, 2, 1, "", "ladderize"], [27, 2, 1, "", "leaf_edge_iter"], [27, 2, 1, "", "leaf_edges"], [27, 2, 1, "", "leaf_iter"], [27, 2, 1, "", "leaf_node_iter"], [27, 2, 1, "", "leaf_nodes"], [27, 2, 1, "", "length"], [27, 2, 1, "", "level_order_edge_iter"], [27, 2, 1, "", "level_order_node_iter"], [27, 2, 1, "", "levelorder_edge_iter"], [27, 2, 1, "", "levelorder_node_iter"], [27, 2, 1, "", "max_distance_from_root"], [27, 2, 1, "", "migrate_taxon_namespace"], [27, 2, 1, "", "minmax_leaf_distance_from_root"], [27, 2, 1, "", "mrca"], [27, 2, 1, "", "node_ages"], [27, 2, 1, "", "node_factory"], [27, 2, 1, "", "nodes"], [27, 2, 1, "", "num_lineages_at"], [27, 2, 1, "", "phylogenetic_distance_matrix"], [27, 2, 1, "", "poll_taxa"], [27, 2, 1, "", "postorder_edge_iter"], [27, 2, 1, "", "postorder_internal_edge_iter"], [27, 2, 1, "", "postorder_internal_node_iter"], [27, 2, 1, "", "postorder_node_iter"], [27, 2, 1, "", "preorder_edge_iter"], [27, 2, 1, "", "preorder_internal_edge_iter"], [27, 2, 1, "", "preorder_internal_node_iter"], [27, 2, 1, "", "preorder_node_iter"], [27, 2, 1, "", "print_plot"], [27, 2, 1, "", "prune_leaves_without_taxa"], [27, 2, 1, "", "prune_subtree"], [27, 2, 1, "", "prune_taxa"], [27, 2, 1, "", "prune_taxa_with_labels"], [27, 2, 1, "", "purge_taxon_namespace"], [27, 2, 1, "", "pybus_harvey_gamma"], [27, 2, 1, "", "randomly_assign_taxa"], [27, 2, 1, "", "randomly_reorient"], [27, 2, 1, "", "randomly_rotate"], [27, 2, 1, "", "reconstruct_taxon_namespace"], [27, 2, 1, "", "reindex_subcomponent_taxa"], [27, 2, 1, "", "reindex_taxa"], [27, 2, 1, "", "reorder"], [27, 2, 1, "", "reroot_at_edge"], [27, 2, 1, "", "reroot_at_midpoint"], [27, 2, 1, "", "reroot_at_node"], [27, 2, 1, "", "reseed_at"], [27, 2, 1, "", "resolve_node_ages"], [27, 2, 1, "", "resolve_node_depths"], [27, 2, 1, "", "resolve_polytomies"], [27, 2, 1, "", "retain_taxa"], [27, 2, 1, "", "retain_taxa_with_labels"], [27, 2, 1, "", "robinson_foulds_distance"], [27, 2, 1, "", "sackin_index"], [27, 2, 1, "", "scale_edges"], [27, 2, 1, "", "set_edge_lengths_from_node_ages"], [27, 2, 1, "", "shuffle_taxa"], [27, 2, 1, "", "strip_comments"], [27, 2, 1, "", "suppress_unifurcations"], [27, 2, 1, "", "symmetric_difference"], [27, 2, 1, "", "taxon_namespace_scoped_copy"], [27, 2, 1, "", "to_outgroup_position"], [27, 2, 1, "", "treeness"], [27, 2, 1, "", "unassign_taxa"], [27, 2, 1, "", "update_bipartitions"], [27, 2, 1, "", "update_splits"], [27, 2, 1, "", "update_taxon_namespace"], [27, 2, 1, "", "write"], [27, 2, 1, "", "write_as_dot"], [27, 2, 1, "", "write_ascii_plot"], [27, 2, 1, "", "write_to_path"], [27, 2, 1, "", "write_to_stream"], [27, 2, 1, "", "yield_from_files"]], "dendropy.model": [[7, 0, 0, "-", "birthdeath"], [10, 0, 0, "-", "coalescent"], [11, 0, 0, "-", "continuous"], [13, 0, 0, "-", "discrete"], [15, 0, 0, "-", "parsimony"], [20, 0, 0, "-", "protractedspeciation"], [21, 0, 0, "-", "reconcile"], [29, 0, 0, "-", "treeshape"]], "dendropy.model.birthdeath": [[7, 3, 1, "", "birth_death_likelihood"], [7, 3, 1, "", "birth_death_tree"], [7, 3, 1, "", "discrete_birth_death_tree"], [7, 3, 1, "", "fit_pure_birth_model"], [7, 3, 1, "", "fit_pure_birth_model_to_tree"], [7, 3, 1, "", "uniform_pure_birth_tree"]], "dendropy.model.coalescent": [[10, 3, 1, "", "coalesce_nodes"], [10, 3, 1, "", "constrained_kingman_tree"], [10, 3, 1, "", "contained_coalescent_tree"], [10, 3, 1, "", "discrete_time_to_coalescence"], [10, 3, 1, "", "expected_tmrca"], [10, 3, 1, "", "extract_coalescent_frames"], [10, 3, 1, "", "log_probability_of_coalescent_frames"], [10, 3, 1, "", "log_probability_of_coalescent_tree"], [10, 3, 1, "", "mean_kingman_tree"], [10, 3, 1, "", "node_waiting_time_pairs"], [10, 3, 1, "", "pure_kingman_tree"], [10, 3, 1, "", "pure_kingman_tree_shape"], [10, 3, 1, "", "time_to_coalescence"]], "dendropy.model.continuous": [[11, 1, 1, "", "PhylogeneticIndependentContrasts"], [11, 3, 1, "", "evolve_continuous_char"]], "dendropy.model.continuous.PhylogeneticIndependentContrasts": [[11, 2, 1, "", "contrasts_tree"], [11, 5, 1, "", "tree"]], "dendropy.model.discrete": [[13, 1, 1, "", "DiscreteCharacterEvolutionModel"], [13, 1, 1, "", "DiscreteCharacterEvolver"], [13, 1, 1, "", "Hky85"], [13, 1, 1, "", "Jc69"], [13, 1, 1, "", "NucleotideCharacterEvolutionModel"], [13, 3, 1, "", "hky85_chars"], [13, 3, 1, "", "simulate_discrete_char_dataset"], [13, 3, 1, "", "simulate_discrete_chars"]], "dendropy.model.discrete.DiscreteCharacterEvolutionModel": [[13, 2, 1, "", "pmatrix"], [13, 2, 1, "", "simulate_descendant_states"]], "dendropy.model.discrete.DiscreteCharacterEvolver": [[13, 2, 1, "", "evolve_states"], [13, 2, 1, "", "extend_char_matrix_with_characters_on_tree"]], "dendropy.model.discrete.Hky85": [[13, 2, 1, "", "corrected_substitution_rate"], [13, 2, 1, "", "pij"], [13, 2, 1, "", "pmatrix"], [13, 2, 1, "", "pvector"], [13, 2, 1, "", "qmatrix"]], "dendropy.model.discrete.NucleotideCharacterEvolutionModel": [[13, 2, 1, "", "is_purine"], [13, 2, 1, "", "is_purine_transition"], [13, 2, 1, "", "is_pyrimidine"], [13, 2, 1, "", "is_pyrimidine_transition"], [13, 2, 1, "", "is_transition"], [13, 2, 1, "", "is_transversion"], [13, 2, 1, "", "stationary_sample"]], "dendropy.model.parsimony": [[15, 3, 1, "", "fitch_down_pass"], [15, 3, 1, "", "fitch_up_pass"], [15, 3, 1, "", "parsimony_score"]], "dendropy.model.protractedspeciation": [[20, 1, 1, "", "ProtractedSpeciationProcess"], [20, 3, 1, "", "expected_duration_of_speciation"], [20, 3, 1, "", "log_probability_of_duration_of_speciation"], [20, 3, 1, "", "maximum_probability_duration_of_speciation"], [20, 3, 1, "", "probability_of_duration_of_speciation"]], "dendropy.model.protractedspeciation.ProtractedSpeciationProcess": [[20, 2, 1, "", "generate_sample"]], "dendropy.model.reconcile": [[21, 1, 1, "", "ContainingTree"], [21, 3, 1, "", "monophyletic_partition_discordance"], [21, 3, 1, "", "reconciliation_discordance"]], "dendropy.model.reconcile.ContainingTree": [[21, 2, 1, "", "build_edge_taxa_sets"], [21, 2, 1, "", "clear"], [21, 2, 1, "", "clear_contained_edges"], [21, 2, 1, "", "deep_coalescences"], [21, 2, 1, "", "embed_contained_kingman"], [21, 2, 1, "", "embed_tree"], [21, 2, 1, "", "fit_edge_lengths"], [21, 2, 1, "", "num_deep_coalescences"], [21, 2, 1, "", "rebuild"], [21, 2, 1, "", "simulate_contained_kingman"], [21, 2, 1, "", "write_as_mesquite"]], "dendropy.model.treeshape": [[29, 3, 1, "", "star_tree"]], "dendropy.simulate": [[17, 0, 0, "-", "popgensim"], [30, 0, 0, "-", "treesim"]], "dendropy.simulate.popgensim": [[17, 3, 1, "", "pop_gen_tree"]], "dendropy.simulate.treesim": [[30, 3, 1, "", "birth_death_tree"], [30, 3, 1, "", "constrained_kingman_tree"], [30, 3, 1, "", "contained_coalescent_tree"], [30, 3, 1, "", "discrete_birth_death_tree"], [30, 3, 1, "", "mean_kingman_tree"], [30, 3, 1, "", "pure_kingman_tree"], [30, 3, 1, "", "star_tree"]], "dendropy.utility.bibtex": [[6, 1, 1, "", "BibTexEntry"]], "dendropy.utility.bibtex.BibTexEntry": [[6, 2, 1, "", "__delattr__"], [6, 2, 1, "", "__getattr__"], [6, 2, 1, "", "__repr__"], [6, 2, 1, "", "__setattr__"], [6, 2, 1, "", "__str__"], [6, 2, 1, "", "as_bibtex"], [6, 2, 1, "", "as_compact_bibtex"], [6, 5, 1, "", "fields"], [6, 2, 1, "", "fields_as_dict"], [6, 2, 1, "", "parse_text"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"dendropi": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 40, 55, 59], "chang": [0, 31], "histori": [0, 53], "releas": [0, 2], "4": [0, 1, 31], "5": [0, 33], "2": [0, 1], "0": [0, 33], "3": [0, 1], "1": [0, 1], "new": [0, 32, 37, 38, 46], "updat": 0, "featur": [0, 5], "bug": [0, 5, 57], "fix": 0, "code": [1, 3, 5], "conduct": [1, 5], "our": 1, "pledg": 1, "standard": [1, 8, 43], "enforc": 1, "respons": 1, "scope": 1, "guidelin": 1, "correct": 1, "warn": 1, "temporari": 1, "ban": 1, "perman": 1, "attribut": [1, 31, 39, 55], "develop": [2, 3, 33], "guid": 2, "first": 2, "time": [2, 54], "contributor": 2, "lint": 2, "test": 2, "document": [2, 5, 42], "docstr": 2, "virtual": 2, "environ": [2, 57], "continu": [2, 8, 11], "integr": 2, "version": [2, 3, 31, 33], "bump": 2, "pypi": 2, "download": 3, "instal": [3, 5, 57], "from": [3, 35, 38, 39, 43, 46, 51, 54, 55], "github": 3, "repositori": [3, 57], "python": [3, 31, 57], "packag": [3, 57], "index": 3, "via": 3, "conda": 3, "sourc": [3, 43, 46, 51, 55], "latest": 3, "clone": [3, 50, 52], "glossari": 4, "terminolog": 4, "refer": [4, 14, 23, 28, 39], "phylogenet": [5, 6, 16, 37, 40, 42, 43, 46, 55, 57, 59], "comput": [5, 57], "librari": [5, 14, 31, 40], "prerequisit": [5, 57], "request": 5, "report": 5, "other": [5, 40, 54], "issu": 5, "help": 5, "discuss": 5, "comment": [5, 57], "citat": [5, 55], "copyright": [5, 57], "licens": [5, 57], "warranti": [5, 57], "acknowledg": [5, 57], "author": 5, "datamodel": [6, 8, 9, 12, 23, 24, 27], "basemodel": 6, "core": 6, "infrastructur": [6, 55], "data": [6, 8, 12, 14, 28, 35, 36, 37, 38, 39, 40, 43, 46, 55, 59], "object": [6, 31, 33, 37, 38, 39, 40, 43, 46, 55], "The": [6, 7, 8, 9, 10, 15, 16, 20, 23, 24, 27, 31, 40, 50, 51, 52, 54], "dataobject": 6, "class": [6, 8, 9, 16, 20, 23, 24, 27, 30, 31, 50, 52], "annot": [6, 37, 39, 40, 55, 57], "annotationset": 6, "support": [6, 54, 57, 58, 60, 61, 62, 63], "model": [7, 10, 11, 13, 14, 15, 20, 21, 28, 29, 34, 40, 54, 57], "birthdeath": 7, "birth": [7, 20, 53], "death": [7, 20, 53], "relat": 7, "process": [7, 14, 53, 57], "charmatrixmodel": 8, "charact": [8, 9, 11, 12, 13, 35, 39, 40, 42], "sequenc": [8, 35, 39, 40], "matric": [8, 35, 40], "type": [8, 35, 57], "subset": 8, "charactermatrix": [8, 38], "continuouscharactermatrix": 8, "dnacharactermatrix": [8, 58, 61, 62, 63], "dna": 8, "rnacharactermatrix": [8, 58, 61, 62, 63], "rna": 8, "proteincharactermatrix": [8, 58, 61, 62, 63], "protein": 8, "amino": 8, "acid": 8, "restrictionsitescharactermatrix": [8, 58, 61, 62, 63], "restrict": 8, "site": 8, "infinitesitescharactermatrix": [8, 58, 61, 62, 63], "infinit": 8, "standardcharactermatrix": [8, 58, 61, 62, 63], "charstatemodel": 9, "state": [9, 42, 51], "ident": 9, "alphabet": 9, "statealphabet": 9, "stateident": 9, "coalesc": [10, 53, 54], "evolut": [11, 13], "datasetmodel": 12, "dataset": [12, 31, 38, 58, 60, 61, 62, 63], "aggreg": [12, 30], "collect": [12, 24, 50, 54, 55], "taxon": [12, 23, 35, 38, 39, 40, 48, 49, 53], "tree": [12, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 40, 42, 43, 50, 51, 52, 53, 54, 57, 60, 61, 62], "discret": 13, "calcul": [14, 16, 18, 19, 22, 25, 26, 28, 34, 43, 54], "statist": [14, 18, 22, 26, 42, 43, 44, 54], "metric": [14, 26, 54], "simul": [14, 17, 30, 53], "parsimoni": 15, "phylogeneticdist": 16, "distanc": [16, 25, 40, 43, 54], "oper": [16, 40, 43], "phylogeneticdistancematrix": [16, 43], "popgensim": 17, "popul": [17, 18, 44], "genet": [17, 18, 44], "popgenstat": 18, "probabl": [19, 54, 57], "gener": [19, 22, 39, 43, 53], "protractedspeci": 20, "protract": 20, "speciat": 20, "protractedspeciationprocess": 20, "reconcil": 21, "fit": 21, "gene": [21, 54], "speci": [21, 54], "parasit": 21, "host": 21, "etc": [21, 57], "taxonmodel": 23, "taxonom": [23, 40], "namespac": [23, 30, 40, 48], "manag": [23, 35, 38, 48, 50], "taxonnamespac": [23, 31, 53], "taxonnamespaceassoci": 23, "treecollectionmodel": 24, "treelist": [24, 38, 50, 60, 61, 62], "treearrai": [24, 60, 61, 62], "splitdistribut": 24, "splitdistributionsummar": 24, "treecompar": 25, "comparison": 25, "between": [25, 36, 38, 54], "treemeasur": 26, "unari": [26, 54], "treemodel": 27, "node": [27, 31, 42, 52, 54, 57], "edg": [27, 31, 34, 52, 57], "bipartit": [27, 34], "asciitreeplot": 27, "treescor": 28, "score": [28, 54], "treeshap": 29, "shape": 29, "treesim": 30, "unifi": 30, "function": [30, 39], "migrat": 31, "primer": [31, 40, 57], "introduct": [31, 37, 57], "compat": 31, "wide": 31, "public": 31, "modul": 31, "reorgan": 31, "behind": 31, "scene": 31, "uniqu": 31, "identifi": 31, "oid": 31, "remov": [31, 55], "taxonset": 31, "i": [31, 34, 57], "now": 31, "newick": [31, 42, 60], "format": [31, 36, 59], "read": [31, 35, 37, 38, 46, 50, 51, 52, 55, 58, 60, 61, 62, 63], "write": [31, 35, 37, 38, 46, 50, 52, 55, 58, 60, 61, 62, 63], "2018": 32, "05": 32, "07": 32, "2017": 32, "06": 32, "17": 32, "2016": 32, "12": 32, "28": 32, "03": 32, "16": 32, "2015": 32, "04": 32, "ongo": 33, "govern": 33, "roadmap": 33, "long": 33, "term": 33, "goal": 33, "A": 34, "partit": [34, 49], "taxa": [34, 39, 40, 52], "correspond": 34, "an": [34, 38, 39, 43, 46, 51, 53, 55], "can": 34, "Be": 34, "describ": 34, "bitmask": 34, "us": [34, 50, 57], "leafset": 34, "split": [34, 54, 57], "encod": 34, "creat": [35, 37, 38, 43, 46], "matrix": [35, 39], "dictionari": [35, 55], "string": [35, 42], "concaten": 35, "multipl": [35, 38, 53], "access": [35, 39, 55, 57], "convert": 36, "primari": 37, "empti": 37, "set": [38, 40, 49, 51, 57], "creation": [38, 55], "exist": [38, 46, 51, 53], "ad": [38, 39, 46, 55], "exisit": 38, "detach": 38, "mode": [38, 57], "attach": 38, "singl": [38, 55], "switch": 38, "work": [39, 40, 55], "genbank": 39, "molecular": 39, "databas": 39, "quick": [39, 57], "start": 39, "acquir": 39, "genebank": 39, "record": 39, "custom": [39, 57], "control": 39, "specifi": [39, 53, 57], "label": [39, 42], "discoveri": 39, "metadata": [39, 40, 42, 55], "full": 39, "unit": 40, "list": 40, "interoper": 40, "program": [40, 56, 57], "applic": [40, 56], "paup": 41, "analys": 42, "independ": 42, "contrast": 42, "pic": 42, "basic": [42, 43, 57], "analysi": 42, "result": 42, "tabl": 42, "valu": [42, 55], "nexu": [42, 62], "multifurc": 42, "polytomi": 42, "base": 43, "extern": [43, 46, 51, 55], "patrist": [43, 54], "most": [43, 52], "recent": [43, 52], "common": [43, 52], "ancestor": [43, 52], "mrca": 43, "neighbor": 43, "join": 43, "upgma": 43, "commun": 43, "effect": 43, "size": 43, "summari": [44, 57], "raxml": 45, "out": 46, "seq": 47, "gen": 47, "conceptu": 48, "background": 48, "share": 48, "name": 48, "map": 48, "within": 48, "instanc": [50, 52], "copi": [50, 52, 55], "effici": 50, "iter": [50, 52, 55], "over": [50, 52, 55], "file": 50, "manipul": [51, 55], "restructur": 51, "root": [51, 57], "deroot": 51, "reroot": 51, "": [51, 57], "prune": 51, "subtre": 51, "tip": [51, 57], "extract": 51, "rotat": 51, "travers": 52, "find": [52, 57], "particular": [52, 54], "view": 52, "displai": 52, "build": [52, 53], "programmat": 52, "repeat": 53, "fail": 53, "branch": 53, "suppress": 53, "assign": [53, 57], "extend": 53, "evolv": 53, "rate": 53, "stage": 53, "under": [53, 54], "differ": 53, "condit": 53, "star": 53, "pure": 53, "neutral": 53, "multispeci": 53, "contain": 53, "censor": 53, "distribut": 53, "number": [53, 54, 57], "deep": [53, 54], "phylogeograph": 53, "scenario": 53, "summar": [54, 57], "nativ": 54, "method": [54, 58, 60, 61, 62, 63], "length": [54, 57], "ag": [54, 57], "lineag": 54, "through": 54, "plot": 54, "pybu": 54, "harvei": 54, "gamma": 54, "compar": 54, "unweight": 54, "robinson": 54, "fould": 54, "weight": 54, "euclidean": 54, "major": [54, 57], "rule": [54, 57], "consensu": [54, 57], "frequenc": [54, 57], "maximum": [54, 57], "clade": [54, 57], "credibl": [54, 57], "maxim": 54, "product": 54, "when": 54, "embed": 54, "One": [54, 55], "anoth": [54, 55], "e": 54, "g": 54, "overview": 55, "direct": 55, "composit": 55, "liter": 55, "dynam": 55, "bind": 55, "retriev": 55, "By": 55, "search": 55, "criteria": 55, "transform": 55, "delet": 55, "save": 55, "sumtre": 57, "where": 57, "how": 57, "check": 57, "recip": 57, "posterior": 57, "mcct": 57, "non": 57, "parametr": 57, "bootstrap": 57, "target": 57, "mean": 57, "median": 57, "input": 57, "run": 57, "parallel": 57, "exampl": 57, "topologi": 57, "collaps": 57, "below": 57, "minimum": 57, "threshold": 57, "ultrametr": 57, "forc": 57, "treat": 57, "contemporan": 57, "date": 57, "strategi": 57, "decid": 57, "high": 57, "perform": 57, "hpc": 57, "cluster": 57, "improv": 57, "troubleshoot": 57, "my": 57, "doe": 57, "Not": 57, "know": 57, "what": 57, "manual": 57, "suggest": 57, "cite": 57, "thi": 57, "fasta": 58, "descript": [58, 60, 61, 62, 63], "schema": [58, 59, 60, 61, 62, 63], "specif": [58, 60, 61, 62, 63], "keyword": [58, 60, 61, 62, 63], "argument": [58, 60, 61, 62, 63], "get": [58, 60, 61, 62, 63], "as_str": [58, 60, 61, 62, 63], "evolutionari": 59, "biologi": 59, "content": 59, "nexml": 61, "phylip": 63}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"DendroPy Change History": [[0, "dendropy-change-history"]], "Release 4.5.2": [[0, "release-4-5-2"]], "Release 4.4.0": [[0, "release-4-4-0"]], "Release 4.3.0": [[0, "release-4-3-0"]], "Release 4.2.0": [[0, "release-4-2-0"]], "Release 4.1.0": [[0, "release-4-1-0"]], "New or Updated Features": [[0, "new-or-updated-features"]], "Bug Fixes": [[0, "bug-fixes"], [0, "id1"], [0, "id2"], [0, "id3"]], "Release 4.0.3": [[0, "release-4-0-3"]], "Release 4.0.2": [[0, "release-4-0-2"]], "Release 4.0.1": [[0, "release-4-0-1"]], "Code of Conduct": [[1, "code-of-conduct"], [5, "code-of-conduct"]], "Our Pledge": [[1, "our-pledge"]], "Our Standards": [[1, "our-standards"]], "Enforcement Responsibilities": [[1, "enforcement-responsibilities"]], "Scope": [[1, "scope"]], "Enforcement": [[1, "enforcement"]], "Enforcement Guidelines": [[1, "enforcement-guidelines"]], "1. Correction": [[1, "correction"]], "2. Warning": [[1, "warning"]], "3. Temporary Ban": [[1, "temporary-ban"]], "4. Permanent Ban": [[1, "permanent-ban"]], "Attribution": [[1, "attribution"]], "Developer Guide": [[2, "developer-guide"]], "First-Time Contributors": [[2, "first-time-contributors"]], "Linting": [[2, "linting"]], "Testing": [[2, "testing"]], "Documentation": [[2, "documentation"], [5, "documentation"]], "Docstrings": [[2, "docstrings"]], "Virtual Environments": [[2, "virtual-environments"]], "Continuous Integration": [[2, "continuous-integration"]], "Version Bumping": [[2, "version-bumping"]], "Releasing to PyPi": [[2, "releasing-to-pypi"]], "Downloading and Installing DendroPy": [[3, "downloading-and-installing-dendropy"]], "Installing from the GitHub Repositories": [[3, "installing-from-the-github-repositories"]], "Installing From the Python Package Index": [[3, "installing-from-the-python-package-index"]], "Installing via Conda": [[3, "installing-via-conda"]], "Source Download and Installation": [[3, "source-download-and-installation"]], "Installing the Latest Development Version": [[3, "installing-the-latest-development-version"]], "Cloning the Source Code Repository": [[3, "cloning-the-source-code-repository"]], "Glossary and Terminological Reference": [[4, "glossary-and-terminological-reference"]], "DendroPy Phylogenetic Computing Library": [[5, "dendropy-phylogenetic-computing-library"]], "Prerequisites": [[5, "prerequisites"], [57, "prerequisites"]], "Installing": [[5, "installing"]], "Feature Requests": [[5, "feature-requests"]], "Bug Reports and Other Issues": [[5, "bug-reports-and-other-issues"]], "Help, Discussion, and Comments": [[5, "help-discussion-and-comments"]], "Citation": [[5, "citation"]], "Copyright, License, and Warranty": [[5, "copyright-license-and-warranty"], [57, "copyright-license-and-warranty"]], "Acknowledgments": [[5, "acknowledgments"], [57, "acknowledgments"]], "Authors": [[5, "authors"]], "dendropy.datamodel.basemodel: Core Infrastructure for Phylogenetic Data Objects": [[6, "module-dendropy.datamodel.basemodel"]], "The DataObject Class": [[6, "the-dataobject-class"]], "The Annotable Class": [[6, "the-annotable-class"]], "The Annotation Class": [[6, "the-annotation-class"]], "The AnnotationSet Class": [[6, "the-annotationset-class"]], "Supporting Classes": [[6, "supporting-classes"]], "dendropy.model.birthdeath: The Birth-Death and Related Processes": [[7, "module-dendropy.model.birthdeath"]], "dendropy.datamodel.charmatrixmodel: Character Sequences and Matrices": [[8, "module-dendropy.datamodel.charmatrixmodel"]], "Character Sequences": [[8, "character-sequences"]], "Character Types": [[8, "character-types"]], "Character Subsets": [[8, "character-subsets"]], "Character Matrices": [[8, "character-matrices"], [35, "character-matrices"]], "The CharacterMatrix Class": [[8, "the-charactermatrix-class"]], "ContinuousCharacterMatrix: Continuous Data": [[8, "continuouscharactermatrix-continuous-data"]], "DnaCharacterMatrix: DNA Data": [[8, "dnacharactermatrix-dna-data"]], "RnaCharacterMatrix: RNA Data": [[8, "rnacharactermatrix-rna-data"]], "ProteinCharacterMatrix: Protein (Amino Acid) Data": [[8, "proteincharactermatrix-protein-amino-acid-data"]], "RestrictionSitesCharacterMatrix: Restriction Sites Data": [[8, "restrictionsitescharactermatrix-restriction-sites-data"]], "InfiniteSitesCharacterMatrix : Infinite Sites Data": [[8, "infinitesitescharactermatrix-infinite-sites-data"]], "StandardCharacterMatrix: \u201cStandard\u201d Data": [[8, "standardcharactermatrix-standard-data"]], "dendropy.datamodel.charstatemodel: Character State Identities and Alphabets": [[9, "module-dendropy.datamodel.charstatemodel"]], "The StateAlphabet Class": [[9, "the-statealphabet-class"]], "The StateIdentity Class": [[9, "the-stateidentity-class"]], "dendropy.model.coalescent: The Coalescent": [[10, "module-dendropy.model.coalescent"]], "dendropy.model.continuous: Continuous Character Evolution": [[11, "module-dendropy.model.continuous"]], "dendropy.datamodel.datasetmodel: Datasets \u2013 Aggregate Collections of Taxon, Character, and Tree Data": [[12, "dendropy-datamodel-datasetmodel-datasets-aggregate-collections-of-taxon-character-and-tree-data"]], "dendropy.model.discrete: Discrete Character Evolution": [[13, "module-dendropy.model.discrete"]], "DendroPy Library Reference": [[14, "dendropy-library-reference"]], "Data Model": [[14, "data-model"]], "Process Models": [[14, "process-models"]], "Calculations, Statistics, and Metrics": [[14, "calculations-statistics-and-metrics"]], "Simulations": [[14, "simulations"]], "dendropy.model.parsimony: The Parsimony Model": [[15, "module-dendropy.model.parsimony"]], "dendropy.calculate.phylogeneticdistance: Phylogenetic Distance Calculations and Operations": [[16, "module-dendropy.calculate.phylogeneticdistance"]], "The PhylogeneticDistanceMatrix Class": [[16, "the-phylogeneticdistancematrix-class"]], "dendropy.simulate.popgensim: Population Genetics Simulations": [[17, "module-dendropy.simulate.popgensim"]], "dendropy.calculate.popgenstat: Population Genetics Statistics": [[18, "module-dendropy.calculate.popgenstat"]], "dendropy.calculate.probability: General Probability": [[19, "module-dendropy.calculate.probability"]], "dendropy.model.protractedspeciation: The Protracted Speciation (Birth-Death) Model": [[20, "module-dendropy.model.protractedspeciation"]], "The ProtractedSpeciationProcess Class": [[20, "the-protractedspeciationprocess-class"]], "dendropy.model.reconcile: Tree-Fitting (Gene/Species, Parasite/Host, etc.)": [[21, "module-dendropy.model.reconcile"]], "dendropy.calculate.statistics: General Statistics": [[22, "module-dendropy.calculate.statistics"]], "dendropy.datamodel.taxonmodel: Taxonomic Namespace Reference and Management": [[23, "module-dendropy.datamodel.taxonmodel"]], "The TaxonNamespace Class": [[23, "the-taxonnamespace-class"]], "The Taxon Class": [[23, "the-taxon-class"]], "The TaxonNamespaceAssociated Class": [[23, "the-taxonnamespaceassociated-class"]], "dendropy.datamodel.treecollectionmodel: Collections of Trees": [[24, "module-dendropy.datamodel.treecollectionmodel"]], "The TreeList Class": [[24, "the-treelist-class"]], "The TreeArray Class": [[24, "the-treearray-class"]], "The SplitDistribution Class": [[24, "the-splitdistribution-class"]], "The SplitDistributionSummarizer Class": [[24, "the-splitdistributionsummarizer-class"]], "dendropy.calculate.treecompare: Distances and Comparison Between Trees": [[25, "module-dendropy.calculate.treecompare"]], "dendropy.calculate.treemeasure: Unary Tree Statistics and Metrics": [[26, "module-dendropy.calculate.treemeasure"]], "dendropy.datamodel.treemodel: Trees": [[27, "module-dendropy.datamodel.treemodel"]], "The Tree Class": [[27, "the-tree-class"], [31, "the-tree-class"], [52, "the-tree-class"]], "The Node Class": [[27, "the-node-class"], [31, "the-node-class"]], "The Edge Class": [[27, "the-edge-class"], [31, "the-edge-class"]], "The Bipartition Class": [[27, "the-bipartition-class"]], "The AsciiTreePlot Class": [[27, "the-asciitreeplot-class"]], "dendropy.calculate.treescore: Scoring Trees with Reference to Data and a Model": [[28, "module-dendropy.calculate.treescore"]], "dendropy.model.treeshape: Models of Tree Shape": [[29, "module-dendropy.model.treeshape"]], "dendropy.simulate.treesim: Unified Namespace Aggregating Functions and Classes for Tree Simulations": [[30, "module-dendropy.simulate.treesim"]], "DendroPy 4 Changes and Migration Primer": [[31, "dendropy-4-changes-and-migration-primer"]], "Introduction": [[31, "introduction"], [57, "introduction"]], "Python Version Compatibility": [[31, "python-version-compatibility"]], "Library-Wide Changes": [[31, "library-wide-changes"]], "Public Module Reorganization": [[31, "public-module-reorganization"]], "Behind-the-Scenes Module Reorganization": [[31, "behind-the-scenes-module-reorganization"]], "Unique Object Identifier (\u201doid\u201d) Attributes Removed": [[31, "unique-object-identifier-oid-attributes-removed"]], "TaxonSet is now TaxonNamespace": [[31, "taxonset-is-now-taxonnamespace"]], "NEWICK-format Reading": [[31, "newick-format-reading"]], "NEWICK-format Writing": [[31, "newick-format-writing"]], "The DataSet Class": [[31, "the-dataset-class"]], "DendroPy News": [[32, "dendropy-news"]], "2018-05-07": [[32, "id1"]], "2017-06-17": [[32, "id2"]], "2016-12-28": [[32, "id3"], [32, "id4"]], "2016-03-16": [[32, "id5"]], "2015-04-06": [[32, "id6"]], "Ongoing Development": [[33, "ongoing-development"]], "Objectives": [[33, "objectives"]], "Governance": [[33, "governance"]], "Roadmap": [[33, "roadmap"]], "Version 5.0": [[33, "version-5-0"]], "Long-term Goals": [[33, "long-term-goals"]], "Bipartitions": [[34, "bipartitions"]], "Modeling Bipartitions": [[34, "modeling-bipartitions"]], "A Bipartition is a Partitioning of Taxa Corresponding to an Edge of a Tree": [[34, "a-bipartition-is-a-partitioning-of-taxa-corresponding-to-an-edge-of-a-tree"]], "A Bipartition Can Be Described by a Bitmask": [[34, "a-bipartition-can-be-described-by-a-bitmask"]], "Modeling Bipartitions Using Leafset Bitmasks and Split Bitmasks": [[34, "modeling-bipartitions-using-leafset-bitmasks-and-split-bitmasks"]], "Using Bipartitions": [[34, "using-bipartitions"]], "Bipartition Encoding": [[34, "bipartition-encoding"]], "Calculating Bipartitions on Trees": [[34, "calculating-bipartitions-on-trees"]], "Types of Character Matrices": [[35, "types-of-character-matrices"]], "Reading and Writing Character Data": [[35, "reading-and-writing-character-data"]], "Creating a Character Data Matrix from a Dictionary of Strings": [[35, "creating-a-character-data-matrix-from-a-dictionary-of-strings"]], "Taxon Management with Character Matrices": [[35, "taxon-management-with-character-matrices"]], "Concatenating Multiple Data Matrices": [[35, "concatenating-multiple-data-matrices"]], "Sequence Management": [[35, "sequence-management"]], "Accessing Data": [[35, "accessing-data"]], "Converting Between Data Formats": [[36, "converting-between-data-formats"]], "Introduction to Phylogenetic Data Objects": [[37, "introduction-to-phylogenetic-data-objects"]], "Primary Phylogenetic Data Objects": [[37, "primary-phylogenetic-data-objects"]], "Creating New (Empty) Objects": [[37, "creating-new-empty-objects"]], "Reading, Writing, and Annotating Phylogenetic Data": [[37, "reading-writing-and-annotating-phylogenetic-data"]], "Data Sets": [[38, "data-sets"]], "DataSet Creation and Reading": [[38, "dataset-creation-and-reading"]], "Reading and Writing DataSet Objects": [[38, "reading-and-writing-dataset-objects"]], "Creating a New DataSet from Existing TreeList and CharacterMatrix Objects": [[38, "creating-a-new-dataset-from-existing-treelist-and-charactermatrix-objects"]], "Adding Data to an Exisiting DataSet": [[38, "adding-data-to-an-exisiting-dataset"]], "Taxon Management with Data Sets": [[38, "taxon-management-with-data-sets"]], "Detached (Multiple) Taxon Set Mode": [[38, "detached-multiple-taxon-set-mode"]], "Attached (Single) Taxon Set Mode": [[38, "attached-single-taxon-set-mode"]], "Switching Between Attached and Detached Taxon Set Modes": [[38, "switching-between-attached-and-detached-taxon-set-modes"]], "Working with GenBank Molecular Sequence Databases": [[39, "working-with-genbank-molecular-sequence-databases"]], "Quick Start": [[39, "quick-start"]], "Acquiring Data from GeneBank": [[39, "acquiring-data-from-genebank"]], "Accessing GenBank Records": [[39, "accessing-genbank-records"]], "Generating Character Matrix Objects from GenBank Data": [[39, "generating-character-matrix-objects-from-genbank-data"]], "Customizing/Controlling Sequence Taxa": [[39, "customizing-controlling-sequence-taxa"]], "Specifying a Custom Label for Sequence Taxa": [[39, "specifying-a-custom-label-for-sequence-taxa"]], "Specifying a Custom Taxon-Discovery Function": [[39, "specifying-a-custom-taxon-discovery-function"]], "Adding the GenBank Record as an Attribute": [[39, "adding-the-genbank-record-as-an-attribute"]], "Annotating with GenBank Data and Metadata": [[39, "annotating-with-genbank-data-and-metadata"]], "Reference Annotation": [[39, "reference-annotation"]], "Full Annotation": [[39, "full-annotation"]], "The DendroPy Primer": [[40, "the-dendropy-primer"]], "The DendroPy Data Model: Phylogenetic Data Objects": [[40, "the-dendropy-data-model-phylogenetic-data-objects"]], "Working with Taxa: Operational Taxonomic Units and Taxon Namespaces": [[40, "working-with-taxa-operational-taxonomic-units-and-taxon-namespaces"]], "Working with Trees and Tree Lists": [[40, "working-with-trees-and-tree-lists"]], "Working with Character Data: Sequences and Matrices": [[40, "working-with-character-data-sequences-and-matrices"]], "Working with Phylogenetic Distances": [[40, "working-with-phylogenetic-distances"]], "Working with Data Sets": [[40, "working-with-data-sets"]], "Working with Metadata Annotations": [[40, "working-with-metadata-annotations"], [55, "working-with-metadata-annotations"]], "Interoperability with Other Programs, Libraries and Applications": [[40, "interoperability-with-other-programs-libraries-and-applications"]], "PAUP": [[41, "paup"]], "Phylogenetic Character Analyses": [[42, "phylogenetic-character-analyses"]], "Phylogenetic Independent Contrasts (PIC)": [[42, "phylogenetic-independent-contrasts-pic"]], "Basic Analysis": [[42, "basic-analysis"]], "Results as a Table": [[42, "results-as-a-table"]], "Results as a Newick String with State Values as Node Labels": [[42, "results-as-a-newick-string-with-state-values-as-node-labels"]], "Results as a NEXUS Document with Analysis Statistics as Node Metadata": [[42, "results-as-a-nexus-document-with-analysis-statistics-as-node-metadata"]], "Multifurcating Trees and Polytomies": [[42, "multifurcating-trees-and-polytomies"]], "Phylogenetic Distance-Based Operations": [[43, "phylogenetic-distance-based-operations"]], "Creating a PhylogeneticDistanceMatrix Object": [[43, "creating-a-phylogeneticdistancematrix-object"]], "Creating a PhylogeneticDistanceMatrix Object From a Tree": [[43, "creating-a-phylogeneticdistancematrix-object-from-a-tree"]], "Creating a PhylogeneticDistanceMatrix Object From an External Data Source": [[43, "creating-a-phylogeneticdistancematrix-object-from-an-external-data-source"]], "Calculating Patristic Distances and Most-Recent Common Ancestors (MRCA)": [[43, "calculating-patristic-distances-and-most-recent-common-ancestors-mrca"]], "Generating Distance Trees from a PhylogeneticDistanceMatrix Object": [[43, "generating-distance-trees-from-a-phylogeneticdistancematrix-object"]], "Neighbor-Joining Trees": [[43, "neighbor-joining-trees"]], "UPGMA Trees": [[43, "upgma-trees"]], "Phylogenetic Community Statistics": [[43, "phylogenetic-community-statistics"]], "Basic Phylogenetic Community Statistics": [[43, "basic-phylogenetic-community-statistics"]], "Standardized Effect Size Statistics": [[43, "standardized-effect-size-statistics"]], "Population Genetic Summary Statistics": [[44, "population-genetic-summary-statistics"]], "RAxML": [[45, "id1"]], "Reading and Writing Phylogenetic Data": [[46, "reading-and-writing-phylogenetic-data"]], "Creating New Objects From an External Data Source": [[46, "creating-new-objects-from-an-external-data-source"]], "Adding Data to Existing Objects from an External Data Source": [[46, "adding-data-to-existing-objects-from-an-external-data-source"]], "Writing Out Phylogenetic Data": [[46, "writing-out-phylogenetic-data"]], "Seq-Gen": [[47, "seq-gen"]], "Taxon Namespaces and Taxon Management": [[48, "taxon-namespaces-and-taxon-management"]], "Conceptual Background": [[48, "conceptual-background"]], "Management of Shared Taxon Namespaces": [[48, "management-of-shared-taxon-namespaces"]], "Managing Taxon Name Mapping Within a Taxon Namespace": [[48, "managing-taxon-name-mapping-within-a-taxon-namespace"]], "Partitions of Taxon Sets": [[49, "partitions-of-taxon-sets"]], "Collections of Trees": [[50, "collections-of-trees"]], "Collections of Trees: The TreeList Class": [[50, "collections-of-trees-the-treelist-class"]], "Reading and Writing TreeList Instances": [[50, "reading-and-writing-treelist-instances"]], "Using and Managing the Collections of Trees": [[50, "using-and-managing-the-collections-of-trees"]], "Cloning/Copying a TreeList": [[50, "cloning-copying-a-treelist"]], "Efficiently Iterating Over Trees in a File": [[50, "efficiently-iterating-over-trees-in-a-file"]], "Tree Manipulation and Restructuring": [[51, "tree-manipulation-and-restructuring"]], "Rooting, Derooting and Rerooting": [[51, "rooting-derooting-and-rerooting"]], "The Rooting of Tree(s) Read from External Sources": [[51, "the-rooting-of-tree-s-read-from-external-sources"]], "Setting the Rooting State": [[51, "setting-the-rooting-state"]], "Derooting": [[51, "derooting"]], "Rerooting": [[51, "rerooting"]], "Pruning Subtrees and Tips": [[51, "pruning-subtrees-and-tips"]], "Extracting Trees and Subtrees from an Existing Tree": [[51, "extracting-trees-and-subtrees-from-an-existing-tree"]], "Rotating": [[51, "rotating"]], "Trees": [[52, "trees"]], "Reading and Writing Tree Instances": [[52, "reading-and-writing-tree-instances"]], "Cloning/Copying a Tree": [[52, "cloning-copying-a-tree"]], "Tree Traversal": [[52, "tree-traversal"]], "Iterating Over Nodes": [[52, "iterating-over-nodes"]], "Iterating Over Edges": [[52, "iterating-over-edges"]], "Finding Nodes on Trees": [[52, "finding-nodes-on-trees"]], "Nodes with Particular Taxa": [[52, "nodes-with-particular-taxa"]], "Most Recent Common Ancestors": [[52, "most-recent-common-ancestors"]], "Viewing and Displaying Trees": [[52, "viewing-and-displaying-trees"]], "Building a Tree Programmatically": [[52, "building-a-tree-programmatically"]], "Tree Simulation and Generation": [[53, "tree-simulation-and-generation"]], "Birth-Death Process Trees": [[53, "birth-death-process-trees"]], "Specifying a TaxonNamespace": [[53, "specifying-a-taxonnamespace"]], "Repeating Failed Branching Processes": [[53, "repeating-failed-branching-processes"]], "Suppressing Taxon Assignment": [[53, "suppressing-taxon-assignment"]], "Extending an Existing Tree": [[53, "extending-an-existing-tree"]], "Evolving Birth and Death Rates": [[53, "evolving-birth-and-death-rates"]], "Building a Tree in Multiple Stages under Different Conditions": [[53, "building-a-tree-in-multiple-stages-under-different-conditions"]], "Star Trees": [[53, "star-trees"]], "(Pure Neutral) Coalescent Trees": [[53, "pure-neutral-coalescent-trees"]], "Multispecies Coalescent (\u201cContained Coalescent\u201d or \u201cCensored Coalescent\u201d) Trees": [[53, "multispecies-coalescent-contained-coalescent-or-censored-coalescent-trees"]], "Simulating the Distribution of Number Deep Coalescences Under Different Phylogeographic History Scenarios": [[53, "simulating-the-distribution-of-number-deep-coalescences-under-different-phylogeographic-history-scenarios"]], "Tree Statistics, Metrics, Summarizations, and Other Calculations": [[54, "tree-statistics-metrics-summarizations-and-other-calculations"]], "Native Tree Statistic and Metric Methods": [[54, "native-tree-statistic-and-metric-methods"]], "Tree Length": [[54, "tree-length"]], "Node Ages": [[54, "node-ages"]], "Number of Lineages at a Particular Time and Lineage Through Time Plots": [[54, "number-of-lineages-at-a-particular-time-and-lineage-through-time-plots"]], "Unary Tree Statistics and Metrics": [[54, "unary-tree-statistics-and-metrics"]], "Pybus-Harvey Gamma": [[54, "pybus-harvey-gamma"]], "Patristic Distances": [[54, "patristic-distances"]], "Comparing and Summarizing Trees": [[54, "comparing-and-summarizing-trees"]], "Distances Between Trees": [[54, "distances-between-trees"]], "Unweighted Robinson-Foulds Distance": [[54, "unweighted-robinson-foulds-distance"]], "Weighted Robinson-Foulds Distance": [[54, "weighted-robinson-foulds-distance"]], "Euclidean Distance": [[54, "euclidean-distance"]], "Majority-Rule Consensus Tree from a Collection of Trees": [[54, "majority-rule-consensus-tree-from-a-collection-of-trees"]], "Frequency of a Split in a Collection of Trees": [[54, "frequency-of-a-split-in-a-collection-of-trees"]], "The Maximum Clade Credibility Tree: The Tree that Maximizes the Product of Split Support": [[54, "the-maximum-clade-credibility-tree-the-tree-that-maximizes-the-product-of-split-support"]], "Scoring Trees Under the Coalescent": [[54, "scoring-trees-under-the-coalescent"]], "Probability Under the Coalescent Model": [[54, "probability-under-the-coalescent-model"]], "Numbers of Deep Coalescences": [[54, "numbers-of-deep-coalescences"]], "Number of Deep Coalescences when Embedding One Tree in Another (e.g. Gene/Species Trees)": [[54, "number-of-deep-coalescences-when-embedding-one-tree-in-another-e-g-gene-species-trees"]], "Overview of the Infrastructure for Metadata Annotation in DendroPy": [[55, "overview-of-the-infrastructure-for-metadata-annotation-in-dendropy"]], "Metadata Annotation Creation": [[55, "metadata-annotation-creation"]], "Reading Data from an External Source": [[55, "reading-data-from-an-external-source"]], "Direct Composition with Literal Values": [[55, "direct-composition-with-literal-values"]], "Dynamically Binding Annotation Values to Object Attribute Values": [[55, "dynamically-binding-annotation-values-to-object-attribute-values"]], "Adding Citation Metadata": [[55, "adding-citation-metadata"]], "Copying Metadata Annotations from One Phylogenetic Data Object to Another": [[55, "copying-metadata-annotations-from-one-phylogenetic-data-object-to-another"]], "Metadata Annotation Access and Manipulation": [[55, "metadata-annotation-access-and-manipulation"]], "Iterating Over Collections of Annotations": [[55, "iterating-over-collections-of-annotations"]], "Retrieving Annotations By Search Criteria": [[55, "retrieving-annotations-by-search-criteria"]], "Retrieving a Single Annotation By Search Criteria": [[55, "retrieving-a-single-annotation-by-search-criteria"]], "Retrieving the Value of a Single Annotation": [[55, "retrieving-the-value-of-a-single-annotation"]], "Transforming Annotations to a Dictionary": [[55, "transforming-annotations-to-a-dictionary"]], "Deleting or Removing Metadata Annotations": [[55, "deleting-or-removing-metadata-annotations"]], "Writing or Saving Metadata": [[55, "writing-or-saving-metadata"]], "Programs and Applications": [[56, "programs-and-applications"]], "SumTrees: Phylogenetic Tree Summarization and Annotation": [[57, "sumtrees-phylogenetic-tree-summarization-and-annotation"]], "Where to Find the Package": [[57, "where-to-find-the-package"]], "How to Install the Package": [[57, "how-to-install-the-package"]], "Checking the Installation": [[57, "checking-the-installation"]], "How to Use the Program": [[57, "how-to-use-the-program"]], "Quick Recipes": [[57, "quick-recipes"]], "Summarization of Posterior Probabilities of Clades with a Consensus Tree": [[57, "summarization-of-posterior-probabilities-of-clades-with-a-consensus-tree"]], "Summarization of Posterior Probabilities of Clades with a Maximum Clade Credibility Tree (MCCT)": [[57, "summarization-of-posterior-probabilities-of-clades-with-a-maximum-clade-credibility-tree-mcct"]], "Non-parametric Bootstrap Support of a Model Tree": [[57, "non-parametric-bootstrap-support-of-a-model-tree"]], "Set Node Ages of Target or Summary Tree(s) to Mean/Median Node Age of Input Trees": [[57, "set-node-ages-of-target-or-summary-tree-s-to-mean-median-node-age-of-input-trees"]], "Running in Parallel Mode": [[57, "running-in-parallel-mode"]], "Primers and Examples": [[57, "primers-and-examples"]], "Specifying and Customization of the Summarization Target": [[57, "specifying-and-customization-of-the-summarization-target"]], "Specifying a Summarization Topology Type": [[57, "specifying-a-summarization-topology-type"]], "Majority-Rule Consensus Topology": [[57, "majority-rule-consensus-topology"]], "Maximum Clade Credibility Topology": [[57, "maximum-clade-credibility-topology"]], "Specifying a Custom Topology or Set of Topologies": [[57, "specifying-a-custom-topology-or-set-of-topologies"]], "Collapsing Clades/Edges/Splits Below a Minimum Support Frequency Threshold": [[57, "collapsing-clades-edges-splits-below-a-minimum-support-frequency-threshold"]], "Summarizing Edge Lengths": [[57, "summarizing-edge-lengths"]], "Summarizing Rooted and Ultrametric Trees": [[57, "summarizing-rooted-and-ultrametric-trees"]], "Forcing Trees to be Treated as Rooted": [[57, "forcing-trees-to-be-treated-as-rooted"]], "Summarizing Node Ages": [[57, "summarizing-node-ages"]], "Setting the Node Ages of the Summary Trees": [[57, "setting-the-node-ages-of-the-summary-trees"]], "Rooting the Target Topology": [[57, "rooting-the-target-topology"]], "Assigning the Ages of Non-Contemporaneous Tips (\u201cTip-Dating\u201d)": [[57, "assigning-the-ages-of-non-contemporaneous-tips-tip-dating"]], "Parallelizing SumTrees": [[57, "parallelizing-sumtrees"]], "Basics": [[57, "basics"]], "Parallelization Strategy: Deciding on the Number of Processes": [[57, "parallelization-strategy-deciding-on-the-number-of-processes"]], "Running Parallel-Mode SumTrees in a Parallel Environment on a High-Performance Computing (HPC) Cluster": [[57, "running-parallel-mode-sumtrees-in-a-parallel-environment-on-a-high-performance-computing-hpc-cluster"]], "Improving Performance": [[57, "improving-performance"]], "Troubleshooting": [[57, "troubleshooting"]], "My Computer Does Not Know What a Python Is": [[57, "my-computer-does-not-know-what-a-python-is"]], "Manual Installation": [[57, "manual-installation"]], "Repository Access": [[57, "repository-access"]], "Bugs, Suggestions, Comments, etc.": [[57, "bugs-suggestions-comments-etc"]], "How to Cite this Program": [[57, "how-to-cite-this-program"]], "FASTA": [[58, "fasta"]], "Description": [[58, "description"], [60, "description"], [61, "description"], [62, "description"], [63, "description"]], "Reading": [[58, "reading"], [60, "reading"], [61, "reading"], [62, "reading"], [63, "reading"]], "Schema-Specific Keyword Arguments": [[58, "schema-specific-keyword-arguments"], [58, "schema-specific-keyword-arguments-writing-fasta"], [60, "schema-specific-keyword-arguments"], [60, "schema-specific-keyword-arguments-writing-newick"], [61, "schema-specific-keyword-arguments"], [61, "schema-specific-keyword-arguments-writing-nexml"], [62, "schema-specific-keyword-arguments"], [62, "schema-specific-keyword-arguments-writing-nexus"], [63, "schema-specific-keyword-arguments"], [63, "schema-specific-keyword-arguments-writing-phylip"]], "Supported Methods": [[58, "supported-methods"], [58, "id2"], [60, "supported-methods"], [60, "id2"], [61, "supported-methods"], [61, "id2"], [62, "supported-methods"], [62, "id2"], [63, "supported-methods"], [63, "id2"]], "DnaCharacterMatrix.get": [[58, "dnacharactermatrix-get"], [61, "dnacharactermatrix-get"], [62, "dnacharactermatrix-get"], [63, "dnacharactermatrix-get"]], "RnaCharacterMatrix.get": [[58, "rnacharactermatrix-get"], [61, "rnacharactermatrix-get"], [62, "rnacharactermatrix-get"], [63, "rnacharactermatrix-get"]], "ProteinCharacterMatrix.get": [[58, "proteincharactermatrix-get"], [61, "proteincharactermatrix-get"], [62, "proteincharactermatrix-get"], [63, "proteincharactermatrix-get"]], "RestrictionSitesCharacterMatrix.get": [[58, "restrictionsitescharactermatrix-get"], [61, "restrictionsitescharactermatrix-get"], [62, "restrictionsitescharactermatrix-get"], [63, "restrictionsitescharactermatrix-get"]], "InfiniteSitesCharacterMatrix.get": [[58, "infinitesitescharactermatrix-get"], [61, "infinitesitescharactermatrix-get"], [62, "infinitesitescharactermatrix-get"], [63, "infinitesitescharactermatrix-get"]], "StandardCharacterMatrix.get": [[58, "standardcharactermatrix-get"], [61, "standardcharactermatrix-get"], [62, "standardcharactermatrix-get"], [63, "standardcharactermatrix-get"]], "DataSet.get": [[58, "dataset-get"], [60, "dataset-get"], [61, "dataset-get"], [62, "dataset-get"], [63, "dataset-get"]], "DataSet.read": [[58, "dataset-read"], [60, "dataset-read"], [61, "dataset-read"], [62, "dataset-read"], [63, "dataset-read"]], "Writing": [[58, "writing"], [60, "writing"], [61, "writing"], [62, "writing"], [63, "writing"]], "DnaCharacterMatrix.write": [[58, "dnacharactermatrix-write"], [61, "dnacharactermatrix-write"], [62, "dnacharactermatrix-write"], [63, "dnacharactermatrix-write"]], "DnaCharacterMatrix.as_string": [[58, "dnacharactermatrix-as-string"], [61, "dnacharactermatrix-as-string"], [62, "dnacharactermatrix-as-string"], [63, "dnacharactermatrix-as-string"]], "RnaCharacterMatrix.write": [[58, "rnacharactermatrix-write"], [61, "rnacharactermatrix-write"], [62, "rnacharactermatrix-write"], [63, "rnacharactermatrix-write"]], "RnaCharacterMatrix.as_string": [[58, "rnacharactermatrix-as-string"], [61, "rnacharactermatrix-as-string"], [62, "rnacharactermatrix-as-string"], [63, "rnacharactermatrix-as-string"]], "ProteinCharacterMatrix.write": [[58, "proteincharactermatrix-write"], [61, "proteincharactermatrix-write"], [62, "proteincharactermatrix-write"], [63, "proteincharactermatrix-write"]], "ProteinCharacterMatrix.as_string": [[58, "proteincharactermatrix-as-string"], [61, "proteincharactermatrix-as-string"], [62, "proteincharactermatrix-as-string"], [63, "proteincharactermatrix-as-string"]], "RestrictionSitesCharacterMatrix.write": [[58, "restrictionsitescharactermatrix-write"], [61, "restrictionsitescharactermatrix-write"], [62, "restrictionsitescharactermatrix-write"], [63, "restrictionsitescharactermatrix-write"]], "RestrictionSitesCharacterMatrix.as_string": [[58, "restrictionsitescharactermatrix-as-string"], [61, "restrictionsitescharactermatrix-as-string"], [62, "restrictionsitescharactermatrix-as-string"], [63, "restrictionsitescharactermatrix-as-string"]], "InfiniteSitesCharacterMatrix.write": [[58, "infinitesitescharactermatrix-write"], [61, "infinitesitescharactermatrix-write"], [62, "infinitesitescharactermatrix-write"], [63, "infinitesitescharactermatrix-write"]], "InfiniteSitesCharacterMatrix.as_string": [[58, "infinitesitescharactermatrix-as-string"], [61, "infinitesitescharactermatrix-as-string"], [62, "infinitesitescharactermatrix-as-string"], [63, "infinitesitescharactermatrix-as-string"]], "StandardCharacterMatrix.write": [[58, "standardcharactermatrix-write"], [61, "standardcharactermatrix-write"], [62, "standardcharactermatrix-write"], [63, "standardcharactermatrix-write"]], "StandardCharacterMatrix.as_string": [[58, "standardcharactermatrix-as-string"], [61, "standardcharactermatrix-as-string"], [62, "standardcharactermatrix-as-string"], [63, "standardcharactermatrix-as-string"]], "DataSet.write": [[58, "dataset-write"], [60, "dataset-write"], [61, "dataset-write"], [62, "dataset-write"], [63, "dataset-write"]], "DataSet.as_string": [[58, "dataset-as-string"], [60, "dataset-as-string"], [61, "dataset-as-string"], [62, "dataset-as-string"], [63, "dataset-as-string"]], "DendroPy Schemas: Phylogenetic and Evolutionary Biology Data Formats": [[59, "dendropy-schemas-phylogenetic-and-evolutionary-biology-data-formats"]], "Contents": [[59, "contents"]], "Newick": [[60, "newick"]], "Tree.get": [[60, "tree-get"], [61, "tree-get"], [62, "tree-get"]], "TreeList.get": [[60, "treelist-get"], [61, "treelist-get"], [62, "treelist-get"]], "TreeList.read": [[60, "treelist-read"], [61, "treelist-read"], [62, "treelist-read"]], "TreeArray.read": [[60, "treearray-read"], [61, "treearray-read"], [62, "treearray-read"]], "Tree.write": [[60, "tree-write"], [61, "tree-write"], [62, "tree-write"]], "Tree.as_string": [[60, "tree-as-string"], [61, "tree-as-string"], [62, "tree-as-string"]], "TreeList.write": [[60, "treelist-write"], [61, "treelist-write"], [62, "treelist-write"]], "TreeList.as_string": [[60, "treelist-as-string"], [61, "treelist-as-string"], [62, "treelist-as-string"]], "NeXML": [[61, "nexml"]], "NEXUS": [[62, "nexus"]], "PHYLIP": [[63, "phylip"]]}, "indexentries": {"ancestor node": [[4, "term-ancestor-node"]], "ancestor nodes": [[4, "term-ancestor-nodes"]], "arborescence": [[4, "term-arborescence"]], "basal": [[4, "term-basal"]], "basal bifurcation": [[4, "term-basal-bifurcation"]], "basal node": [[4, "term-basal-node"]], "basal trifurcation": [[4, "term-basal-trifurcation"]], "bifurcating node": [[4, "term-bifurcating-node"]], "bifurcating tree": [[4, "term-bifurcating-tree"]], "bifurcation": [[4, "term-bifurcation"]], "bipartition": [[4, "term-bipartition"]], "branch": [[4, "term-branch"]], "child node": [[4, "term-child-node"]], "descendent nodes": [[4, "term-descendent-nodes"]], "destination node": [[4, "term-destination-node"]], "edge": [[4, "term-edge"]], "edge length": [[4, "term-edge-length"]], "edge weight": [[4, "term-edge-weight"]], "external edge": [[4, "term-external-edge"]], "external node": [[4, "term-external-node"]], "head node": [[4, "term-head-node"]], "incident edge": [[4, "term-incident-edge"]], "internal edge": [[4, "term-internal-edge"]], "internal node": [[4, "term-internal-node"]], "leaf edge": [[4, "term-leaf-edge"]], "leaf node": [[4, "term-leaf-node"]], "node": [[4, "term-node"]], "node depth": [[4, "term-node-depth"]], "node height": [[4, "term-node-height"]], "operational taxonomic unit": [[4, "term-operational-taxonomic-unit"]], "origin node": [[4, "term-origin-node"]], "outer edge": [[4, "term-outer-edge"]], "outer node": [[4, "term-outer-node"]], "outgoing edge": [[4, "term-outgoing-edge"]], "parent node": [[4, "term-parent-node"]], "path": [[4, "term-path"]], "path length": [[4, "term-path-length"]], "path weight": [[4, "term-path-weight"]], "postorder traversal": [[4, "term-postorder-traversal"]], "preorder traversal": [[4, "term-preorder-traversal"]], "root node": [[4, "term-root-node"]], "rooted tree": [[4, "term-rooted-tree"]], "schema": [[4, "term-schema"]], "seed node": [[4, "term-seed-node"]], "sibling node": [[4, "term-sibling-node"]], "sister node": [[4, "term-sister-node"]], "source node": [[4, "term-source-node"]], "split": [[4, "term-split"]], "subtending edge": [[4, "term-subtending-edge"]], "subtree": [[4, "term-subtree"]], "tail node": [[4, "term-tail-node"]], "target node": [[4, "term-target-node"]], "taxon": [[4, "term-taxon"]], "taxon concept": [[4, "term-taxon-concept"]], "taxon name": [[4, "term-taxon-name"]], "taxon namespace": [[4, "term-taxon-namespace"]], "terminal edge": [[4, "term-terminal-edge"]], "terminal node": [[4, "term-terminal-node"]], "tip node": [[4, "term-tip-node"]], "tree": [[4, "term-tree"]], "unifurcating node": [[4, "term-unifurcating-node"]], "unifurcation": [[4, "term-unifurcation"]], "unrooted tree": [[4, "term-unrooted-tree"]], "unweighted path": [[4, "term-unweighted-path"]], "weighted path": [[4, "term-weighted-path"]], "annotable (class in dendropy.datamodel.basemodel)": [[6, "dendropy.datamodel.basemodel.Annotable"]], "annotation (class in dendropy.datamodel.basemodel)": [[6, "dendropy.datamodel.basemodel.Annotation"]], "annotationset (class in dendropy.datamodel.basemodel)": [[6, "dendropy.datamodel.basemodel.AnnotationSet"]], "bibtexentry (class in dendropy.utility.bibtex)": [[6, "dendropy.utility.bibtex.BibTexEntry"]], "dataobject (class in dendropy.datamodel.basemodel)": [[6, "dendropy.datamodel.basemodel.DataObject"]], "__add__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__add__"]], "__contains__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__contains__"]], "__copy__() (dendropy.datamodel.basemodel.annotable method)": [[6, "dendropy.datamodel.basemodel.Annotable.__copy__"]], "__delattr__() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.__delattr__"]], "__delitem__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__delitem__"]], "__getattr__() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.__getattr__"]], "__getitem__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__getitem__"]], "__iter__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__iter__"]], "__repr__() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.__repr__"]], "__reversed__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__reversed__"]], "__setattr__() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.__setattr__"]], "__setitem__() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.__setitem__"]], "__str__() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.__str__"]], "add() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.add"]], "add_bibtex() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.add_bibtex"]], "add_bound_attribute() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.add_bound_attribute"]], "add_citation() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.add_citation"]], "add_new() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.add_new"]], "as_bibtex() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.as_bibtex"]], "as_compact_bibtex() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.as_compact_bibtex"]], "clone() (dendropy.datamodel.basemodel.annotation method)": [[6, "dendropy.datamodel.basemodel.Annotation.clone"]], "clone() (dendropy.datamodel.basemodel.dataobject method)": [[6, "dendropy.datamodel.basemodel.DataObject.clone"]], "copy_annotations_from() (dendropy.datamodel.basemodel.annotable method)": [[6, "dendropy.datamodel.basemodel.Annotable.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.basemodel.annotation method)": [[6, "dendropy.datamodel.basemodel.Annotation.copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.basemodel.annotable method)": [[6, "dendropy.datamodel.basemodel.Annotable.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.basemodel.annotation method)": [[6, "dendropy.datamodel.basemodel.Annotation.deep_copy_annotations_from"]], "dendropy.datamodel.basemodel": [[6, "module-dendropy.datamodel.basemodel"]], "discard() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.discard"]], "drop() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.drop"]], "fields (dendropy.utility.bibtex.bibtexentry property)": [[6, "dendropy.utility.bibtex.BibTexEntry.fields"]], "fields_as_dict() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.fields_as_dict"]], "find() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.find"]], "findall() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.findall"]], "get_value() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.get_value"]], "index() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.index"]], "module": [[6, "module-dendropy.datamodel.basemodel"], [7, "module-dendropy.model.birthdeath"], [8, "module-dendropy.datamodel.charmatrixmodel"], [9, "module-dendropy.datamodel.charstatemodel"], [10, "module-dendropy.model.coalescent"], [11, "module-dendropy.model.continuous"], [13, "module-dendropy.model.discrete"], [15, "module-dendropy.model.parsimony"], [16, "module-dendropy.calculate.phylogeneticdistance"], [17, "module-dendropy.simulate.popgensim"], [18, "module-dendropy.calculate.popgenstat"], [19, "module-dendropy.calculate.probability"], [20, "module-dendropy.model.protractedspeciation"], [21, "module-dendropy.model.reconcile"], [22, "module-dendropy.calculate.statistics"], [23, "module-dendropy.datamodel.taxonmodel"], [24, "module-dendropy.datamodel.treecollectionmodel"], [25, "module-dendropy.calculate.treecompare"], [26, "module-dendropy.calculate.treemeasure"], [27, "module-dendropy.datamodel.treemodel"], [28, "module-dendropy.calculate.treescore"], [29, "module-dendropy.model.treeshape"], [30, "module-dendropy.simulate.treesim"]], "next() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.next"]], "parse_text() (dendropy.utility.bibtex.bibtexentry method)": [[6, "dendropy.utility.bibtex.BibTexEntry.parse_text"]], "pop() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.pop"]], "remove() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.remove"]], "require_value() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.require_value"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.basemodel.dataobject method)": [[6, "dendropy.datamodel.basemodel.DataObject.taxon_namespace_scoped_copy"]], "update() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.update"]], "values_as_dict() (dendropy.datamodel.basemodel.annotationset method)": [[6, "dendropy.datamodel.basemodel.AnnotationSet.values_as_dict"]], "birth_death_likelihood() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.birth_death_likelihood"]], "birth_death_tree() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.birth_death_tree"]], "dendropy.model.birthdeath": [[7, "module-dendropy.model.birthdeath"]], "discrete_birth_death_tree() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.discrete_birth_death_tree"]], "fit_pure_birth_model() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.fit_pure_birth_model"]], "fit_pure_birth_model_to_tree() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.fit_pure_birth_model_to_tree"]], "uniform_pure_birth_tree() (in module dendropy.model.birthdeath)": [[7, "dendropy.model.birthdeath.uniform_pure_birth_tree"]], "characterdatasequence (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence"]], "charactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix"]], "charactersubset (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterSubset"]], "charactertype (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterType"]], "continuouscharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix"]], "dnacharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix"]], "infinitesitescharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix"]], "proteincharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix"]], "restrictionsitescharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix"]], "rnacharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix"]], "standardcharactermatrix (class in dendropy.datamodel.charmatrixmodel)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.__delitem__"]], "__delitem__() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.__delitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.__getitem__"]], "__getitem__() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.__getitem__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.__iter__"]], "__iter__() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.__iter__"]], "__len__() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.__len__"]], "__len__() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.__len__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.__setitem__"]], "__setitem__() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.__setitem__"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.add_character_subset"]], "add_character_subset() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.add_character_subset"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.add_sequences"]], "add_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.add_sequences"]], "annotations_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.annotations_at"]], "append() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.append"]], "as_string() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.as_string"]], "as_string() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.as_string"]], "cell_iter() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.cell_iter"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.charactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.dnacharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.proteincharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.rnacharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.character_sequence_type"]], "character_sequence_type (dendropy.datamodel.charmatrixmodel.standardcharactermatrix attribute)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.character_sequence_type"]], "character_type_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.character_type_at"]], "clear() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.clear"]], "clear() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.clear"]], "clone() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.clone"]], "clone() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.clone"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.coerce_values"]], "coerce_values() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.coerce_values"]], "concatenate() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.concatenate"]], "concatenate() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.concatenate"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.concatenate_from_paths"]], "concatenate_from_paths() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.concatenate_from_paths"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.concatenate_from_streams"]], "concatenate_from_streams() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.concatenate_from_streams"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.deep_copy_annotations_from"]], "dendropy.datamodel.charmatrixmodel": [[8, "module-dendropy.datamodel.charmatrixmodel"]], "description() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.description"]], "description() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.description"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.discard_sequences"]], "discard_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.discard_sequences"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.export_character_indices"]], "export_character_indices() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.export_character_indices"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.export_character_subset"]], "export_character_subset() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.export_character_subset"]], "extend() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.extend"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.extend_matrix"]], "extend_matrix() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.extend_matrix"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.extend_sequences"]], "extend_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.extend_sequences"]], "fill() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.fill"]], "fill() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.fill"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.fill_taxa"]], "fill_taxa() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.fill_taxa"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.folded_site_frequency_spectrum"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.folded_site_frequency_spectrum"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.folded_site_frequency_spectrum"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.folded_site_frequency_spectrum"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.folded_site_frequency_spectrum"]], "folded_site_frequency_spectrum() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.folded_site_frequency_spectrum"]], "from_dict() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.from_dict"]], "from_dict() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.from_dict"]], "get() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.get"]], "get() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.get"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.get_from_path"]], "get_from_path() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.get_from_path"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.get_from_stream"]], "get_from_stream() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.get_from_stream"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.get_from_string"]], "get_from_string() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.get_from_string"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.charactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.get_from_url"]], "get_from_url() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix class method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.get_from_url"]], "has_annotations_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.has_annotations_at"]], "insert() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.insert"]], "items() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.items"]], "items() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.items"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.keep_sequences"]], "keep_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.keep_sequences"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.charactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.dnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.proteincharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.rnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.max_sequence_size"]], "max_sequence_size (dendropy.datamodel.charmatrixmodel.standardcharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.max_sequence_size"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.migrate_taxon_namespace"]], "migrate_taxon_namespace() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.migrate_taxon_namespace"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.new_character_subset"]], "new_character_subset() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.new_character_subset"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.new_sequence"]], "new_sequence() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.new_sequence"]], "pack() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.pack"]], "pack() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.pack"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.poll_taxa"]], "poll_taxa() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.poll_taxa"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.purge_taxon_namespace"]], "purge_taxon_namespace() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.purge_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.reconstruct_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.reconstruct_taxon_namespace"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_subcomponent_taxa() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.reindex_subcomponent_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.reindex_taxa"]], "reindex_taxa() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.reindex_taxa"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_default_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.remap_to_default_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remap_to_state_alphabet_by_symbol() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.remap_to_state_alphabet_by_symbol"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.remove_sequences"]], "remove_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.remove_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.replace_sequences"]], "replace_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.replace_sequences"]], "sequence_size (dendropy.datamodel.charmatrixmodel.charactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.dnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.proteincharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.rnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.sequence_size"]], "sequence_size (dendropy.datamodel.charmatrixmodel.standardcharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.sequence_size"]], "sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.sequences"]], "sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.sequences"]], "set_annotations_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.set_annotations_at"]], "set_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.set_at"]], "set_character_type_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.set_character_type_at"]], "state_alphabet (dendropy.datamodel.charmatrixmodel.charactertype property)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterType.state_alphabet"]], "symbols_as_list() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.symbols_as_list"]], "symbols_as_string() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.symbols_as_string"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.charactertype method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterType.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.taxon_namespace_scoped_copy"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.taxon_state_sets_map"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.taxon_state_sets_map"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.taxon_state_sets_map"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.taxon_state_sets_map"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.taxon_state_sets_map"]], "taxon_state_sets_map() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.taxon_state_sets_map"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.update_sequences"]], "update_sequences() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.update_sequences"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.update_taxon_namespace"]], "update_taxon_namespace() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.update_taxon_namespace"]], "value_at() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.value_at"]], "values() (dendropy.datamodel.charmatrixmodel.characterdatasequence method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterDataSequence.values"]], "values() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.values"]], "values() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.values"]], "vector_size (dendropy.datamodel.charmatrixmodel.charactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.dnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.proteincharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.rnacharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.vector_size"]], "vector_size (dendropy.datamodel.charmatrixmodel.standardcharactermatrix property)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.vector_size"]], "write() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.write"]], "write() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.write"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.write_to_path"]], "write_to_path() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.write_to_path"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.charactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.CharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.continuouscharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ContinuousCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.dnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.DnaCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.infinitesitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.InfiniteSitesCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.proteincharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.ProteinCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.restrictionsitescharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RestrictionSitesCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.rnacharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.RnaCharacterMatrix.write_to_stream"]], "write_to_stream() (dendropy.datamodel.charmatrixmodel.standardcharactermatrix method)": [[8, "dendropy.datamodel.charmatrixmodel.StandardCharacterMatrix.write_to_stream"]], "statealphabet (class in dendropy.datamodel.charstatemodel)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet"]], "stateidentity (class in dendropy.datamodel.charstatemodel)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity"]], "__getitem__() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.__getitem__"]], "__iter__() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.__iter__"]], "__len__() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.__len__"]], "ambiguous_state_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.ambiguous_state_iter"]], "ambiguous_symbol_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.ambiguous_symbol_iter"]], "canonical_symbol_state_map (dendropy.datamodel.charstatemodel.statealphabet property)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.canonical_symbol_state_map"]], "compile_lookup_mappings() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.compile_lookup_mappings"]], "compile_member_states_lookup_mappings() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.compile_member_states_lookup_mappings"]], "compile_symbol_lookup_mappings() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.compile_symbol_lookup_mappings"]], "dendropy.datamodel.charstatemodel": [[9, "module-dendropy.datamodel.charstatemodel"]], "full_symbol_state_map (dendropy.datamodel.charstatemodel.statealphabet property)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.full_symbol_state_map"]], "fundamental_indexes (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.fundamental_indexes"]], "fundamental_indexes_with_gaps_as_missing (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.fundamental_indexes_with_gaps_as_missing"]], "fundamental_state_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.fundamental_state_iter"]], "fundamental_states (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.fundamental_states"]], "fundamental_symbol_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.fundamental_symbol_iter"]], "fundamental_symbols (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.fundamental_symbols"]], "get_canonical_symbol_for_symbol() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.get_canonical_symbol_for_symbol"]], "get_fundamental_states_for_symbols() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.get_fundamental_states_for_symbols"]], "get_states_for_symbols() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.get_states_for_symbols"]], "is_exact_correspondence() (dendropy.datamodel.charstatemodel.stateidentity method)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.is_exact_correspondence"]], "is_fundamental_state (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.is_fundamental_state"]], "is_single_state (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.is_single_state"]], "match_ambiguous_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.match_ambiguous_state"]], "match_polymorphic_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.match_polymorphic_state"]], "match_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.match_state"]], "member_states (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.member_states"]], "member_states_str (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.member_states_str"]], "multistate_state_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.multistate_state_iter"]], "multistate_symbol_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.multistate_symbol_iter"]], "new_ambiguous_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.new_ambiguous_state"]], "new_fundamental_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.new_fundamental_state"]], "new_multistate() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.new_multistate"]], "new_polymorphic_state() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.new_polymorphic_state"]], "new_symbol_synonym() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.new_symbol_synonym"]], "polymorphic_state_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.polymorphic_state_iter"]], "polymorphic_symbol_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.polymorphic_symbol_iter"]], "set_state_as_attribute() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.set_state_as_attribute"]], "state_denomination (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.state_denomination"]], "state_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.state_iter"]], "states (dendropy.datamodel.charstatemodel.statealphabet property)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.states"]], "symbol (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.symbol"]], "symbol_state_pair_iter() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.symbol_state_pair_iter"]], "symbol_synonyms (dendropy.datamodel.charstatemodel.stateidentity property)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.symbol_synonyms"]], "symbols (dendropy.datamodel.charstatemodel.statealphabet property)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.symbols"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charstatemodel.statealphabet method)": [[9, "dendropy.datamodel.charstatemodel.StateAlphabet.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.charstatemodel.stateidentity method)": [[9, "dendropy.datamodel.charstatemodel.StateIdentity.taxon_namespace_scoped_copy"]], "coalesce_nodes() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.coalesce_nodes"]], "constrained_kingman_tree() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.constrained_kingman_tree"]], "contained_coalescent_tree() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.contained_coalescent_tree"]], "dendropy.model.coalescent": [[10, "module-dendropy.model.coalescent"]], "discrete_time_to_coalescence() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.discrete_time_to_coalescence"]], "expected_tmrca() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.expected_tmrca"]], "extract_coalescent_frames() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.extract_coalescent_frames"]], "log_probability_of_coalescent_frames() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.log_probability_of_coalescent_frames"]], "log_probability_of_coalescent_tree() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.log_probability_of_coalescent_tree"]], "mean_kingman_tree() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.mean_kingman_tree"]], "node_waiting_time_pairs() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.node_waiting_time_pairs"]], "pure_kingman_tree() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.pure_kingman_tree"]], "pure_kingman_tree_shape() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.pure_kingman_tree_shape"]], "time_to_coalescence() (in module dendropy.model.coalescent)": [[10, "dendropy.model.coalescent.time_to_coalescence"]], "phylogeneticindependentcontrasts (class in dendropy.model.continuous)": [[11, "dendropy.model.continuous.PhylogeneticIndependentContrasts"]], "contrasts_tree() (dendropy.model.continuous.phylogeneticindependentcontrasts method)": [[11, "dendropy.model.continuous.PhylogeneticIndependentContrasts.contrasts_tree"]], "dendropy.model.continuous": [[11, "module-dendropy.model.continuous"]], "evolve_continuous_char() (in module dendropy.model.continuous)": [[11, "dendropy.model.continuous.evolve_continuous_char"]], "tree (dendropy.model.continuous.phylogeneticindependentcontrasts property)": [[11, "dendropy.model.continuous.PhylogeneticIndependentContrasts.tree"]], "dataset (class in dendropy.datamodel.datasetmodel)": [[12, "dendropy.datamodel.datasetmodel.DataSet"]], "add() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.add"]], "add_char_matrix() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.add_char_matrix"]], "add_taxon_namespace() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.add_taxon_namespace"]], "add_taxon_set() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.add_taxon_set"]], "add_tree_list() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.add_tree_list"]], "as_string() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.as_string"]], "attach_taxon_namespace() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.attach_taxon_namespace"]], "attach_taxon_set() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.attach_taxon_set"]], "clone() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.clone"]], "copy_annotations_from() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.deep_copy_annotations_from"]], "detach_taxon_namespace() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.detach_taxon_namespace"]], "detach_taxon_set() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.detach_taxon_set"]], "get() (dendropy.datamodel.datasetmodel.dataset class method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get"]], "get_from_path() (dendropy.datamodel.datasetmodel.dataset class method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get_from_path"]], "get_from_stream() (dendropy.datamodel.datasetmodel.dataset class method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get_from_stream"]], "get_from_string() (dendropy.datamodel.datasetmodel.dataset class method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get_from_string"]], "get_from_url() (dendropy.datamodel.datasetmodel.dataset class method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get_from_url"]], "get_tree_list() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.get_tree_list"]], "new_char_matrix() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.new_char_matrix"]], "new_taxon_namespace() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.new_taxon_namespace"]], "new_taxon_set() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.new_taxon_set"]], "new_tree_list() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.new_tree_list"]], "read() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.read"]], "read_from_path() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.read_from_path"]], "read_from_stream() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.read_from_stream"]], "read_from_string() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.read_from_string"]], "read_from_url() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.read_from_url"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.taxon_namespace_scoped_copy"]], "unify_taxon_namespaces() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.unify_taxon_namespaces"]], "write() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.write"]], "write_to_path() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.write_to_path"]], "write_to_stream() (dendropy.datamodel.datasetmodel.dataset method)": [[12, "dendropy.datamodel.datasetmodel.DataSet.write_to_stream"]], "discretecharacterevolutionmodel (class in dendropy.model.discrete)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolutionModel"]], "discretecharacterevolver (class in dendropy.model.discrete)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolver"]], "hky85 (class in dendropy.model.discrete)": [[13, "dendropy.model.discrete.Hky85"]], "jc69 (class in dendropy.model.discrete)": [[13, "dendropy.model.discrete.Jc69"]], "nucleotidecharacterevolutionmodel (class in dendropy.model.discrete)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel"]], "corrected_substitution_rate() (dendropy.model.discrete.hky85 method)": [[13, "dendropy.model.discrete.Hky85.corrected_substitution_rate"]], "dendropy.model.discrete": [[13, "module-dendropy.model.discrete"]], "evolve_states() (dendropy.model.discrete.discretecharacterevolver method)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolver.evolve_states"]], "extend_char_matrix_with_characters_on_tree() (dendropy.model.discrete.discretecharacterevolver method)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolver.extend_char_matrix_with_characters_on_tree"]], "hky85_chars() (in module dendropy.model.discrete)": [[13, "dendropy.model.discrete.hky85_chars"]], "is_purine() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_purine"]], "is_purine_transition() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_purine_transition"]], "is_pyrimidine() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_pyrimidine"]], "is_pyrimidine_transition() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_pyrimidine_transition"]], "is_transition() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_transition"]], "is_transversion() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.is_transversion"]], "pij() (dendropy.model.discrete.hky85 method)": [[13, "dendropy.model.discrete.Hky85.pij"]], "pmatrix() (dendropy.model.discrete.discretecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolutionModel.pmatrix"]], "pmatrix() (dendropy.model.discrete.hky85 method)": [[13, "dendropy.model.discrete.Hky85.pmatrix"]], "pvector() (dendropy.model.discrete.hky85 method)": [[13, "dendropy.model.discrete.Hky85.pvector"]], "qmatrix() (dendropy.model.discrete.hky85 method)": [[13, "dendropy.model.discrete.Hky85.qmatrix"]], "simulate_descendant_states() (dendropy.model.discrete.discretecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.DiscreteCharacterEvolutionModel.simulate_descendant_states"]], "simulate_discrete_char_dataset() (in module dendropy.model.discrete)": [[13, "dendropy.model.discrete.simulate_discrete_char_dataset"]], "simulate_discrete_chars() (in module dendropy.model.discrete)": [[13, "dendropy.model.discrete.simulate_discrete_chars"]], "stationary_sample() (dendropy.model.discrete.nucleotidecharacterevolutionmodel method)": [[13, "dendropy.model.discrete.NucleotideCharacterEvolutionModel.stationary_sample"]], "dendropy.model.parsimony": [[15, "module-dendropy.model.parsimony"]], "fitch_down_pass() (in module dendropy.model.parsimony)": [[15, "dendropy.model.parsimony.fitch_down_pass"]], "fitch_up_pass() (in module dendropy.model.parsimony)": [[15, "dendropy.model.parsimony.fitch_up_pass"]], "parsimony_score() (in module dendropy.model.parsimony)": [[15, "dendropy.model.parsimony.parsimony_score"]], "phylogeneticdistancematrix (class in dendropy.calculate.phylogeneticdistance)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix"]], "as_data_table() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.as_data_table"]], "assemblage_membership_definitions_from_csv() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.assemblage_membership_definitions_from_csv"]], "compile_from_tree() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.compile_from_tree"]], "dendropy.calculate.phylogeneticdistance": [[16, "module-dendropy.calculate.phylogeneticdistance"]], "distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.distance"]], "distances() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.distances"]], "distinct_taxon_pair_iter() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.distinct_taxon_pair_iter"]], "from_csv() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix class method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.from_csv"]], "from_tree() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix class method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.from_tree"]], "mean_nearest_taxon_distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.mean_nearest_taxon_distance"]], "mean_pairwise_distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.mean_pairwise_distance"]], "mrca() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.mrca"]], "nj_tree() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.nj_tree"]], "path_edge_count() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.path_edge_count"]], "path_edges() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.path_edges"]], "patristic_distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.patristic_distance"]], "shuffle_taxa() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.shuffle_taxa"]], "standardized_effect_size_mean_nearest_taxon_distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.standardized_effect_size_mean_nearest_taxon_distance"]], "standardized_effect_size_mean_pairwise_distance() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.standardized_effect_size_mean_pairwise_distance"]], "sum_of_distances() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.sum_of_distances"]], "taxon_iter() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.taxon_iter"]], "upgma_tree() (dendropy.calculate.phylogeneticdistance.phylogeneticdistancematrix method)": [[16, "dendropy.calculate.phylogeneticdistance.PhylogeneticDistanceMatrix.upgma_tree"]], "dendropy.simulate.popgensim": [[17, "module-dendropy.simulate.popgensim"]], "pop_gen_tree() (in module dendropy.simulate.popgensim)": [[17, "dendropy.simulate.popgensim.pop_gen_tree"]], "average_number_of_pairwise_differences() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.average_number_of_pairwise_differences"]], "dendropy.calculate.popgenstat": [[18, "module-dendropy.calculate.popgenstat"]], "derived_state_matrix() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.derived_state_matrix"]], "nucleotide_diversity() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.nucleotide_diversity"]], "num_segregating_sites() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.num_segregating_sites"]], "tajimas_d() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.tajimas_d"]], "unfolded_site_frequency_spectrum() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.unfolded_site_frequency_spectrum"]], "wattersons_theta() (in module dendropy.calculate.popgenstat)": [[18, "dendropy.calculate.popgenstat.wattersons_theta"]], "binomial_rv() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.binomial_rv"]], "chisq_pdf() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.chisq_pdf"]], "dendropy.calculate.probability": [[19, "module-dendropy.calculate.probability"]], "exp_pdf() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.exp_pdf"]], "geometric_rv() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.geometric_rv"]], "hypergeometric_pmf() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.hypergeometric_pmf"]], "num_poisson_events() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.num_poisson_events"]], "poisson_pmf() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.poisson_pmf"]], "poisson_rv() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.poisson_rv"]], "sample_multinomial() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.sample_multinomial"]], "weighted_choice() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.weighted_choice"]], "weighted_index_choice() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.weighted_index_choice"]], "z_pmf() (in module dendropy.calculate.probability)": [[19, "dendropy.calculate.probability.z_pmf"]], "protractedspeciationprocess (class in dendropy.model.protractedspeciation)": [[20, "dendropy.model.protractedspeciation.ProtractedSpeciationProcess"]], "dendropy.model.protractedspeciation": [[20, "module-dendropy.model.protractedspeciation"]], "expected_duration_of_speciation() (in module dendropy.model.protractedspeciation)": [[20, "dendropy.model.protractedspeciation.expected_duration_of_speciation"]], "generate_sample() (dendropy.model.protractedspeciation.protractedspeciationprocess method)": [[20, "dendropy.model.protractedspeciation.ProtractedSpeciationProcess.generate_sample"]], "log_probability_of_duration_of_speciation() (in module dendropy.model.protractedspeciation)": [[20, "dendropy.model.protractedspeciation.log_probability_of_duration_of_speciation"]], "maximum_probability_duration_of_speciation() (in module dendropy.model.protractedspeciation)": [[20, "dendropy.model.protractedspeciation.maximum_probability_duration_of_speciation"]], "probability_of_duration_of_speciation() (in module dendropy.model.protractedspeciation)": [[20, "dendropy.model.protractedspeciation.probability_of_duration_of_speciation"]], "containingtree (class in dendropy.model.reconcile)": [[21, "dendropy.model.reconcile.ContainingTree"]], "build_edge_taxa_sets() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.build_edge_taxa_sets"]], "clear() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.clear"]], "clear_contained_edges() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.clear_contained_edges"]], "deep_coalescences() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.deep_coalescences"]], "dendropy.model.reconcile": [[21, "module-dendropy.model.reconcile"]], "embed_contained_kingman() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.embed_contained_kingman"]], "embed_tree() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.embed_tree"]], "fit_edge_lengths() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.fit_edge_lengths"]], "monophyletic_partition_discordance() (in module dendropy.model.reconcile)": [[21, "dendropy.model.reconcile.monophyletic_partition_discordance"]], "num_deep_coalescences() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.num_deep_coalescences"]], "rebuild() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.rebuild"]], "reconciliation_discordance() (in module dendropy.model.reconcile)": [[21, "dendropy.model.reconcile.reconciliation_discordance"]], "simulate_contained_kingman() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.simulate_contained_kingman"]], "write_as_mesquite() (dendropy.model.reconcile.containingtree method)": [[21, "dendropy.model.reconcile.ContainingTree.write_as_mesquite"]], "fishersexacttest (class in dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.FishersExactTest"]], "dendropy.calculate.statistics": [[22, "module-dendropy.calculate.statistics"]], "empirical_cdf() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.empirical_cdf"]], "empirical_hpd() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.empirical_hpd"]], "left_tail_p() (dendropy.calculate.statistics.fishersexacttest method)": [[22, "dendropy.calculate.statistics.FishersExactTest.left_tail_p"]], "mean_and_population_variance() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.mean_and_population_variance"]], "mean_and_sample_variance() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.mean_and_sample_variance"]], "median() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.median"]], "mode() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.mode"]], "probability_of_table() (dendropy.calculate.statistics.fishersexacttest static method)": [[22, "dendropy.calculate.statistics.FishersExactTest.probability_of_table"]], "quantile_5_95() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.quantile_5_95"]], "rank() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.rank"]], "right_tail_p() (dendropy.calculate.statistics.fishersexacttest method)": [[22, "dendropy.calculate.statistics.FishersExactTest.right_tail_p"]], "summarize() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.summarize"]], "two_tail_p() (dendropy.calculate.statistics.fishersexacttest method)": [[22, "dendropy.calculate.statistics.FishersExactTest.two_tail_p"]], "variance_covariance() (in module dendropy.calculate.statistics)": [[22, "dendropy.calculate.statistics.variance_covariance"]], "taxon (class in dendropy.datamodel.taxonmodel)": [[23, "dendropy.datamodel.taxonmodel.Taxon"]], "taxonnamespace (class in dendropy.datamodel.taxonmodel)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace"]], "taxonnamespaceassociated (class in dendropy.datamodel.taxonmodel)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated"]], "__contains__() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.__contains__"]], "__getitem__() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.__getitem__"]], "__len__() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.__len__"]], "__str__() (dendropy.datamodel.taxonmodel.taxon method)": [[23, "dendropy.datamodel.taxonmodel.Taxon.__str__"]], "accession_index() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.accession_index"]], "add_taxa() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.add_taxa"]], "add_taxon() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.add_taxon"]], "all_taxa_bitmask() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.all_taxa_bitmask"]], "append() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.append"]], "bitmask_as_newick_string() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.bitmask_as_newick_string"]], "bitmask_taxa_list() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.bitmask_taxa_list"]], "clear() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.clear"]], "dendropy.datamodel.taxonmodel": [[23, "module-dendropy.datamodel.taxonmodel"]], "description() (dendropy.datamodel.taxonmodel.taxon method)": [[23, "dendropy.datamodel.taxonmodel.Taxon.description"]], "description() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.description"]], "discard_taxon_label() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.discard_taxon_label"]], "findall() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.findall"]], "get_taxa() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.get_taxa"]], "get_taxa_bitmask() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.get_taxa_bitmask"]], "get_taxon() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.get_taxon"]], "has_taxa_labels() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.has_taxa_labels"]], "has_taxon_label() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.has_taxon_label"]], "label_taxon_map() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.label_taxon_map"]], "labels() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.labels"]], "migrate_taxon_namespace() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.migrate_taxon_namespace"]], "new_taxa() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.new_taxa"]], "new_taxon() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.new_taxon"]], "poll_taxa() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.poll_taxa"]], "purge_taxon_namespace() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.purge_taxon_namespace"]], "reconstruct_taxon_namespace() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.reconstruct_taxon_namespace"]], "reindex_subcomponent_taxa() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.reindex_subcomponent_taxa"]], "reindex_taxa() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.reindex_taxa"]], "remove_taxon() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.remove_taxon"]], "remove_taxon_label() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.remove_taxon_label"]], "require_taxon() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.require_taxon"]], "reverse() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.reverse"]], "sort() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.sort"]], "split_as_newick_string() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.split_as_newick_string"]], "taxa_bipartition() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.taxa_bipartition"]], "taxa_bitmask() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.taxa_bitmask"]], "taxon_bitmask() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.taxon_bitmask"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.taxonmodel.taxon method)": [[23, "dendropy.datamodel.taxonmodel.Taxon.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.taxonmodel.taxonnamespace method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespace.taxon_namespace_scoped_copy"]], "update_taxon_namespace() (dendropy.datamodel.taxonmodel.taxonnamespaceassociated method)": [[23, "dendropy.datamodel.taxonmodel.TaxonNamespaceAssociated.update_taxon_namespace"]], "default_tree_type (dendropy.datamodel.treecollectionmodel.treelist attribute)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.DEFAULT_TREE_TYPE"]], "splitdistribution (class in dendropy.datamodel.treecollectionmodel)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution"]], "splitdistributionsummarizer (class in dendropy.datamodel.treecollectionmodel)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistributionSummarizer"]], "treearray (class in dendropy.datamodel.treecollectionmodel)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray"]], "treearray.incompatibleedgelengthstreearrayupdate": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.IncompatibleEdgeLengthsTreeArrayUpdate"]], "treearray.incompatiblenodeagestreearrayupdate": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.IncompatibleNodeAgesTreeArrayUpdate"]], "treearray.incompatiblerootingtreearrayupdate": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.IncompatibleRootingTreeArrayUpdate"]], "treearray.incompatibletreearrayupdate": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.IncompatibleTreeArrayUpdate"]], "treearray.incompatibletreeweightstreearrayupdate": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.IncompatibleTreeWeightsTreeArrayUpdate"]], "treelist (class in dendropy.datamodel.treecollectionmodel)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList"]], "__add__() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.__add__"]], "__add__() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.__add__"]], "__getitem__() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.__getitem__"]], "__getitem__() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.__getitem__"]], "__iadd__() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.__iadd__"]], "__iadd__() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.__iadd__"]], "__iter__() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.__iter__"]], "add_tree() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.add_tree"]], "add_trees() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.add_trees"]], "append() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.append"]], "append() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.append"]], "as_string() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.as_string"]], "as_tree_array() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.as_tree_array"]], "bipartition_encoding_frequencies() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.bipartition_encoding_frequencies"]], "calc_freqs() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.calc_freqs"]], "calculate_log_product_of_split_supports() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.calculate_log_product_of_split_supports"]], "calculate_sum_of_split_supports() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.calculate_sum_of_split_supports"]], "clone() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.clone"]], "collapse_edges_with_less_than_minimum_support() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.collapse_edges_with_less_than_minimum_support"]], "configure() (dendropy.datamodel.treecollectionmodel.splitdistributionsummarizer method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistributionSummarizer.configure"]], "consensus() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.consensus"]], "consensus_tree() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.consensus_tree"]], "consensus_tree() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.consensus_tree"]], "copy_annotations_from() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.copy_annotations_from"]], "count_splits_on_tree() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.count_splits_on_tree"]], "deep_copy_annotations_from() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.deep_copy_annotations_from"]], "dendropy.datamodel.treecollectionmodel": [[24, "module-dendropy.datamodel.treecollectionmodel"]], "extend() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.extend"]], "extend() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.extend"]], "frequency_of_bipartition() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.frequency_of_bipartition"]], "frequency_of_split() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.frequency_of_split"]], "get() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.get"]], "get_from_path() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.get_from_path"]], "get_from_stream() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.get_from_stream"]], "get_from_string() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.get_from_string"]], "get_from_url() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.get_from_url"]], "get_split_bitmask_and_edge_tuple() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.get_split_bitmask_and_edge_tuple"]], "insert() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.insert"]], "insert() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.insert"]], "log_product_of_split_support_on_tree() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.log_product_of_split_support_on_tree"]], "maximum_product_of_split_support_tree() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.maximum_product_of_split_support_tree"]], "maximum_product_of_split_support_tree() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.maximum_product_of_split_support_tree"]], "maximum_sum_of_split_support_tree() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.maximum_sum_of_split_support_tree"]], "maximum_sum_of_split_support_tree() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.maximum_sum_of_split_support_tree"]], "migrate_taxon_namespace() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.migrate_taxon_namespace"]], "normalize_bitmask() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.normalize_bitmask"]], "poll_taxa() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.poll_taxa"]], "purge_taxon_namespace() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.purge_taxon_namespace"]], "put() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.put"]], "read() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.read"]], "read() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.read"], [24, "id0"]], "read_from_files() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.read_from_files"]], "read_from_path() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.read_from_path"]], "read_from_stream() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.read_from_stream"]], "read_from_string() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.read_from_string"]], "read_from_url() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.read_from_url"]], "reconstruct_taxon_namespace() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.reconstruct_taxon_namespace"]], "reindex_subcomponent_taxa() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.reindex_subcomponent_taxa"]], "reindex_taxa() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.reindex_taxa"]], "split_bitmask_set_frequencies() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.split_bitmask_set_frequencies"]], "split_distribution() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.split_distribution"]], "split_support_iter() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.split_support_iter"]], "splits_considered() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.splits_considered"]], "sum_of_split_support_on_tree() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.sum_of_split_support_on_tree"]], "summarize_splits_on_tree() (dendropy.datamodel.treecollectionmodel.splitdistribution method)": [[24, "dendropy.datamodel.treecollectionmodel.SplitDistribution.summarize_splits_on_tree"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.taxon_namespace_scoped_copy"]], "topologies() (dendropy.datamodel.treecollectionmodel.treearray method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeArray.topologies"]], "tree_factory() (dendropy.datamodel.treecollectionmodel.treelist class method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.tree_factory"]], "update_taxon_namespace() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.update_taxon_namespace"]], "write() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.write"]], "write_to_path() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.write_to_path"]], "write_to_stream() (dendropy.datamodel.treecollectionmodel.treelist method)": [[24, "dendropy.datamodel.treecollectionmodel.TreeList.write_to_stream"]], "dendropy.calculate.treecompare": [[25, "module-dendropy.calculate.treecompare"]], "euclidean_distance() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.euclidean_distance"]], "false_positives_and_negatives() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.false_positives_and_negatives"]], "find_missing_bipartitions() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.find_missing_bipartitions"]], "mason_gamer_kellogg_score() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.mason_gamer_kellogg_score"]], "robinson_foulds_distance() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.robinson_foulds_distance"]], "symmetric_difference() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.symmetric_difference"]], "unweighted_robinson_foulds_distance() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.unweighted_robinson_foulds_distance"]], "weighted_robinson_foulds_distance() (in module dendropy.calculate.treecompare)": [[25, "dendropy.calculate.treecompare.weighted_robinson_foulds_distance"]], "b1() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.B1"]], "n_bar() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.N_bar"]], "patristicdistancematrix (class in dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.PatristicDistanceMatrix"]], "colless_tree_imbalance() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.colless_tree_imbalance"]], "dendropy.calculate.treemeasure": [[26, "module-dendropy.calculate.treemeasure"]], "patristic_distance() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.patristic_distance"]], "pybus_harvey_gamma() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.pybus_harvey_gamma"]], "sackin_index() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.sackin_index"]], "treeness() (in module dendropy.calculate.treemeasure)": [[26, "dendropy.calculate.treemeasure.treeness"]], "asciitreeplot (class in dendropy.datamodel.treemodel)": [[27, "dendropy.datamodel.treemodel.AsciiTreePlot"]], "asciitreeplot.nulledgelengtherror": [[27, "dendropy.datamodel.treemodel.AsciiTreePlot.NullEdgeLengthError"]], "b1() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.B1"]], "bipartition (class in dendropy.datamodel.treemodel)": [[27, "dendropy.datamodel.treemodel.Bipartition"]], "edge (class in dendropy.datamodel.treemodel)": [[27, "dendropy.datamodel.treemodel.Edge"]], "n_bar() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.N_bar"]], "node (class in dendropy.datamodel.treemodel)": [[27, "dendropy.datamodel.treemodel.Node"]], "tree (class in dendropy.datamodel.treemodel)": [[27, "dendropy.datamodel.treemodel.Tree"]], "__iter__() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.__iter__"]], "__len__() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.__len__"]], "__str__() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.__str__"]], "add_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.add_child"]], "adjacent_edges (dendropy.datamodel.treemodel.edge property)": [[27, "dendropy.datamodel.treemodel.Edge.adjacent_edges"]], "adjacent_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.adjacent_nodes"]], "age_order_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.age_order_iter"]], "age_order_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.age_order_node_iter"]], "ageorder_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.ageorder_iter"]], "ageorder_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.ageorder_node_iter"]], "ancestor_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.ancestor_iter"]], "apply() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.apply"]], "apply() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.apply"]], "as_ascii_plot() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.as_ascii_plot"]], "as_python_source() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.as_python_source"]], "as_string() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.as_string"]], "bipartition (dendropy.datamodel.treemodel.node property)": [[27, "dendropy.datamodel.treemodel.Node.bipartition"]], "calc_node_ages() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.calc_node_ages"]], "calc_node_root_distances() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.calc_node_root_distances"]], "calc_plot() (dendropy.datamodel.treemodel.asciitreeplot method)": [[27, "dendropy.datamodel.treemodel.AsciiTreePlot.calc_plot"]], "child_edge_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.child_edge_iter"]], "child_edges() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.child_edges"]], "child_node_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.child_node_iter"]], "child_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.child_nodes"]], "clear_child_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.clear_child_nodes"]], "clone() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.clone"]], "clone() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.clone"]], "clone() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.clone"]], "coalescence_intervals() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.coalescence_intervals"]], "collapse() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.collapse"]], "collapse_basal_bifurcation() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.collapse_basal_bifurcation"]], "collapse_clade() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.collapse_clade"]], "collapse_conflicting() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.collapse_conflicting"]], "collapse_unweighted_edges() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.collapse_unweighted_edges"]], "colless_tree_imbalance() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.colless_tree_imbalance"]], "compile_bipartition() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.compile_bipartition"]], "compile_split_bitmask() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.compile_split_bitmask"]], "compile_tree_leafset_bitmask() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.compile_tree_leafset_bitmask"]], "copy_annotations_from() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.copy_annotations_from"]], "copy_annotations_from() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.deep_copy_annotations_from"]], "deep_copy_annotations_from() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.deep_copy_annotations_from"]], "dendropy.datamodel.treemodel": [[27, "module-dendropy.datamodel.treemodel"]], "description() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.description"]], "description() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.description"]], "description() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.description"]], "distance_from_root() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.distance_from_root"]], "distance_from_tip() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.distance_from_tip"]], "draw_node() (dendropy.datamodel.treemodel.asciitreeplot method)": [[27, "dendropy.datamodel.treemodel.AsciiTreePlot.draw_node"]], "edge (dendropy.datamodel.treemodel.node property)": [[27, "dendropy.datamodel.treemodel.Node.edge"]], "edge_factory() (dendropy.datamodel.treemodel.node class method)": [[27, "dendropy.datamodel.treemodel.Node.edge_factory"]], "edge_length (dendropy.datamodel.treemodel.node property)": [[27, "dendropy.datamodel.treemodel.Node.edge_length"]], "edges() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.edges"]], "encode_bipartitions() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.encode_bipartitions"]], "encode_splits() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.encode_splits"]], "euclidean_distance() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.euclidean_distance"]], "extract_subtree() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.extract_subtree"]], "extract_tree() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.extract_tree"]], "extract_tree_with_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.extract_tree_with_taxa"]], "extract_tree_with_taxa_labels() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.extract_tree_with_taxa_labels"]], "extract_tree_without_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.extract_tree_without_taxa"]], "extract_tree_without_taxa_labels() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.extract_tree_without_taxa_labels"]], "false_positives_and_negatives() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.false_positives_and_negatives"]], "filter_leaf_nodes() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.filter_leaf_nodes"]], "find_missing_splits() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_missing_splits"]], "find_node() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_node"]], "find_node_for_taxon() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_node_for_taxon"]], "find_node_with_label() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_node_with_label"]], "find_node_with_taxon() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_node_with_taxon"]], "find_node_with_taxon_label() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_node_with_taxon_label"]], "find_nodes() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.find_nodes"]], "from_bipartition_encoding() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.from_bipartition_encoding"]], "from_split_bitmasks() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.from_split_bitmasks"]], "get() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.get"]], "get_adjacent_edges() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.get_adjacent_edges"]], "get_adjacent_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.get_adjacent_nodes"]], "get_from_path() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.get_from_path"]], "get_from_stream() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.get_from_stream"]], "get_from_string() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.get_from_string"]], "get_from_url() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.get_from_url"]], "get_incident_edges() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.get_incident_edges"]], "incident_edges() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.incident_edges"]], "infer_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.infer_taxa"]], "inorder_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.inorder_edge_iter"]], "inorder_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.inorder_iter"]], "inorder_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.inorder_node_iter"]], "insert_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.insert_child"]], "insert_new_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.insert_new_child"]], "internal_edges() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.internal_edges"]], "internal_node_ages() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.internal_node_ages"]], "internal_nodes() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.internal_nodes"]], "invert() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.invert"]], "is_compatible_bitmasks() (dendropy.datamodel.treemodel.bipartition static method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_compatible_bitmasks"]], "is_compatible_with() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_compatible_with"]], "is_compatible_with_bipartition() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.is_compatible_with_bipartition"]], "is_incompatible_with() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_incompatible_with"]], "is_internal() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.is_internal"]], "is_internal() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.is_internal"]], "is_leaf() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.is_leaf"]], "is_leaf() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.is_leaf"]], "is_leafset_nested_within() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_leafset_nested_within"]], "is_nested_within() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_nested_within"]], "is_trivial() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_trivial"]], "is_trivial_bitmask() (dendropy.datamodel.treemodel.bipartition static method)": [[27, "dendropy.datamodel.treemodel.Bipartition.is_trivial_bitmask"]], "ladderize() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.ladderize"]], "leaf_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.leaf_edge_iter"]], "leaf_edges() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.leaf_edges"]], "leaf_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.leaf_iter"]], "leaf_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.leaf_iter"]], "leaf_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.leaf_node_iter"]], "leaf_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.leaf_nodes"]], "leaf_nodes() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.leaf_nodes"]], "leafset_as_bitstring() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.leafset_as_bitstring"]], "leafset_as_newick_string() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.leafset_as_newick_string"]], "leafset_taxa() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.leafset_taxa"]], "length() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.length"]], "level() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.level"]], "level_order_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.level_order_edge_iter"]], "level_order_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.level_order_iter"]], "level_order_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.level_order_node_iter"]], "levelorder_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.levelorder_edge_iter"]], "levelorder_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.levelorder_iter"]], "levelorder_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.levelorder_node_iter"]], "max_distance_from_root() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.max_distance_from_root"]], "migrate_taxon_namespace() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.migrate_taxon_namespace"]], "minmax_leaf_distance_from_root() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.minmax_leaf_distance_from_root"]], "mrca() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.mrca"]], "new_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.new_child"]], "node_ages() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.node_ages"]], "node_factory() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.node_factory"]], "nodes() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.nodes"]], "normalize() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.normalize"]], "num_child_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.num_child_nodes"]], "num_lineages_at() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.num_lineages_at"]], "parent_node (dendropy.datamodel.treemodel.node property)": [[27, "dendropy.datamodel.treemodel.Node.parent_node"]], "phylogenetic_distance_matrix() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.phylogenetic_distance_matrix"]], "poll_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.poll_taxa"]], "postorder_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.postorder_edge_iter"]], "postorder_internal_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.postorder_internal_edge_iter"]], "postorder_internal_node_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.postorder_internal_node_iter"]], "postorder_internal_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.postorder_internal_node_iter"]], "postorder_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.postorder_iter"]], "postorder_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.postorder_node_iter"]], "preorder_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.preorder_edge_iter"]], "preorder_internal_edge_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.preorder_internal_edge_iter"]], "preorder_internal_node_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.preorder_internal_node_iter"]], "preorder_internal_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.preorder_internal_node_iter"]], "preorder_iter() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.preorder_iter"]], "preorder_node_iter() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.preorder_node_iter"]], "print_plot() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.print_plot"]], "prune_leaves_without_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.prune_leaves_without_taxa"]], "prune_subtree() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.prune_subtree"]], "prune_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.prune_taxa"]], "prune_taxa_with_labels() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.prune_taxa_with_labels"]], "purge_taxon_namespace() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.purge_taxon_namespace"]], "pybus_harvey_gamma() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.pybus_harvey_gamma"]], "randomly_assign_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.randomly_assign_taxa"]], "randomly_reorient() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.randomly_reorient"]], "randomly_rotate() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.randomly_rotate"]], "reconstruct_taxon_namespace() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reconstruct_taxon_namespace"]], "reindex_subcomponent_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reindex_subcomponent_taxa"]], "reindex_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reindex_taxa"]], "reinsert_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.reinsert_nodes"]], "remove_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.remove_child"]], "reorder() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reorder"]], "reroot_at_edge() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reroot_at_edge"]], "reroot_at_midpoint() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reroot_at_midpoint"]], "reroot_at_node() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reroot_at_node"]], "reseed_at() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.reseed_at"]], "resolve_node_ages() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.resolve_node_ages"]], "resolve_node_depths() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.resolve_node_depths"]], "resolve_polytomies() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.resolve_polytomies"]], "retain_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.retain_taxa"]], "retain_taxa_with_labels() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.retain_taxa_with_labels"]], "reversible_remove_child() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.reversible_remove_child"]], "robinson_foulds_distance() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.robinson_foulds_distance"]], "sackin_index() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.sackin_index"]], "scale_edges() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.scale_edges"]], "set_child_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.set_child_nodes"]], "set_children() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.set_children"]], "set_edge_lengths_from_node_ages() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.set_edge_lengths_from_node_ages"]], "shuffle_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.shuffle_taxa"]], "sibling_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.sibling_nodes"]], "sister_nodes() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.sister_nodes"]], "split_as_bitstring() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.split_as_bitstring"]], "split_as_newick_string() (dendropy.datamodel.treemodel.bipartition method)": [[27, "dendropy.datamodel.treemodel.Bipartition.split_as_newick_string"]], "strip_comments() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.strip_comments"]], "suppress_unifurcations() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.suppress_unifurcations"]], "symmetric_difference() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.symmetric_difference"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.treemodel.edge method)": [[27, "dendropy.datamodel.treemodel.Edge.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.treemodel.node method)": [[27, "dendropy.datamodel.treemodel.Node.taxon_namespace_scoped_copy"]], "taxon_namespace_scoped_copy() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.taxon_namespace_scoped_copy"]], "to_outgroup_position() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.to_outgroup_position"]], "treeness() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.treeness"]], "unassign_taxa() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.unassign_taxa"]], "update_bipartitions() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.update_bipartitions"]], "update_splits() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.update_splits"]], "update_taxon_namespace() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.update_taxon_namespace"]], "with_traceback() (dendropy.datamodel.treemodel.asciitreeplot.nulledgelengtherror method)": [[27, "dendropy.datamodel.treemodel.AsciiTreePlot.NullEdgeLengthError.with_traceback"]], "write() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.write"]], "write_as_dot() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.write_as_dot"]], "write_ascii_plot() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.write_ascii_plot"]], "write_to_path() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.write_to_path"]], "write_to_stream() (dendropy.datamodel.treemodel.tree method)": [[27, "dendropy.datamodel.treemodel.Tree.write_to_stream"]], "yield_from_files() (dendropy.datamodel.treemodel.tree class method)": [[27, "dendropy.datamodel.treemodel.Tree.yield_from_files"]], "dendropy.calculate.treescore": [[28, "module-dendropy.calculate.treescore"]], "dendropy.model.treeshape": [[29, "module-dendropy.model.treeshape"]], "star_tree() (in module dendropy.model.treeshape)": [[29, "dendropy.model.treeshape.star_tree"]], "birth_death_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.birth_death_tree"]], "constrained_kingman_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.constrained_kingman_tree"]], "contained_coalescent_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.contained_coalescent_tree"]], "dendropy.simulate.treesim": [[30, "module-dendropy.simulate.treesim"]], "discrete_birth_death_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.discrete_birth_death_tree"]], "mean_kingman_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.mean_kingman_tree"]], "pure_kingman_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.pure_kingman_tree"]], "star_tree() (in module dendropy.simulate.treesim)": [[30, "dendropy.simulate.treesim.star_tree"]]}})